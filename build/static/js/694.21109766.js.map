{"version":3,"file":"static/js/694.21109766.js","mappings":"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","sources":["components/AppData/useAppConfig.js","components/AppData/useChatState.js","components/hooks/usePlaylist.js","plugins/whiteboard/PusherCommunicationProvider.js","plugins/whiteboard/WhiteboardEvents.js","plugins/whiteboard/useMultiplayerState.js","plugins/whiteboard/Whiteboard.jsx","plugins/whiteboard/ToggleWhiteboard.jsx","components/Playlist/PlaylistControls.jsx","components/ScreenshareTile.jsx","components/TileMenu.jsx","components/Pagination.jsx","components/VideoList.jsx","components/VideoTile.jsx","components/Chat/ChatFooter.jsx","components/Chat/ChatHeader.jsx","components/Chat/ChatBody.jsx","components/Chat/ChatDotIcon.jsx","components/Chat/ChatSelector.jsx","components/Chat/useUnreadCount.js","components/Chat/Chat.js","components/chatView.jsx","components/LeaveRoom.jsx","components/MoreSettings/ChangeSelfRole.jsx","components/hooks/useFullscreen.js","components/MoreSettings/FullScreenItem.jsx","components/MoreSettings/UISettings.jsx","components/MoreSettings/ChangeNameModal.jsx","components/StatsForNerds.jsx","components/MoreSettings/MuteAllModal.jsx","components/MoreSettings/ResolutionInput.jsx","components/MoreSettings/RecordingAndRTMPModal.jsx","components/MoreSettings/MoreSettings.jsx","components/ScreenShare.jsx","components/ScreenshareHintModal.jsx","plugins/NoiseSuppression.js","plugins/VirtualBackground/vbutils.js","plugins/VirtualBackground/VirtualBackground.jsx","components/Playlist/PlaylistItem.jsx","components/Playlist/Playlist.jsx","components/Footer.jsx","components/RoleChangeRequestModal.jsx","layouts/mainGridView.jsx","common/hooks.js","layouts/mainView.jsx","components/conference.jsx","components/FirstPersonDisplay.jsx","components/Image.jsx","components/gridView.jsx","components/peerTileUtils.jsx","components/ScreenshareDisplay.jsx","components/Playlist/VideoPlayer.jsx","layouts/screenShareView.jsx"],"sourcesContent":["import { selectAppData, useHMSStore } from \"@100mslive/react-sdk\";\nimport { APP_DATA } from \"../../common/constants\";\n\nexport const useAppConfig = () => {\n  const value = useHMSStore(selectAppData(APP_DATA.appConfig));\n  return value;\n};\n","import { useCallback } from \"react\";\nimport {\n  selectAppData,\n  useHMSActions,\n  useHMSStore,\n  useHMSVanillaStore,\n} from \"@100mslive/react-sdk\";\nimport { APP_DATA } from \"../../common/constants\";\n\nexport const useIsChatOpen = () => {\n  const isChatOpen = useHMSStore(selectAppData(APP_DATA.chatOpen));\n  return !!isChatOpen;\n};\n\nexport const useToggleChat = () => {\n  const hmsActions = useHMSActions();\n  const vanillaStore = useHMSVanillaStore();\n  const toggleChat = useCallback(() => {\n    const isChatOpen = vanillaStore.getState(selectAppData(APP_DATA.chatOpen));\n    hmsActions.setAppData(APP_DATA.chatOpen, !isChatOpen, true);\n  }, [vanillaStore, hmsActions]);\n  return toggleChat;\n};\n\nexport const useChatDraftMessage = () => {\n  const hmsActions = useHMSActions();\n  let chatDraftMessage = useHMSStore(selectAppData(APP_DATA.chatDraft));\n  if (chatDraftMessage === undefined || chatDraftMessage === null) {\n    chatDraftMessage = \"\";\n  }\n  const setDraftMessage = useCallback(\n    message => {\n      hmsActions.setAppData(APP_DATA.chatDraft, message, true);\n    },\n    [hmsActions]\n  );\n  return [chatDraftMessage, setDraftMessage];\n};\n","import {\n  HMSPlaylistType,\n  selectAudioPlaylist,\n  selectVideoPlaylist,\n  useHMSActions,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\n\nexport const usePlaylist = type => {\n  const isAudioPlaylist = type === HMSPlaylistType.audio;\n  const selector = isAudioPlaylist ? selectAudioPlaylist : selectVideoPlaylist;\n  const active = useHMSStore(selector.selectedItem);\n  const selection = useHMSStore(selector.selection);\n  const playlist = useHMSStore(selector.list);\n  const hmsActions = useHMSActions();\n  const playlistAction = isAudioPlaylist\n    ? hmsActions.audioPlaylist\n    : hmsActions.videoPlaylist;\n\n  return {\n    active,\n    hasNext: selection.hasNext,\n    hasPrevious: selection.hasPrevious,\n    actions: playlistAction,\n    list: playlist,\n  };\n};\n","// @ts-check\nimport Pusher from \"pusher-js\";\n\nconst stringifyWithNull = obj =>\n  JSON.stringify(obj, (k, v) => (v === undefined ? null : v));\n\n/**\n * On whiteboard close, owner sends current state to remote peers.\n * Remote peers tear down too quickly(unsubscribing listeners) and are unable to store the last state.\n *\n * Hack: To overcome this, attach 2 listeners:\n * one for storing the message(won't be unsubscribed),\n * one for calling the actual whiteboard callback(will be unsubscribed on whiteboard close)\n *\n * This way the last state is always received and stored\n */\n\n/**\n * Base class which can be extended to use various realtime communication services.\n * Methods to broadcast and subscribe to events.\n *\n * Stores the last message received/broadcasted to resend when required(when board is ready)\n */\n\nclass PusherCommunicationProvider {\n  constructor() {\n    /** @private */\n    this.initialized = false;\n    /** @private */\n    this.lastMessage = {};\n  }\n\n  init = (roomId = \"\") => {\n    if (this.initialized) {\n      return;\n    }\n\n    /** @private */\n    this.pusher = new Pusher(process.env.REACT_APP_PUSHER_APP_KEY, {\n      cluster: \"ap2\",\n      authEndpoint: process.env.REACT_APP_PUSHER_AUTHENDPOINT,\n    });\n\n    // Pusher.default.logToConsole = true;\n\n    /** @private */\n    this.channel = this.pusher.subscribe(`private-${roomId}`);\n\n    /**\n     * When events(peer-join) are sent too early before subscribing to a channel,\n     * resend last event after subscription has succeeded.\n     */\n    this.channel.bind(\"pusher:subscription_succeeded\", this.resendLastEvents);\n\n    console.log(\"Whiteboard initialized communication through Pusher\");\n    this.initialized = true;\n  };\n\n  /**\n   * @param {string} eventName\n   * @param {any} message\n   */\n  storeEvent = (eventName, message) => {\n    this.lastMessage[eventName] = { eventName, ...message };\n  };\n\n  /**\n   * @param {string} eventName\n   * @returns {any}\n   */\n  getStoredEvent = eventName => {\n    return this.lastMessage[eventName];\n  };\n\n  /**\n   * @param {string} eventName\n   * @param {Object} arg\n   */\n  broadcastEvent = (eventName, arg = {}) => {\n    this.storeEvent(eventName, arg);\n\n    this.channel.trigger(\n      `client-${eventName}`,\n      stringifyWithNull({ eventName, ...arg })\n    );\n  };\n\n  /**\n   *\n   * @param {string} eventName\n   * @param {Function} cb\n   */\n  subscribe = (eventName, cb) => {\n    this.channel.bind(`client-${eventName}`, message =>\n      this.storeEvent(eventName, message)\n    );\n    this.channel.bind(`client-${eventName}`, cb);\n    return () => {\n      this.channel.unbind(`client-${eventName}`, cb);\n    };\n  };\n\n  /** @private */\n  resendLastEvents = () => {\n    for (const eventName in this.lastMessage) {\n      if (this.lastMessage[eventName]) {\n        this.channel.trigger(\n          `client-${eventName}`,\n          this.lastMessage[eventName]\n        );\n      }\n    }\n  };\n}\n\n/**\n * @type {PusherCommunicationProvider}\n */\nexport const provider = new PusherCommunicationProvider();\n","export const WhiteboardEvents = {\n  // To broadcast new changes made in whiteboard\n  STATE_CHANGE: \"state-change\",\n  // To broadcast the current whole state of the board by the owner\n  CURRENT_STATE: \"current-state\",\n  // For newly joined peers to request current state from owner\n  REQUEST_STATE: \"request-state\",\n};\n","// @ts-check\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useHMSStore, selectDidIJoinWithin } from \"@100mslive/react-sdk\";\nimport { provider as room } from \"./PusherCommunicationProvider\";\nimport { useWhiteboardMetadata } from \"./useWhiteboardMetadata\";\nimport { WhiteboardEvents as Events } from \"./WhiteboardEvents\";\n\nconst useWhiteboardState = () => {\n  const { amIWhiteboardOwner } = useWhiteboardMetadata();\n  const shouldRequestState = useHMSStore(selectDidIJoinWithin(850));\n\n  return { shouldRequestState, amIWhiteboardOwner };\n};\n\n/**\n * Ref: https://github.com/tldraw/tldraw/blob/main/apps/www/hooks/useMultiplayerState.ts\n */\nexport function useMultiplayerState(roomId) {\n  const [app, setApp] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n  const { amIWhiteboardOwner, shouldRequestState } = useWhiteboardState();\n\n  /**\n   * Stores current state(shapes, bindings, [assets]) of the whiteboard\n   */\n  const rLiveShapes = useRef(new Map());\n  const rLiveBindings = useRef(new Map());\n\n  const getCurrentState = useCallback(() => {\n    return {\n      shapes: rLiveShapes.current\n        ? Object.fromEntries(rLiveShapes.current)\n        : {},\n      bindings: rLiveBindings.current\n        ? Object.fromEntries(rLiveBindings.current)\n        : {},\n    };\n  }, []);\n\n  const sendCurrentState = useCallback(() => {\n    if (amIWhiteboardOwner && isReady) {\n      room.broadcastEvent(Events.CURRENT_STATE, getCurrentState());\n    }\n  }, [amIWhiteboardOwner, isReady, getCurrentState]);\n\n  const updateLocalState = useCallback(({ shapes, bindings, merge = true }) => {\n    if (!(shapes && bindings)) return;\n\n    if (merge) {\n      const lShapes = rLiveShapes.current;\n      const lBindings = rLiveBindings.current;\n\n      if (!(lShapes && lBindings)) return;\n      Object.entries(shapes).forEach(([id, shape]) => {\n        if (!shape) {\n          lShapes.delete(id);\n        } else {\n          lShapes.set(shape.id, shape);\n        }\n      });\n\n      Object.entries(bindings).forEach(([id, binding]) => {\n        if (!binding) {\n          lBindings.delete(id);\n        } else {\n          lBindings.set(binding.id, binding);\n        }\n      });\n    } else {\n      rLiveShapes.current = new Map(Object.entries(shapes));\n      rLiveBindings.current = new Map(Object.entries(bindings));\n    }\n  }, []);\n\n  const applyStateToBoard = useCallback(\n    state => {\n      app === null || app === void 0\n        ? void 0\n        : app.replacePageContent(\n            state.shapes,\n            state.bindings,\n            {} // Object.fromEntries(lAssets.entries())\n          );\n    },\n    [app]\n  );\n\n  const handleChanges = useCallback(\n    state => {\n      if (!state) {\n        return;\n      }\n\n      const { shapes, bindings, eventName } = state;\n      updateLocalState({\n        shapes,\n        bindings,\n        merge: eventName === Events.STATE_CHANGE,\n      });\n      applyStateToBoard(getCurrentState());\n    },\n    [applyStateToBoard, getCurrentState, updateLocalState]\n  );\n\n  const setupInitialState = useCallback(() => {\n    if (!isReady) {\n      return;\n    }\n\n    if (amIWhiteboardOwner) {\n      // On board open, update the document with initial/stored content\n      handleChanges(room.getStoredEvent(Events.CURRENT_STATE));\n      // Send current state to other peers in the room currently\n      sendCurrentState();\n    } else if (shouldRequestState) {\n      /**\n       * Newly joined peers request the owner for current state\n       * and update their boards when they receive it\n       */\n      room.broadcastEvent(Events.REQUEST_STATE);\n    }\n  }, [\n    isReady,\n    amIWhiteboardOwner,\n    shouldRequestState,\n    handleChanges,\n    sendCurrentState,\n  ]);\n\n  // Callbacks --------------\n  // Put the state into the window, for debugging.\n  const onMount = useCallback(\n    app => {\n      app.loadRoom(roomId);\n      app.pause(); // Turn off the app's own undo / redo stack\n      // window.app = app;\n      setApp(app);\n    },\n    [roomId]\n  );\n\n  // Update the live shapes when the app's shapes change.\n  const onChangePage = useCallback(\n    (_app, shapes, bindings, _assets) => {\n      updateLocalState({ shapes, bindings });\n      room.broadcastEvent(Events.STATE_CHANGE, { shapes, bindings });\n\n      /**\n       * Tldraw thinks that the next update passed to replacePageContent after onChangePage is the own update triggered by onChangePage\n       * and the replacePageContent doesn't have any effect if it is a valid update from remote.\n       *\n       * To overcome this replacePageContent locally onChangePage(not costly - returns from first line).\n       *\n       * Refer: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/src/state/TldrawApp.ts#L684\n       */\n      applyStateToBoard(getCurrentState());\n    },\n    [updateLocalState, applyStateToBoard, getCurrentState]\n  );\n\n  // Handle presence updates when the user's pointer / selection changes\n  // const onChangePresence = useCallback((app, user) => {\n  //   updateMyPresence({ id: app.room?.userId, user });\n  // }, [][updateMyPresence]);\n\n  // Subscriptions and initial setup\n  useEffect(() => {\n    if (!app) return;\n    const unsubs = [];\n\n    let stillAlive = true;\n\n    // Setup the document's storage and subscriptions\n    function setupDocument() {\n      // Subscribe to changes\n      if (stillAlive) {\n        unsubs.push(room.subscribe(Events.STATE_CHANGE, handleChanges));\n        unsubs.push(room.subscribe(Events.CURRENT_STATE, handleChanges));\n\n        // On request state(peer join), send whole current state to update the new peer's whiteboard\n        unsubs.push(room.subscribe(Events.REQUEST_STATE, sendCurrentState));\n\n        setIsReady(true);\n      }\n    }\n\n    room.init();\n    setupDocument();\n    setupInitialState();\n\n    return () => {\n      stillAlive = false;\n      unsubs.forEach(unsub => unsub());\n    };\n  }, [app, setupInitialState, sendCurrentState, handleChanges]);\n\n  useEffect(() => {\n    // Store last state on closing whitboard so that when the board is reopened the state could be fetched and reapplied\n    const handleUnmount = () => {\n      if (isReady && !shouldRequestState) {\n        console.log(\"Whiteboard unmount storing\", getCurrentState());\n        room.storeEvent(Events.CURRENT_STATE, getCurrentState());\n      }\n    };\n\n    return handleUnmount;\n  }, [isReady, shouldRequestState, getCurrentState]);\n\n  return { onMount, onChangePage };\n}\n","import React from \"react\";\nimport { Tldraw } from \"@tldraw/tldraw\";\nimport { useMultiplayerState } from \"./useMultiplayerState\";\n\nexport const Whiteboard = React.memo(({ roomId }) => {\n  const events = useMultiplayerState(roomId);\n\n  return (\n    <Tldraw\n      autofocus\n      disableAssets={true}\n      showSponsorLink={false}\n      showPages={false}\n      showMenu={false}\n      {...events}\n    />\n  );\n});\n","import { IconButton, Tooltip } from \"@100mslive/react-ui\";\nimport { PencilDrawIcon } from \"@100mslive/react-icons\";\nimport { useWhiteboardMetadata } from \"./useWhiteboardMetadata\";\n\nexport const ToggleWhiteboard = () => {\n  const {\n    whiteboardEnabled,\n    whiteboardOwner: whiteboardActive,\n    amIWhiteboardOwner,\n    toggleWhiteboard,\n  } = useWhiteboardMetadata();\n\n  if (!whiteboardEnabled) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      title={`${\n        whiteboardActive\n          ? amIWhiteboardOwner\n            ? `Stop whiteboard`\n            : `Can't stop whiteboard`\n          : \"Start whiteboard\"\n      }`}\n      key=\"whiteboard\"\n    >\n      <IconButton\n        css={{\n          mx: \"$4\",\n        }}\n        onClick={toggleWhiteboard}\n        active={!whiteboardActive}\n        disabled={whiteboardActive && !amIWhiteboardOwner}\n        data-testid=\"white_board_btn\"\n      >\n        <PencilDrawIcon />\n      </IconButton>\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport {\n  HMSPlaylistType,\n  selectAudioPlaylist,\n  selectAudioTrackVolume,\n  selectPeerSharingVideoPlaylist,\n  selectVideoPlaylist,\n  selectVideoPlaylistAudioTrackByPeerID,\n  useHMSActions,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport {\n  PrevIcon,\n  NextIcon,\n  PlayIcon,\n  PauseIcon,\n  PlaylistIcon,\n  SpeakerIcon,\n} from \"@100mslive/react-icons\";\nimport { Box, Flex, IconButton, Slider, Text } from \"@100mslive/react-ui\";\nimport { usePlaylist } from \"../hooks/usePlaylist\";\n\nconst Progress = ({ type, duration }) => {\n  const selectPlaylist =\n    type === HMSPlaylistType.audio ? selectAudioPlaylist : selectVideoPlaylist;\n  const progress = useHMSStore(selectPlaylist.progress);\n  const hmsActions = useHMSActions();\n  const playlistAction =\n    type === HMSPlaylistType.audio\n      ? hmsActions.audioPlaylist\n      : hmsActions.videoPlaylist;\n\n  if (!duration) {\n    return null;\n  }\n\n  return (\n    <Slider\n      step={1}\n      value={[progress]}\n      onValueChange={e => {\n        playlistAction.seekTo(e[0] * 0.01 * duration);\n      }}\n    />\n  );\n};\n\nexport const PlaylistActive = ({ type, onToggle }) => {\n  const isAudioPlaylist = type === HMSPlaylistType.audio;\n  const selector = isAudioPlaylist ? selectAudioPlaylist : selectVideoPlaylist;\n  const active = useHMSStore(selector.selectedItem);\n  if (!active) {\n    return null;\n  }\n  return (\n    <Box css={{ mt: \"$8\" }}>\n      <Flex justify=\"between\" css={{ w: \"100%\" }}>\n        <Box>\n          <Text variant=\"md\">{active.name}</Text>\n          {active.metadata?.description && (\n            <Text variant=\"xs\">{active.metadata?.description}</Text>\n          )}\n        </Box>\n        <IconButton\n          onClick={onToggle}\n          css={{ alignSelf: \"center\" }}\n          data-testid=\"playlist_collapse_btn\"\n        >\n          <PlaylistIcon />\n        </IconButton>\n      </Flex>\n    </Box>\n  );\n};\n\nconst Controls = ({ type, css = {} }) => {\n  const { active, hasNext, hasPrevious, actions } = usePlaylist(type);\n  if (!active) {\n    return null;\n  }\n  return (\n    <Flex justify=\"center\" css={css}>\n      <IconButton\n        disabled={!hasPrevious}\n        onClick={() => {\n          actions.playPrevious();\n        }}\n        data-testid=\"playlist_prev_btn\"\n      >\n        <PrevIcon />\n      </IconButton>\n      <IconButton\n        onClick={() => {\n          active.playing ? actions.pause() : actions.play(active.id);\n        }}\n        data-testid=\"playlist_play_pause_btn\"\n      >\n        {active.playing ? (\n          <PauseIcon width={32} height={32} />\n        ) : (\n          <PlayIcon width={32} height={32} />\n        )}\n      </IconButton>\n      <IconButton\n        disabled={!hasNext}\n        onClick={() => {\n          actions.playNext();\n        }}\n        data-testid=\"playlist_next_btn\"\n      >\n        <NextIcon />\n      </IconButton>\n    </Flex>\n  );\n};\n\nconst VolumeControl = () => {\n  const hmsActions = useHMSActions();\n  const volume = useHMSStore(selectVideoPlaylist.volume);\n  const active = useHMSStore(selectVideoPlaylist.selectedItem);\n  const peerSharingPlaylist = useHMSStore(selectPeerSharingVideoPlaylist);\n  const audioTrack = useHMSStore(\n    selectVideoPlaylistAudioTrackByPeerID(peerSharingPlaylist?.id)\n  );\n  const audioTrackVolume = useHMSStore(selectAudioTrackVolume(audioTrack?.id));\n  const sliderVolume = active ? volume : audioTrackVolume;\n\n  return (\n    <Flex align=\"center\" css={{ color: \"$white\" }}>\n      <SpeakerIcon />\n      <Slider\n        css={{ mx: \"$4\", w: \"$20\" }}\n        min={0}\n        max={100}\n        step={1}\n        value={[Math.floor(sliderVolume)]}\n        onValueChange={e => {\n          const value = e[0];\n          if (active) {\n            hmsActions.videoPlaylist.setVolume(value);\n          } else if (audioTrack) {\n            hmsActions.setVolume(value, audioTrack.id);\n          }\n        }}\n        thumbStyles={{ w: \"$6\", h: \"$6\" }}\n      />\n    </Flex>\n  );\n};\n\nexport const AudioPlaylistControls = ({ onToggle }) => {\n  const { active } = usePlaylist(HMSPlaylistType.audio);\n  if (!active) {\n    return null;\n  }\n  return (\n    <Box\n      css={{\n        p: \"$8\",\n        borderTop: \"1px solid $borderLight\",\n        bg: \"$menuBg\",\n      }}\n    >\n      <Controls type={HMSPlaylistType.audio} />\n      <Progress type={HMSPlaylistType.audio} duration={active.duration} />\n      <PlaylistActive type={HMSPlaylistType.audio} onToggle={onToggle} />\n    </Box>\n  );\n};\n\nexport const VideoPlaylistControls = ({ children }) => {\n  const { active } = usePlaylist(HMSPlaylistType.video);\n\n  return (\n    <Box\n      css={{\n        p: \"$8\",\n        mt: \"-$24\",\n        w: \"100%\",\n        zIndex: 1,\n        \"@lg\": {\n          mt: 0,\n          p: \"$6\",\n        },\n      }}\n    >\n      {active && (\n        <Progress type={HMSPlaylistType.video} duration={active.duration} />\n      )}\n      <Flex align=\"center\" justify=\"between\">\n        <VolumeControl />\n        {active && <Controls css={{ flex: \"1 1 0\" }} />}\n        {children}\n      </Flex>\n    </Box>\n  );\n};\n","// @ts-check\nimport React, { useRef, useState } from \"react\";\nimport { StyledVideoTile, Video, VideoTileStats } from \"@100mslive/react-ui\";\nimport {\n  useHMSStore,\n  selectPeerByID,\n  selectScreenShareAudioByPeerID,\n  selectScreenShareByPeerID,\n} from \"@100mslive/react-sdk\";\nimport { ExpandIcon, ShrinkIcon } from \"@100mslive/react-icons\";\nimport { useFullscreen } from \"react-use\";\nimport TileMenu from \"./TileMenu\";\nimport { getVideoTileLabel } from \"./peerTileUtils\";\nimport screenfull from \"screenfull\";\nimport { UI_SETTINGS } from \"../common/constants\";\nimport { useIsHeadless, useUISettings } from \"./AppData/useUISettings\";\n\nconst labelStyles = {\n  position: \"unset\",\n  width: \"100%\",\n  textAlign: \"center\",\n  transform: \"none\",\n  mt: \"$2\",\n  flexShrink: 0,\n};\n\nconst Tile = ({\n  peerId,\n  showStatsOnTiles,\n  width = \"100%\",\n  height = \"100%\",\n}) => {\n  const track = useHMSStore(selectScreenShareByPeerID(peerId));\n  const peer = useHMSStore(selectPeerByID(peerId));\n  const isAudioOnly = useUISettings(UI_SETTINGS.isAudioOnly);\n  const isHeadless = useIsHeadless();\n  const [isMouseHovered, setIsMouseHovered] = useState(false);\n  const label = getVideoTileLabel({\n    peerName: peer.name,\n    isLocal: false,\n    track,\n  });\n  const fullscreenRef = useRef(null);\n  // fullscreen is for desired state\n  const [fullscreen, setFullscreen] = useState(false);\n  // isFullscreen is for true state\n  const isFullscreen = useFullscreen(fullscreenRef, fullscreen, {\n    onClose: () => setFullscreen(false),\n  });\n  const isFullScreenSupported = screenfull.isEnabled;\n  const audioTrack = useHMSStore(selectScreenShareAudioByPeerID(peer?.id));\n  return (\n    <StyledVideoTile.Root\n      css={{ width, height }}\n      data-testid=\"screenshare_tile\"\n    >\n      {peer ? (\n        <StyledVideoTile.Container\n          transparentBg\n          ref={fullscreenRef}\n          css={{ flexDirection: \"column\" }}\n          onMouseEnter={() => setIsMouseHovered(true)}\n          onMouseLeave={() => {\n            setIsMouseHovered(false);\n          }}\n        >\n          {showStatsOnTiles ? (\n            <VideoTileStats\n              audioTrackID={audioTrack?.id}\n              videoTrackID={track?.id}\n            />\n          ) : null}\n          {isFullScreenSupported && !isHeadless ? (\n            <StyledVideoTile.FullScreenButton\n              onClick={() => setFullscreen(!fullscreen)}\n            >\n              {isFullscreen ? <ShrinkIcon /> : <ExpandIcon />}\n            </StyledVideoTile.FullScreenButton>\n          ) : null}\n          {track ? (\n            <Video\n              screenShare={true}\n              mirror={peer.isLocal && track?.source === \"regular\"}\n              attach={!isAudioOnly}\n              trackId={track.id}\n            />\n          ) : null}\n          <StyledVideoTile.Info css={labelStyles}>{label}</StyledVideoTile.Info>\n          {isMouseHovered && !isHeadless && !peer?.isLocal ? (\n            <TileMenu\n              isScreenshare\n              peerID={peer?.id}\n              audioTrackID={audioTrack?.id}\n              videoTrackID={track?.id}\n            />\n          ) : null}\n        </StyledVideoTile.Container>\n      ) : null}\n    </StyledVideoTile.Root>\n  );\n};\n\nconst ScreenshareTile = React.memo(Tile);\n\nexport default ScreenshareTile;\n","// @ts-check\nimport React from \"react\";\nimport {\n  HorizontalMenuIcon,\n  MicOffIcon,\n  VideoOffIcon,\n  VideoOnIcon,\n  MicOnIcon,\n  SpeakerIcon,\n  RemoveUserIcon,\n} from \"@100mslive/react-icons\";\nimport {\n  useHMSStore,\n  selectPermissions,\n  useHMSActions,\n  useRemoteAVToggle,\n} from \"@100mslive/react-sdk\";\nimport { Flex, StyledMenuTile, Slider } from \"@100mslive/react-ui\";\n\n/**\n * Taking peerID as peer won't necesarilly have tracks\n */\nconst TileMenu = ({\n  audioTrackID,\n  videoTrackID,\n  peerID,\n  isScreenshare = false,\n}) => {\n  const actions = useHMSActions();\n  let { removeOthers } = useHMSStore(selectPermissions);\n  removeOthers = removeOthers && !isScreenshare;\n  const {\n    isAudioEnabled,\n    isVideoEnabled,\n    setVolume,\n    toggleAudio,\n    toggleVideo,\n    volume,\n  } = useRemoteAVToggle(audioTrackID, videoTrackID);\n  if (!(removeOthers || toggleAudio || toggleVideo || setVolume)) {\n    return null;\n  }\n  return (\n    <StyledMenuTile.Root>\n      <StyledMenuTile.Trigger data-testid=\"participant_menu_btn\">\n        <HorizontalMenuIcon />\n      </StyledMenuTile.Trigger>\n      <StyledMenuTile.Content side=\"left\" align=\"start\" sideOffset={10}>\n        {toggleVideo ? (\n          <StyledMenuTile.ItemButton\n            onClick={toggleVideo}\n            data-testid={\n              isVideoEnabled\n                ? \"mute_video_participant_btn\"\n                : \"unmute_video_participant_btn\"\n            }\n          >\n            {isVideoEnabled ? <VideoOnIcon /> : <VideoOffIcon />}\n            <span>{`${isVideoEnabled ? \"Mute\" : \"Request Unmute\"}`}</span>\n          </StyledMenuTile.ItemButton>\n        ) : null}\n        {toggleAudio ? (\n          <StyledMenuTile.ItemButton\n            onClick={toggleAudio}\n            data-testid={\n              isVideoEnabled\n                ? \"mute_audio_participant_btn\"\n                : \"unmute_audio_participant_btn\"\n            }\n          >\n            {isAudioEnabled ? <MicOnIcon /> : <MicOffIcon />}\n            <span>{`${isAudioEnabled ? \"Mute\" : \"Request Unmute\"}`}</span>\n          </StyledMenuTile.ItemButton>\n        ) : null}\n        {audioTrackID ? (\n          <StyledMenuTile.VolumeItem data-testid=\"participant_volume_slider\">\n            <Flex align=\"center\" gap={1}>\n              <SpeakerIcon /> <span>Volume ({volume})</span>\n            </Flex>\n            <Slider\n              css={{ my: \"0.5rem\" }}\n              step={5}\n              value={[volume]}\n              onValueChange={e => setVolume(e[0])}\n            />\n          </StyledMenuTile.VolumeItem>\n        ) : null}\n\n        {removeOthers ? (\n          <StyledMenuTile.RemoveItem\n            onClick={async () => {\n              try {\n                await actions.removePeer(peerID, \"\");\n              } catch (error) {\n                // TODO: Toast here\n              }\n            }}\n            data-testid=\"remove_participant_btn\"\n          >\n            <RemoveUserIcon />\n            <span>Remove Participant</span>\n          </StyledMenuTile.RemoveItem>\n        ) : null}\n      </StyledMenuTile.Content>\n    </StyledMenuTile.Root>\n  );\n};\n\nexport default TileMenu;\n","import React from \"react\";\nimport { StyledPagination } from \"@100mslive/react-ui\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@100mslive/react-icons\";\n\nexport const Pagination = ({ page, setPage, numPages }) => {\n  const disableLeft = page === 0;\n  const disableRight = page === numPages - 1;\n  const nextPage = () => {\n    setPage(Math.min(page + 1, numPages - 1));\n  };\n  const prevPage = () => {\n    setPage(Math.max(page - 1, 0));\n  };\n  return (\n    <StyledPagination.Root>\n      <StyledPagination.Chevron disabled={disableLeft} onClick={prevPage}>\n        <ChevronLeftIcon\n          width={16}\n          height={16}\n          style={{ cursor: disableLeft ? \"not-allowed\" : \"pointer\" }}\n        />\n      </StyledPagination.Chevron>\n      <StyledPagination.Dots>\n        {[...Array(numPages)].map((_, i) => (\n          <StyledPagination.Dot\n            key={i}\n            active={page === i}\n            onClick={() => setPage(i)}\n          />\n        ))}\n      </StyledPagination.Dots>\n      <StyledPagination.Chevron disabled={disableRight} onClick={nextPage}>\n        <ChevronRightIcon\n          width={16}\n          height={16}\n          style={{ cursor: disableRight ? \"not-allowed\" : \"pointer\" }}\n        />\n      </StyledPagination.Chevron>\n    </StyledPagination.Root>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Freeze } from \"react-freeze\";\nimport { StyledVideoList, getLeft, useTheme } from \"@100mslive/react-ui\";\nimport { useVideoList } from \"@100mslive/react-sdk\";\nimport VideoTile from \"./VideoTile\";\nimport ScreenshareTile from \"./ScreenshareTile\";\nimport { FeatureFlags } from \"../services/FeatureFlags\";\nimport { Pagination } from \"./Pagination\";\nimport { useAppConfig } from \"./AppData/useAppConfig\";\nimport { useIsHeadless } from \"./AppData/useUISettings\";\n\nconst List = ({\n  maxTileCount,\n  peers,\n  showStatsOnTiles,\n  maxColCount,\n  maxRowCount,\n  includeScreenShareForPeer,\n}) => {\n  const { aspectRatio } = useTheme();\n  const appConfig = useAppConfig();\n  const isHeadless = useIsHeadless();\n  const { ref, pagesWithTiles } = useVideoList({\n    peers,\n    maxTileCount,\n    maxColCount,\n    maxRowCount,\n    includeScreenShareForPeer,\n    aspectRatio,\n    offsetY: getOffset({ isHeadless, appConfig }),\n  });\n  const [page, setPage] = useState(0);\n  useEffect(() => {\n    // currentPageIndex should not exceed pages length\n    if (page >= pagesWithTiles.length) {\n      setPage(0);\n    }\n  }, [pagesWithTiles.length, page]);\n  const useFreeze = FeatureFlags.freezeVideoList();\n  return (\n    <StyledVideoList.Root ref={ref}>\n      <StyledVideoList.Container>\n        {pagesWithTiles && pagesWithTiles.length > 0\n          ? pagesWithTiles.map((tiles, pageNo) => (\n              <Freeze freeze={useFreeze && page !== pageNo} key={pageNo}>\n                <StyledVideoList.View\n                  css={{\n                    left: getLeft(pageNo, page),\n                    transition: \"left 0.3s ease-in-out\",\n                  }}\n                >\n                  {tiles.map((tile, i) =>\n                    tile.track?.source === \"screen\" ? (\n                      <ScreenshareTile\n                        showStatsOnTiles={showStatsOnTiles}\n                        key={tile.track.id}\n                        width={tile.width}\n                        height={tile.height}\n                        peerId={tile.peer.id}\n                      />\n                    ) : (\n                      <VideoTile\n                        showStatsOnTiles={showStatsOnTiles}\n                        key={tile.track?.id || tile.peer.id}\n                        width={tile.width}\n                        height={tile.height}\n                        peerId={tile.peer?.id}\n                        trackId={tile.track?.id}\n                      />\n                    )\n                  )}\n                </StyledVideoList.View>\n              </Freeze>\n            ))\n          : null}\n      </StyledVideoList.Container>\n      {pagesWithTiles.length > 1 ? (\n        <Pagination\n          page={page}\n          setPage={setPage}\n          numPages={pagesWithTiles.length}\n        />\n      ) : null}\n    </StyledVideoList.Root>\n  );\n};\n\nconst VideoList = React.memo(List);\n\nconst getOffset = ({ appConfig, isHeadless }) => {\n  const offset = appConfig?.headlessConfig?.tileOffset;\n  if (!isHeadless || typeof offset !== \"number\") {\n    return 32;\n  }\n  return offset;\n};\n\nexport default VideoList;\n","import React, { Fragment, useCallback, useState } from \"react\";\nimport {\n  Avatar,\n  StyledVideoTile,\n  Video,\n  VideoTileStats,\n  useBorderAudioLevel,\n} from \"@100mslive/react-ui\";\nimport {\n  useHMSStore,\n  selectIsPeerAudioEnabled,\n  selectPeerMetadata,\n  selectLocalPeerID,\n  selectPeerNameByID,\n  selectAudioTrackByPeerID,\n  selectTrackByID,\n  selectVideoTrackByPeerID,\n} from \"@100mslive/react-sdk\";\nimport {\n  MicOffIcon,\n  HandRaiseFilledIcon,\n  BrbIcon,\n} from \"@100mslive/react-icons\";\nimport TileMenu from \"./TileMenu\";\nimport { getVideoTileLabel } from \"./peerTileUtils\";\nimport { ConnectionIndicator } from \"./Connection/ConnectionIndicator\";\nimport { UI_SETTINGS } from \"../common/constants\";\nimport { useIsHeadless, useUISettings } from \"./AppData/useUISettings\";\nimport { useAppConfig } from \"./AppData/useAppConfig\";\n\nconst Tile = ({ peerId, trackId, showStatsOnTiles, width, height }) => {\n  const trackSelector = trackId\n    ? selectTrackByID(trackId)\n    : selectVideoTrackByPeerID(peerId);\n  const track = useHMSStore(trackSelector);\n  const peerName = useHMSStore(selectPeerNameByID(peerId));\n  const audioTrack = useHMSStore(selectAudioTrackByPeerID(peerId));\n  const localPeerID = useHMSStore(selectLocalPeerID);\n  const isAudioOnly = useUISettings(UI_SETTINGS.isAudioOnly);\n  const isHeadless = useIsHeadless();\n  const isAudioMuted = !useHMSStore(selectIsPeerAudioEnabled(peerId));\n  const isVideoMuted = !track?.enabled;\n  const [isMouseHovered, setIsMouseHovered] = useState(false);\n  const borderAudioRef = useBorderAudioLevel(audioTrack?.id);\n  const isVideoDegraded = track?.degraded;\n  const isLocal = localPeerID === peerId;\n  const label = getVideoTileLabel({\n    peerName,\n    track,\n    isLocal,\n  });\n  const onHoverHandler = useCallback(event => {\n    setIsMouseHovered(event.type === \"mouseenter\");\n  }, []);\n  const appConfig = useAppConfig();\n  return (\n    <StyledVideoTile.Root\n      css={{ width, height, padding: getPadding({ isHeadless, appConfig }) }}\n      data-testid={`participant_tile_${peerName}`}\n    >\n      {peerName !== undefined ? (\n        <StyledVideoTile.Container\n          onMouseEnter={onHoverHandler}\n          onMouseLeave={onHoverHandler}\n          ref={\n            isHeadless && appConfig?.headlessConfig?.hideAudioLevel\n              ? undefined\n              : borderAudioRef\n          }\n        >\n          <ConnectionIndicator isTile peerId={peerId} />\n          {showStatsOnTiles ? (\n            <VideoTileStats\n              audioTrackID={audioTrack?.id}\n              videoTrackID={track?.id}\n              peerID={peerId}\n            />\n          ) : null}\n\n          {track ? (\n            <Video\n              trackId={track?.id}\n              attach={isLocal ? undefined : !isAudioOnly}\n              mirror={peerId === localPeerID && track?.source === \"regular\"}\n              degraded={isVideoDegraded}\n              data-testid=\"participant_video_tile\"\n            />\n          ) : null}\n          {isVideoMuted || isVideoDegraded || isAudioOnly ? (\n            <Avatar\n              name={peerName || \"\"}\n              data-testid=\"participant_avatar_icon\"\n            />\n          ) : null}\n          {(!isHeadless ||\n            (isHeadless && !appConfig?.headlessConfig?.hideTileName)) && (\n            <StyledVideoTile.Info data-testid=\"participant_name_onTile\">\n              {label}\n            </StyledVideoTile.Info>\n          )}\n          {showAudioMuted({ appConfig, isHeadless, isAudioMuted }) ? (\n            <StyledVideoTile.AudioIndicator data-testid=\"participant_audio_mute_icon\">\n              <MicOffIcon />\n            </StyledVideoTile.AudioIndicator>\n          ) : null}\n          {isMouseHovered && !isHeadless && !isLocal ? (\n            <TileMenu\n              peerID={peerId}\n              audioTrackID={audioTrack?.id}\n              videoTrackID={track?.id}\n            />\n          ) : null}\n          <PeerMetadata peerId={peerId} />\n        </StyledVideoTile.Container>\n      ) : null}\n    </StyledVideoTile.Root>\n  );\n};\n\nconst metaStyles = { left: \"20px\", bottom: \"20px\" };\n\nconst PeerMetadata = ({ peerId }) => {\n  const metaData = useHMSStore(selectPeerMetadata(peerId));\n  const isHandRaised = metaData?.isHandRaised || false;\n  const isBRB = metaData?.isBRBOn || false;\n\n  return (\n    <Fragment>\n      {isHandRaised ? (\n        <StyledVideoTile.AttributeBox\n          css={metaStyles}\n          data-testid=\"raiseHand_icon_onTile\"\n        >\n          <HandRaiseFilledIcon width={40} height={40} />\n        </StyledVideoTile.AttributeBox>\n      ) : null}\n      {isBRB ? (\n        <StyledVideoTile.AttributeBox\n          css={metaStyles}\n          data-testid=\"brb_icon_onTile\"\n        >\n          <BrbIcon width={40} height={40} />\n        </StyledVideoTile.AttributeBox>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst VideoTile = React.memo(Tile);\n\nconst showAudioMuted = ({ appConfig, isHeadless, isAudioMuted }) => {\n  if (!isHeadless) {\n    return isAudioMuted;\n  }\n  const hide = appConfig?.headlessConfig?.hideTileAudioMute;\n  return isAudioMuted && !hide;\n};\n\nconst getPadding = ({ isHeadless, appConfig }) => {\n  const offset = appConfig?.headlessConfig?.tileOffset;\n  if (!isHeadless || typeof offset !== \"number\") {\n    return undefined;\n  }\n  return offset === 0 ? 0 : undefined;\n};\n\nexport default VideoTile;\n","import React, { useCallback, useEffect, useRef } from \"react\";\nimport { Flex, IconButton, styled } from \"@100mslive/react-ui\";\nimport { useHMSActions } from \"@100mslive/react-sdk\";\nimport { ToastManager } from \"../Toast/ToastManager\";\nimport { SendIcon } from \"@100mslive/react-icons\";\nimport { useChatDraftMessage } from \"../AppData/useChatState\";\n\nconst TextArea = styled(\"textarea\", {\n  width: \"100%\",\n  bg: \"transparent\",\n  color: \"$textPrimary\",\n  resize: \"none\",\n  lineHeight: \"1rem\",\n  \"&:focus\": {\n    boxShadow: \"none\",\n    outline: \"none\",\n  },\n});\n\nexport const ChatFooter = ({ role, peerId, onSend, children }) => {\n  const hmsActions = useHMSActions();\n  const inputRef = useRef(null);\n  const [draftMessage, setDraftMessage] = useChatDraftMessage();\n  const sendMessage = useCallback(async () => {\n    const message = inputRef.current.value;\n    if (!message || !message.trim().length) {\n      return;\n    }\n    try {\n      if (role) {\n        await hmsActions.sendGroupMessage(message, [role]);\n      } else if (peerId) {\n        await hmsActions.sendDirectMessage(message, peerId);\n      } else {\n        await hmsActions.sendBroadcastMessage(message);\n      }\n      inputRef.current.value = \"\";\n      setTimeout(() => {\n        onSend();\n      }, 0);\n    } catch (error) {\n      ToastManager.addToast({ title: error.message });\n    }\n  }, [role, peerId, hmsActions, onSend]);\n\n  useEffect(() => {\n    const messageElement = inputRef.current;\n    if (messageElement) {\n      messageElement.value = draftMessage;\n    }\n  }, [draftMessage]);\n\n  useEffect(() => {\n    const messageElement = inputRef.current;\n    return () => {\n      setDraftMessage(messageElement?.value || \"\");\n    };\n  }, [setDraftMessage]);\n\n  return (\n    <Flex\n      align=\"center\"\n      css={{\n        borderTop: \"1px solid $borderDefault\",\n        bg: \"$menuBg\",\n        minHeight: \"$16\",\n        maxHeight: \"$24\",\n        position: \"relative\",\n        py: \"$4\",\n        pl: \"$8\",\n      }}\n    >\n      {children}\n      <TextArea\n        placeholder=\"Write something here\"\n        ref={inputRef}\n        autoFocus\n        onKeyPress={async event => {\n          if (event.key === \"Enter\") {\n            if (!event.shiftKey) {\n              event.preventDefault();\n              await sendMessage();\n            }\n          }\n        }}\n      />\n      <IconButton\n        onClick={sendMessage}\n        css={{ ml: \"auto\", height: \"max-content\", mr: \"$4\" }}\n        data-testid=\"send_msg_btn\"\n      >\n        <SendIcon />\n      </IconButton>\n    </Flex>\n  );\n};\n","import React from \"react\";\nimport { Flex, IconButton, Text } from \"@100mslive/react-ui\";\nimport {\n  ChevronDownIcon,\n  ChevronUpIcon,\n  CrossIcon,\n  PeopleIcon,\n} from \"@100mslive/react-icons\";\nimport { useToggleChat } from \"../AppData/useChatState\";\n\nexport const ChatHeader = React.memo(\n  ({ selection, selectorOpen, onToggle }) => {\n    const toggleChat = useToggleChat();\n    return (\n      <Flex\n        onClick={onToggle}\n        align=\"center\"\n        css={{\n          bg: \"$menuBg\",\n          color: \"$textPrimary\",\n          h: \"$16\",\n          borderTopLeftRadius: \"$2\",\n          borderTopRightRadius: \"$2\",\n          pl: \"$8\",\n          pr: \"$4\",\n        }}\n      >\n        <Flex align=\"center\" css={{ cursor: \"pointer\" }}>\n          <PeopleIcon />\n          <Text css={{ mx: \"$2\" }}>{selection}</Text>\n          {selectorOpen ? (\n            <ChevronUpIcon width={18} height={18} />\n          ) : (\n            <ChevronDownIcon width={18} height={18} />\n          )}\n        </Flex>\n        <IconButton\n          css={{ ml: \"auto\" }}\n          onClick={e => {\n            e.stopPropagation();\n            selectorOpen ? onToggle() : toggleChat();\n          }}\n          data-testid='close_chat'\n        >\n          <CrossIcon />\n        </IconButton>\n      </Flex>\n    );\n  }\n);\n","import React, { Fragment, useEffect } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\nimport {\n  selectHMSMessages,\n  selectLocalPeerID,\n  selectMessagesByPeerID,\n  selectMessagesByRole,\n  selectPeerNameByID,\n  useHMSActions,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { Flex, styled, Text } from \"@100mslive/react-ui\";\n\nconst formatTime = date => {\n  if (!(date instanceof Date)) {\n    return \"\";\n  }\n  let hours = date.getHours();\n  let mins = date.getMinutes();\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n  if (mins < 10) {\n    mins = \"0\" + mins;\n  }\n  return `${hours}:${mins}`;\n};\n\nconst MessageType = ({ roles, hasCurrentUserSent, receiver }) => {\n  const peerName = useHMSStore(selectPeerNameByID(receiver));\n  if (receiver) {\n    return (\n      <Text variant=\"sm\" css={{ mx: \"$4\" }}>\n        {hasCurrentUserSent ? `to ${peerName}` : \"to me\"}\n        <Text as=\"span\" variant=\"sm\" css={{ color: \"$error\", mx: \"$4\" }}>\n          (Privately)\n        </Text>\n      </Text>\n    );\n  }\n\n  if (roles && roles.length) {\n    return (\n      <Text variant=\"sm\" css={{ mx: \"$4\" }}>\n        to\n        <Text as=\"span\" variant=\"sm\" css={{ color: \"$error\", mx: \"$4\" }}>\n          ({roles.join(\",\")})\n        </Text>\n      </Text>\n    );\n  }\n  return (\n    <Text variant=\"sm\" css={{ mx: \"$4\" }}>\n      to\n      <Text as=\"span\" variant=\"sm\" css={{ color: \"$brandDefault\", mx: \"$4\" }}>\n        Everyone\n      </Text>\n    </Text>\n  );\n};\n\nconst URL_REGEX =\n  /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nconst Link = styled(\"a\", {\n  color: \"$brandDefault\",\n  wordBreak: \"break-all\",\n  \"&:hover\": {\n    textDecoration: \"underline\",\n  },\n});\n\nconst AnnotisedChat = ({ message }) => {\n  if (!message) {\n    return <Fragment />;\n  }\n\n  return (\n    <Fragment>\n      {message\n        .trim()\n        .split(\" \")\n        .map(part =>\n          URL_REGEX.test(part) ? (\n            <Link\n              href={part}\n              key={part}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {part}{\" \"}\n            </Link>\n          ) : (\n            `${part} `\n          )\n        )}\n    </Fragment>\n  );\n};\n\nconst ChatMessage = React.memo(({ message }) => {\n  const { ref, inView } = useInView({ threshold: 0.5, triggerOnce: true });\n  const hmsActions = useHMSActions();\n  const localPeerId = useHMSStore(selectLocalPeerID);\n\n  useEffect(() => {\n    if (message.id && !message.read && inView) {\n      hmsActions.setMessageRead(true, message.id);\n    }\n  }, [message.read, hmsActions, inView, message.id]);\n\n  return (\n    <Flex ref={ref} css={{ flexWrap: \"wrap\", p: \"$4 $8\" }} key={message.time} data-testid='chat_msg'>\n      <Text variant=\"sm\" css={{ color: \"$textSecondary\" }}>\n        {message.senderName || \"Anonymous\"}\n      </Text>\n      <MessageType\n        hasCurrentUserSent={message.sender === localPeerId}\n        receiver={message.recipientPeer}\n        roles={message.recipientRoles}\n      />\n      <Text variant=\"sm\" css={{ ml: \"auto\", color: \"$textSecondary\" }}>\n        {formatTime(message.time)}\n      </Text>\n      <Text css={{ w: \"100%\", my: \"$2\", wordBreak: \"break-word\" }}>\n        <AnnotisedChat message={message.message} />\n      </Text>\n    </Flex>\n  );\n});\n\nexport const ChatBody = ({ role, peerId }) => {\n  const storeMessageSelector = role\n    ? selectMessagesByRole(role)\n    : peerId\n    ? selectMessagesByPeerID(peerId)\n    : selectHMSMessages;\n  const messages = useHMSStore(storeMessageSelector) || [];\n\n  if (messages.length === 0) {\n    return (\n      <Flex\n        css={{\n          width: \"100%\",\n          height: \"calc(100% - 1px)\",\n          textAlign: \"center\",\n          px: \"$4\",\n        }}\n        align=\"center\"\n        justify=\"center\"\n      >\n        <Text>There are no messages here</Text>\n      </Flex>\n    );\n  }\n\n  return (\n    <Fragment>\n      {messages.map(message => {\n        return <ChatMessage key={message.id} message={message} />;\n      })}\n    </Fragment>\n  );\n};\n","import React from \"react\";\nimport { Box } from \"@100mslive/react-ui\";\n\nexport const ChatDotIcon = () => {\n  return (\n    <Box css={{ size: \"$6\", bg: \"$brandDefault\", mx: \"$2\", r: \"$round\" }} />\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  selectAvailableRoleNames,\n  selectRemotePeers,\n  useHMSStore,\n  selectUnreadHMSMessagesCount,\n  selectMessagesUnreadCountByRole,\n  selectMessagesUnreadCountByPeerID,\n} from \"@100mslive/react-sdk\";\nimport {\n  Box,\n  Flex,\n  HorizontalDivider,\n  IconButton,\n  Input,\n  Text,\n  Tooltip,\n} from \"@100mslive/react-ui\";\nimport { CheckIcon, CrossIcon } from \"@100mslive/react-icons\";\nimport { ChatDotIcon } from \"./ChatDotIcon\";\n\nconst SelectorItem = ({ value, active, onClick, unreadCount }) => {\n  return (\n    <Flex\n      onClick={onClick}\n      css={{\n        cursor: \"pointer\",\n        p: \"$4 $8\",\n        flexShrink: 0,\n        \"&:hover\": { bg: \"$menuBg\" },\n      }}\n      align=\"center\"\n      data-testid='chat_members'\n    >\n      <Text variant=\"sm\">{value}</Text>\n      <Flex align=\"center\" css={{ ml: \"auto\", color: \"$textPrimary\" }}>\n        {unreadCount > 0 && (\n          <Tooltip title={`${unreadCount} unread`}>\n            <Box css={{ mr: active ? \"$3\" : 0 }}>\n              <ChatDotIcon />\n            </Box>\n          </Tooltip>\n        )}\n        {active && <CheckIcon width={16} height={16} />}\n      </Flex>\n    </Flex>\n  );\n};\n\nconst SelectorHeader = React.memo(({ children }) => {\n  return (\n    <Box css={{ flexShrink: 0 }}>\n      <HorizontalDivider space={4} />\n      <Text variant=\"md\" css={{ p: \"$4 $8\", fontWeight: \"$semiBold\" }}>\n        {children}\n      </Text>\n    </Box>\n  );\n});\n\nconst Everyone = React.memo(({ onSelect, active }) => {\n  const unreadCount = useHMSStore(selectUnreadHMSMessagesCount);\n  return (\n    <SelectorItem\n      value=\"Everyone\"\n      active={active}\n      unreadCount={unreadCount}\n      onClick={() => {\n        onSelect({ role: \"\", peerId: \"\", selection: \"Everyone\" });\n      }}\n    />\n  );\n});\n\nconst RoleItem = React.memo(({ onSelect, role, active }) => {\n  const unreadCount = useHMSStore(selectMessagesUnreadCountByRole(role));\n  return (\n    <SelectorItem\n      value={role}\n      active={active}\n      unreadCount={unreadCount}\n      onClick={() => {\n        onSelect({ role: role, selection: role });\n      }}\n    />\n  );\n});\n\nconst PeerItem = ({ onSelect, peerId, name, active }) => {\n  const unreadCount = useHMSStore(selectMessagesUnreadCountByPeerID(peerId));\n  return (\n    <SelectorItem\n      value={name}\n      active={active}\n      unreadCount={unreadCount}\n      onClick={() => {\n        onSelect({ role: \"\", peerId, selection: name });\n      }}\n    />\n  );\n};\n\nexport const ChatSelector = ({ role, peerId, onSelect }) => {\n  const roles = useHMSStore(selectAvailableRoleNames);\n  const peers = useHMSStore(selectRemotePeers);\n  const [search, setSearch] = useState(\"\");\n  return (\n    <Flex\n      direction=\"column\"\n      css={{\n        size: \"100%\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        bg: \"$bgSecondary\",\n        py: \"$4\",\n        overflowY: \"auto\",\n      }}\n    >\n      <Box css={{ p: \"$4\", flexShrink: 0, position: \"relative\" }}>\n        <Input\n          type=\"text\"\n          autoCorrect=\"off\"\n          autoComplete=\"name\"\n          value={search}\n          placeholder=\"Search Participants\"\n          css={{\n            bg: \"$menuBg\",\n            w: \"100%\",\n            pr: \"$12\",\n            \"$:focus\": { boxShadow: \"none\", outline: \"none\" },\n          }}\n          onChange={e => {\n            setSearch(e.target.value);\n          }}\n        />\n        <Flex\n          align=\"center\"\n          css={{\n            position: \"absolute\",\n            right: 0,\n            top: 0,\n            mr: \"$6\",\n            height: \"100%\",\n          }}\n        >\n          <IconButton onClick={() => setSearch(\"\")}>\n            <CrossIcon width={18} height={18} />\n          </IconButton>\n        </Flex>\n      </Box>\n      <Everyone onSelect={onSelect} active={!role && !peerId} />\n      {roles.length > 0 && <SelectorHeader>Roles</SelectorHeader>}\n      {roles.map(userRole => {\n        return (\n          <RoleItem\n            key={userRole}\n            active={role === userRole}\n            role={userRole}\n            onSelect={onSelect}\n          />\n        );\n      })}\n      {peers.length > 0 && <SelectorHeader>Participants</SelectorHeader>}\n      {peers\n        .filter(peer => !search || peer.name.toLowerCase().includes(search))\n        .map(peer => {\n          return (\n            <PeerItem\n              key={peer.id}\n              name={peer.name}\n              peerId={peer.id}\n              active={peer.id === peerId}\n              onSelect={onSelect}\n            />\n          );\n        })}\n    </Flex>\n  );\n};\n","import {\n  selectMessagesUnreadCountByPeerID,\n  selectMessagesUnreadCountByRole,\n  selectUnreadHMSMessagesCount,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\n\nexport const useUnreadCount = ({ role, peerId }) => {\n  const unreadCountSelector = role\n    ? selectMessagesUnreadCountByRole(role)\n    : peerId\n    ? selectMessagesUnreadCountByPeerID(peerId)\n    : selectUnreadHMSMessagesCount;\n\n  const unreadCount = useHMSStore(unreadCountSelector);\n  return unreadCount;\n};\n","import React, {\n  Fragment,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useInView } from \"react-intersection-observer\";\nimport { ChevronDownIcon } from \"@100mslive/react-icons\";\nimport { useHMSActions } from \"@100mslive/react-sdk\";\nimport { Box, Button, Flex } from \"@100mslive/react-ui\";\nimport { ChatFooter } from \"./ChatFooter\";\nimport { ChatHeader } from \"./ChatHeader\";\nimport { ChatBody } from \"./ChatBody\";\nimport { ChatSelector } from \"./ChatSelector\";\nimport { useUnreadCount } from \"./useUnreadCount\";\n\nexport const Chat = () => {\n  const [chatOptions, setChatOptions] = useState({\n    role: \"\",\n    peerId: \"\",\n    selection: \"Everyone\",\n  });\n  const [isSelectorOpen, setSelectorOpen] = useState(false);\n  const bodyRef = useRef(null);\n  const hmsActions = useHMSActions();\n  const scrollToBottom = useCallback(\n    (instant = false) => {\n      if (!bodyRef.current) {\n        return;\n      }\n      bodyRef.current.scrollTo({\n        top: bodyRef.current.scrollHeight,\n        behavior: instant ? \"instant\" : \"smooth\",\n      });\n      hmsActions.setMessageRead(true);\n    },\n    [hmsActions]\n  );\n\n  useEffect(() => {\n    scrollToBottom(true);\n  }, [scrollToBottom]);\n\n  return (\n    <Flex direction=\"column\" css={{ size: \"100%\" }}>\n      <ChatHeader\n        selectorOpen={isSelectorOpen}\n        selection={chatOptions.selection}\n        onToggle={() => {\n          setSelectorOpen(value => !value);\n        }}\n      />\n      <Box\n        css={{\n          flex: \"1 1 0\",\n          overflowY: isSelectorOpen ? \"hidden\" : \"auto\",\n          bg: \"$bgSecondary\",\n          pt: \"$4\",\n          position: \"relative\",\n        }}\n        ref={bodyRef}\n      >\n        {isSelectorOpen ? (\n          <ChatSelector\n            role={chatOptions.role}\n            peerId={chatOptions.peerId}\n            onSelect={data => {\n              setChatOptions(state => ({\n                ...state,\n                ...data,\n              }));\n              setSelectorOpen(false);\n            }}\n          />\n        ) : (\n          <Fragment>\n            <ChatBody role={chatOptions.role} peerId={chatOptions.peerId} />\n            <ScrollHandler\n              scrollToBottom={scrollToBottom}\n              role={chatOptions.role}\n              peerId={chatOptions.peerId}\n            />\n          </Fragment>\n        )}\n      </Box>\n\n      <ChatFooter\n        role={chatOptions.role}\n        peerId={chatOptions.peerId}\n        onSend={scrollToBottom}\n      >\n        {!isSelectorOpen && (\n          <NewMessageIndicator\n            role={chatOptions.role}\n            peerId={chatOptions.peerId}\n            scrollToBottom={scrollToBottom}\n          />\n        )}\n      </ChatFooter>\n    </Flex>\n  );\n};\n\nconst NewMessageIndicator = ({ role, peerId, scrollToBottom }) => {\n  const unreadCount = useUnreadCount({ role, peerId });\n  if (!unreadCount) {\n    return null;\n  }\n  return (\n    <Flex\n      justify=\"center\"\n      css={{\n        width: \"100%\",\n        left: 0,\n        bottom: \"100%\",\n        position: \"absolute\",\n      }}\n    >\n      <Button\n        onClick={() => {\n          scrollToBottom();\n        }}\n        css={{ p: \"$2 $4\", \"& > svg\": { ml: \"$4\" } }}\n      >\n        New Messages\n        <ChevronDownIcon width={16} height={16} />\n      </Button>\n    </Flex>\n  );\n};\n\nconst ScrollHandler = ({ scrollToBottom, role, peerId }) => {\n  const { ref, inView } = useInView({ threshold: 0.5 });\n  const unreadCount = useUnreadCount({ role, peerId });\n  useEffect(() => {\n    if (inView && unreadCount) {\n      scrollToBottom();\n    }\n  }, [inView, unreadCount, scrollToBottom]);\n  return <div ref={ref} style={{ height: 1 }}></div>;\n};\n","import React from \"react\";\nimport { Chat } from \"./Chat/Chat\";\n\nexport const ChatView = () => {\n  return <Chat />;\n};\n","import { Fragment, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  selectPermissions,\n  useHMSActions,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { HangUpIcon } from \"@100mslive/react-icons\";\nimport {\n  Button,\n  Popover,\n  Dialog,\n  Tooltip,\n  Box,\n  IconButton,\n  styled,\n} from \"@100mslive/react-ui\";\nimport {\n  DialogCheckbox,\n  DialogContent,\n  DialogRow,\n} from \"../primitives/DialogContent\";\n\nexport const LeaveRoom = () => {\n  const navigate = useNavigate();\n  const params = useParams();\n  const [showEndRoomModal, setShowEndRoomModal] = useState(false);\n  const [lockRoom, setLockRoom] = useState(false);\n  const permissions = useHMSStore(selectPermissions);\n  const hmsActions = useHMSActions();\n\n  const redirectToLeavePage = () => {\n    if (params.role) {\n      navigate(\"/leave/\" + params.roomId + \"/\" + params.role);\n    } else {\n      navigate(\"/leave/\" + params.roomId);\n    }\n  };\n\n  const leaveRoom = () => {\n    hmsActions.leave();\n    redirectToLeavePage();\n  };\n\n  const endRoom = () => {\n    hmsActions.endRoom(lockRoom, \"End Room\");\n    redirectToLeavePage();\n  };\n\n  return (\n    <Fragment>\n      {permissions.endRoom ? (\n        <Popover.Root>\n          <Popover.Trigger asChild>\n            <LeaveIconButton\n              variant=\"danger\"\n              key=\"LeaveRoom\"\n              data-testid=\"leave_room_btn\"\n            >\n              <Tooltip title=\"Leave Room\">\n                <Box>\n                  <HangUpIcon key=\"hangUp\" />\n                </Box>\n              </Tooltip>\n            </LeaveIconButton>\n          </Popover.Trigger>\n          <Popover.Content sideOffset={10}>\n            <Button\n              variant=\"standard\"\n              css={{ w: \"100%\" }}\n              onClick={() => {\n                setShowEndRoomModal(true);\n              }}\n              data-testid=\"end_room_btn\"\n            >\n              End Room\n            </Button>\n            <Button\n              variant=\"danger\"\n              css={{ mt: \"$4\" }}\n              onClick={leaveRoom}\n              data-testid=\"just_leave_btn\"\n            >\n              Just Leave\n            </Button>\n          </Popover.Content>\n        </Popover.Root>\n      ) : (\n        <LeaveIconButton onClick={leaveRoom} variant=\"danger\" key=\"LeaveRoom\">\n          <Tooltip title=\"Leave Room\">\n            <Box>\n              <HangUpIcon key=\"hangUp\" />\n            </Box>\n          </Tooltip>\n        </LeaveIconButton>\n      )}\n\n      <Dialog.Root\n        open={showEndRoomModal}\n        onOpenChange={value => {\n          if (!value) {\n            setLockRoom(false);\n          }\n          setShowEndRoomModal(value);\n        }}\n      >\n        <DialogContent title=\"End Room\" Icon={HangUpIcon}>\n          <DialogCheckbox\n            id=\"lockRoom\"\n            title=\"Disable future joins\"\n            value={lockRoom}\n            onChange={setLockRoom}\n          />\n          <DialogRow justify=\"end\">\n            <Button\n              variant=\"danger\"\n              onClick={endRoom}\n              data-testid=\"lock_end_room\"\n            >\n              End Room\n            </Button>\n          </DialogRow>\n        </DialogContent>\n      </Dialog.Root>\n    </Fragment>\n  );\n};\n\nconst LeaveIconButton = styled(IconButton, {\n  color: \"$white\",\n  width: \"$15\",\n  mx: \"$4\",\n  bg: \"$error\",\n  \"&:not([disabled]):hover\": {\n    bg: \"$errorTint\",\n  },\n  \"&:not([disabled]):active\": {\n    bg: \"$errorTint\",\n  },\n});\n","import React, { useContext, useMemo } from \"react\";\nimport { useMedia } from \"react-use\";\nimport {\n  selectAvailableRoleNames,\n  selectLocalPeerID,\n  selectLocalPeerRoleName,\n  selectPermissions,\n  useHMSActions,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { ArrowRightIcon, CheckIcon, PersonIcon } from \"@100mslive/react-icons\";\nimport { Dropdown, Text, config } from \"@100mslive/react-ui\";\nimport { arrayIntersection } from \"../../common/utils\";\nimport { AppContext } from \"../context/AppContext\";\nimport { ToastManager } from \"../Toast/ToastManager\";\n\nexport const ChangeSelfRole = ({ css, onClick }) => {\n  const roles = useHMSStore(selectAvailableRoleNames);\n  const permissions = useHMSStore(selectPermissions);\n  const localPeerId = useHMSStore(selectLocalPeerID);\n  const localPeerRole = useHMSStore(selectLocalPeerRoleName);\n  const hmsActions = useHMSActions();\n  const hideTriggerItem = useMedia(config.media.sm);\n  const {\n    appPolicyConfig: { selfRoleChangeTo },\n  } = useContext(AppContext);\n\n  const availableSelfChangeRoles = useMemo(\n    () => arrayIntersection(selfRoleChangeTo, roles),\n    [roles, selfRoleChangeTo]\n  );\n\n  if (!permissions.changeRole) {\n    return null;\n  }\n  return hideTriggerItem ? (\n    <Dropdown.Item css={css} onClick={onClick}>\n      <PersonIcon />\n      <Text variant=\"sm\" css={{ mx: \"$4\" }}>\n        Change My Role\n      </Text>\n    </Dropdown.Item>\n  ) : (\n    <Dropdown.Root>\n      <Dropdown.TriggerItem css={css} data-testid=\"change_my_role_btn\">\n        <PersonIcon />\n        <Text variant=\"sm\" css={{ flex: \"1 1 0\", mx: \"$4\" }}>\n          Change My Role\n        </Text>\n        <ArrowRightIcon />\n      </Dropdown.TriggerItem>\n      <Dropdown.Content\n        sideOffset={2}\n        alignOffset={-5}\n        css={{ maxHeight: \"$64\" }}\n      >\n        {availableSelfChangeRoles.map((role, i) => (\n          <Dropdown.Item\n            key={role}\n            css={{ ...css, justifyContent: \"space-between\" }}\n            onClick={async () => {\n              try {\n                await hmsActions.changeRole(localPeerId, role, true);\n              } catch (error) {\n                ToastManager.addToast({ title: error.message });\n              }\n            }}\n            data-testid={\"change_to_role_\" + role}\n          >\n            <Text variant=\"sm\">{role}</Text>\n            {localPeerRole === role && <CheckIcon width={16} height={16} />}\n          </Dropdown.Item>\n        ))}\n      </Dropdown.Content>\n    </Dropdown.Root>\n  );\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport screenfull from \"screenfull\";\nimport { ToastManager } from \"../Toast/ToastManager\";\n\nexport const useFullscreen = () => {\n  const [isFullScreenEnabled, setIsFullScreenEnabled] = useState(\n    screenfull.isFullscreen\n  );\n\n  const toggle = useCallback(async () => {\n    if (!screenfull.isEnabled) {\n      ToastManager.addToast({ title: \"Fullscreen feature not supported\" });\n      return;\n    }\n    try {\n      if (isFullScreenEnabled) {\n        await screenfull.exit();\n      } else {\n        await screenfull.request();\n      }\n    } catch (err) {\n      ToastManager.addToast({ title: err.message });\n    }\n  }, [isFullScreenEnabled]);\n\n  useEffect(() => {\n    const onChange = () => {\n      setIsFullScreenEnabled(screenfull.isFullscreen);\n    };\n    if (screenfull.isEnabled) {\n      screenfull.on(\"change\", onChange);\n    }\n    return () => {\n      if (screenfull.isEnabled) {\n        screenfull.off(\"change\", onChange);\n      }\n    };\n  }, []);\n\n  return {\n    allowed: screenfull.isEnabled,\n    isFullscreen: isFullScreenEnabled,\n    toggleFullscreen: toggle,\n  };\n};\n","import React from \"react\";\nimport { ComputerIcon } from \"@100mslive/react-icons\";\nimport { Dropdown, Text } from \"@100mslive/react-ui\";\nimport { useFullscreen } from \"../hooks/useFullscreen\";\n\nexport const FullScreenItem = ({ hoverStyles }) => {\n  const { allowed, isFullscreen, toggleFullscreen } = useFullscreen();\n\n  if (!allowed) {\n    return null;\n  }\n\n  return (\n    <Dropdown.Item\n      onClick={() => {\n        toggleFullscreen();\n      }}\n      css={hoverStyles}\n      data-testid=\"full_screen_btn\"\n    >\n      <ComputerIcon />\n      <Text variant=\"sm\" css={{ ml: \"$4\" }}>\n        {isFullscreen ? \"Exit \" : \"\"}Full Screen\n      </Text>\n    </Dropdown.Item>\n  );\n};\n","import React, { useCallback, useContext } from \"react\";\nimport { CheckIcon, GridIcon } from \"@100mslive/react-icons\";\nimport {\n  Flex,\n  Checkbox,\n  Dialog,\n  Label,\n  Slider,\n  Text,\n  Box,\n  HorizontalDivider,\n} from \"@100mslive/react-ui\";\nimport {\n  DialogCheckbox,\n  DialogContent,\n  DialogRow,\n} from \"../../primitives/DialogContent\";\nimport { AppContext } from \"../context/AppContext\";\nimport {\n  UI_MODE_ACTIVE_SPEAKER,\n  UI_MODE_GRID,\n  UI_SETTINGS,\n} from \"../../common/constants\";\nimport {\n  selectIsLocalScreenShared,\n  selectIsLocalVideoEnabled,\n  useHMSActions,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { useSetUiSettings } from \"../AppData/useUISettings\";\n\nconst cssStyle = {\n  flexDirection: \"column\",\n  alignItems: \"flex-start\",\n};\n\nconst NotificationItem = ({ onClick, type, label, checked }) => {\n  return (\n    <Flex align=\"center\" key={type} css={{ my: \"$2\" }}>\n      <Checkbox.Root\n        id={label}\n        checked={checked}\n        onCheckedChange={value => {\n          onClick({\n            type,\n            isSubscribed: value,\n          });\n        }}\n      >\n        <Checkbox.Indicator>\n          <CheckIcon width={16} height={16} />\n        </Checkbox.Indicator>\n      </Checkbox.Root>\n      <Label\n        htmlFor={label}\n        css={{ ml: \"$4\", fontSize: \"$sm\", cursor: \"pointer\" }}\n      >\n        {label}\n      </Label>\n    </Flex>\n  );\n};\n\nexport const UISettings = ({ open, onOpenChange }) => {\n  const {\n    setMaxTileCount,\n    maxTileCount,\n    subscribedNotifications,\n    setSubscribedNotifications,\n    uiViewMode,\n    setuiViewMode,\n  } = useContext(AppContext);\n\n  const hmsActions = useHMSActions();\n  const isLocalVideoEnabled = useHMSStore(selectIsLocalVideoEnabled);\n  const isLocalScreenShared = useHMSStore(selectIsLocalScreenShared);\n  const [isAudioOnly, setIsAudioOnly] = useSetUiSettings(\n    UI_SETTINGS.isAudioOnly\n  );\n  const toggleIsAudioOnly = useCallback(\n    async isAudioOnlyModeOn => {\n      if (isAudioOnlyModeOn) {\n        // turn off video and screen share if user switches to audio only mode\n        isLocalVideoEnabled && (await hmsActions.setLocalVideoEnabled(false));\n        isLocalScreenShared && (await hmsActions.setScreenShareEnabled(false));\n      }\n      setIsAudioOnly(isAudioOnlyModeOn);\n    },\n    [hmsActions, isLocalVideoEnabled, isLocalScreenShared, setIsAudioOnly]\n  );\n\n  return (\n    <Dialog.Root open={open} onOpenChange={onOpenChange}>\n      <DialogContent title=\"UI Settings\" Icon={GridIcon}>\n        <DialogRow css={cssStyle}>\n          <Text variant=\"md\" css={{ mb: \"$8\", fontWeight: \"$semiBold\" }}>\n            Configure Notifications\n          </Text>\n          <Flex justify=\"between\" css={{ w: \"100%\" }}>\n            <Box css={{ flex: \"1 1 0\" }}>\n              <NotificationItem\n                label=\"Peer Joined\"\n                type=\"PEER_JOINED\"\n                onClick={setSubscribedNotifications}\n                checked={subscribedNotifications.PEER_JOINED}\n              />\n              <NotificationItem\n                label=\"Peer Leave\"\n                type=\"PEER_LEFT\"\n                onClick={setSubscribedNotifications}\n                checked={subscribedNotifications.PEER_LEFT}\n              />\n              <NotificationItem\n                label=\"New Message\"\n                type=\"NEW_MESSAGE\"\n                onClick={setSubscribedNotifications}\n                checked={subscribedNotifications.NEW_MESSAGE}\n              />\n            </Box>\n            <Box css={{ flex: \"1 1 0\", ml: \"$4\" }}>\n              <NotificationItem\n                label=\"Error\"\n                type=\"ERROR\"\n                onClick={setSubscribedNotifications}\n                checked={subscribedNotifications.ERROR}\n              />\n              <NotificationItem\n                label=\"Hand Raised\"\n                type=\"METADATA_UPDATED\"\n                onClick={setSubscribedNotifications}\n                checked={subscribedNotifications.METADATA_UPDATED}\n              />\n            </Box>\n          </Flex>\n        </DialogRow>\n        <HorizontalDivider />\n        <DialogRow css={cssStyle}>\n          <Text variant=\"md\" css={{ mb: \"$4\", fontWeight: \"$semiBold\" }}>\n            View Layout\n          </Text>\n          <DialogCheckbox\n            title=\"Active Speaker Mode\"\n            id=\"activeSpeakerMode\"\n            value={uiViewMode === UI_MODE_ACTIVE_SPEAKER}\n            onChange={value => {\n              setuiViewMode(value ? UI_MODE_ACTIVE_SPEAKER : UI_MODE_GRID);\n            }}\n            css={{ margin: \"0 0\" }}\n          />\n          <DialogCheckbox\n            title=\"Audio Only Mode\"\n            id=\"audioOnlyMode\"\n            value={isAudioOnly}\n            onChange={toggleIsAudioOnly}\n            css={{ margin: \"$4 0\" }}\n          />\n          <Flex css={{ w: \"100%\", \"@md\": { display: \"none\" } }}>\n            <Text variant=\"md\">Tiles In View</Text>\n            <Flex justify=\"end\" css={{ flex: \"1 1 0\" }}>\n              <Slider\n                step={1}\n                value={[maxTileCount]}\n                min={1}\n                max={49}\n                onValueChange={e => {\n                  setMaxTileCount(e[0]);\n                }}\n                css={{ w: \"70%\" }}\n              />\n            </Flex>\n          </Flex>\n        </DialogRow>\n      </DialogContent>\n    </Dialog.Root>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  useHMSActions,\n  useHMSStore,\n  selectLocalPeerName,\n} from \"@100mslive/react-sdk\";\nimport { Dialog, Button } from \"@100mslive/react-ui\";\nimport {\n  DialogContent,\n  DialogInput,\n  DialogRow,\n} from \"../../primitives/DialogContent\";\nimport {\n  useUserPreferences,\n  UserPreferencesKeys,\n} from \"../hooks/useUserPreferences\";\nimport { TextboxIcon } from \"@100mslive/react-icons\";\nimport { ToastManager } from \"../Toast/ToastManager\";\n\nexport const ChangeNameModal = ({ onOpenChange }) => {\n  const [previewPreference, setPreviewPreference] = useUserPreferences(\n    UserPreferencesKeys.PREVIEW\n  );\n  const hmsActions = useHMSActions();\n  const localPeerName = useHMSStore(selectLocalPeerName);\n  const [currentName, setCurrentName] = useState(localPeerName);\n\n  const changeName = async () => {\n    const name = currentName.trim();\n    if (!name || name === localPeerName) {\n      return;\n    }\n    try {\n      await hmsActions.changeName(name);\n      setPreviewPreference({\n        ...(previewPreference || {}),\n        name,\n      });\n    } catch (error) {\n      console.error(\"failed to update name\", error);\n      ToastManager.addToast({ title: error.message });\n    } finally {\n      onOpenChange(false);\n    }\n  };\n\n  return (\n    <Dialog.Root defaultOpen onOpenChange={onOpenChange}>\n      <DialogContent title=\"Change my name\" Icon={TextboxIcon}>\n        <form\n          onSubmit={e => {\n            e.preventDefault();\n          }}\n        >\n          <DialogInput\n            title=\"Name\"\n            value={currentName}\n            onChange={setCurrentName}\n            autoComplete=\"name\"\n            required\n            data-testid=\"change_name_field\"\n          />\n          <DialogRow justify=\"end\">\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              disabled={\n                !currentName.trim() || currentName.trim() === localPeerName\n              }\n              onClick={async () => {\n                await changeName();\n              }}\n              data-testid=\"popup_change_btn\"\n            >\n              Change\n            </Button>\n          </DialogRow>\n        </form>\n      </DialogContent>\n    </Dialog.Root>\n  );\n};\n","import React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  selectHMSStats,\n  selectPeersMap,\n  selectTracksMap,\n  useHMSStatsStore,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { InfoIcon } from \"@100mslive/react-icons\";\nimport { Dialog, Text } from \"@100mslive/react-ui\";\nimport { AppContext } from \"./context/AppContext\";\nimport {\n  DialogContent,\n  DialogRow,\n  DialogSelect,\n  DialogSwitch,\n} from \"../primitives/DialogContent\";\n\nexport const StatsForNerds = ({ onOpenChange }) => {\n  const tracksWithLabels = useTracksWithLabel();\n  const statsOptions = useMemo(\n    () => [\n      { id: \"local-peer\", label: \"Local Peer Stats\" },\n      ...tracksWithLabels,\n    ],\n    [tracksWithLabels]\n  );\n  const [selectedStat, setSelectedStat] = useState(\"local-peer\");\n  const { showStatsOnTiles, setShowStatsOnTiles } = useContext(AppContext);\n\n  useEffect(() => {\n    if (\n      selectedStat !== \"local-peer\" &&\n      !tracksWithLabels.find(track => track.id === selectedStat)\n    ) {\n      setSelectedStat(\"local-peer\");\n    }\n  }, [tracksWithLabels, selectedStat]);\n\n  return (\n    <Dialog.Root defaultOpen onOpenChange={onOpenChange}>\n      <DialogContent Icon={InfoIcon} title=\"Stats For Nerds\">\n        <DialogSwitch\n          title=\"Show Stats on Tiles\"\n          onChange={setShowStatsOnTiles}\n          value={showStatsOnTiles}\n        />\n        <DialogSelect\n          title=\"Stats For\"\n          options={statsOptions}\n          keyField=\"id\"\n          labelField=\"label\"\n          selected={selectedStat}\n          onChange={setSelectedStat}\n        />\n        {selectedStat === \"local-peer\" ? (\n          <LocalPeerStats />\n        ) : (\n          <TrackStats trackID={selectedStat} />\n        )}\n      </DialogContent>\n    </Dialog.Root>\n  );\n};\n\nconst useTracksWithLabel = () => {\n  const tracksMap = useHMSStore(selectTracksMap);\n  const peersMap = useHMSStore(selectPeersMap);\n  const tracksWithLabels = useMemo(\n    () =>\n      Object.values(tracksMap).map(track => {\n        const peerName = peersMap[track.peerId]?.name;\n        return {\n          id: track.id,\n          label: `${peerName} ${track.source} ${track.type}`,\n        };\n      }),\n    [tracksMap, peersMap]\n  );\n  return tracksWithLabels;\n};\n\nconst LocalPeerStats = () => {\n  const stats = useHMSStatsStore(selectHMSStats.localPeerStats);\n\n  if (!stats) {\n    return null;\n  }\n\n  return (\n    <>\n      <StatsRow label=\"Packets Lost\" value={stats.subscribe?.packetsLost} />\n      <StatsRow label=\"Jitter\" value={stats.subscribe?.jitter} />\n      <StatsRow\n        label=\"Publish Bitrate\"\n        value={formatBytes(stats.publish?.bitrate, \"b/s\")}\n      />\n      <StatsRow\n        label=\"Subscribe Bitrate\"\n        value={formatBytes(stats.subscribe?.bitrate, \"b/s\")}\n      />\n      <StatsRow\n        label=\"Total Bytes Sent\"\n        value={formatBytes(stats.publish?.bytesSent)}\n      />\n      <StatsRow\n        label=\"Total Bytes Received\"\n        value={formatBytes(stats.subscribe?.bytesReceived)}\n      />\n    </>\n  );\n};\n\nconst TrackStats = ({ trackID }) => {\n  const stats = useHMSStatsStore(selectHMSStats.trackStatsByID(trackID));\n  if (!stats) {\n    return null;\n  }\n  const inbound = stats.type.includes(\"inbound\");\n\n  return (\n    <>\n      <StatsRow label=\"Type\" value={stats.type + \" \" + stats.kind} />\n      <StatsRow label=\"Bitrate\" value={formatBytes(stats.bitrate, \"b/s\")} />\n      <StatsRow label=\"Packets Lost\" value={stats.packetsLost || \"-\"} />\n      <StatsRow label=\"Jitter\" value={stats.jitter || \"-\"} />\n      <StatsRow\n        label={inbound ? \"Bytes Received\" : \"Bytes Sent\"}\n        value={formatBytes(inbound ? stats.bytesReceived : stats.bytesSent)}\n      />\n      {stats.kind === \"video\" && (\n        <>\n          <StatsRow label=\"Framerate\" value={stats.framesPerSecond} />\n          {!inbound && (\n            <StatsRow\n              label=\"Quality Limitation Reason\"\n              value={stats.qualityLimitationReason || \"-\"}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nconst StatsRow = ({ label, value }) => (\n  <DialogRow justify=\"between\" css={{ my: \"0.5rem\" }}>\n    <Text>{label} </Text>\n    <Text>{value}</Text>\n  </DialogRow>\n);\n\nconst formatBytes = (bytes, unit = \"B\", decimals = 2) => {\n  if (bytes === 0) return \"0 \" + unit;\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"].map(\n    size => size + unit\n  );\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n};\n","import React, { useCallback, useState } from \"react\";\nimport {\n  selectAvailableRoleNames,\n  useHMSStore,\n  useHMSActions,\n} from \"@100mslive/react-sdk\";\nimport { MicOffIcon } from \"@100mslive/react-icons\";\nimport {\n  Dialog,\n  Text,\n  Button,\n  RadioGroup,\n  Flex,\n  Label,\n} from \"@100mslive/react-ui\";\nimport {\n  DialogContent,\n  DialogRow,\n  DialogSelect,\n} from \"../../primitives/DialogContent\";\n\nconst trackSourceOptions = [\n  { label: \"All Track Sources\", value: \"\" },\n  { label: \"regular\", value: \"regular\" },\n  { label: \"screen\", value: \"screen\" },\n  { label: \"audioplaylist\", value: \"audioplaylist\" },\n  { label: \"videoplaylist\", value: \"videoplaylist\" },\n];\nconst trackTypeOptions = [\n  { label: \"All Track Types\", value: \"\" },\n  { label: \"audio\", value: \"audio\" },\n  { label: \"video\", value: \"video\" },\n];\nexport const MuteAllModal = ({ onOpenChange }) => {\n  const roles = useHMSStore(selectAvailableRoleNames);\n  const hmsActions = useHMSActions();\n  const [enabled, setEnabled] = useState(false);\n  const [trackType, setTrackType] = useState();\n  const [selectedRole, setRole] = useState();\n  const [selectedSource, setSource] = useState();\n\n  const muteAll = useCallback(async () => {\n    await hmsActions.setRemoteTracksEnabled({\n      enabled: enabled,\n      type: trackType,\n      source: selectedSource,\n      roles: selectedRole ? [selectedRole] : undefined,\n    });\n    onOpenChange(false);\n  }, [\n    selectedRole,\n    enabled,\n    trackType,\n    selectedSource,\n    hmsActions,\n    onOpenChange,\n  ]);\n\n  return (\n    <Dialog.Root defaultOpen onOpenChange={onOpenChange}>\n      <DialogContent title=\"Mute/Unmute Remote Tracks\" Icon={MicOffIcon}>\n        <DialogSelect\n          title=\"Role\"\n          options={[\n            { label: \"All Roles\", value: \"\" },\n            ...roles.map(role => ({ label: role, value: role })),\n          ]}\n          selected={selectedRole}\n          keyField=\"value\"\n          labelField=\"label\"\n          onChange={setRole}\n        />\n        <DialogSelect\n          title=\"Track type\"\n          options={trackTypeOptions}\n          selected={trackType}\n          onChange={setTrackType}\n          keyField=\"value\"\n          labelField=\"label\"\n        />\n        <DialogSelect\n          title=\"Track source\"\n          options={trackSourceOptions}\n          selected={selectedSource}\n          onChange={setSource}\n          keyField=\"value\"\n          labelField=\"label\"\n        />\n        <DialogRow>\n          <Text variant=\"md\">Track status</Text>\n          <RadioGroup.Root value={enabled} onValueChange={setEnabled}>\n            <Flex align=\"center\" css={{ mr: \"$8\" }}>\n              <RadioGroup.Item\n                value={false}\n                id=\"trackDisableRadio\"\n                css={{ mr: \"$4\" }}\n              >\n                <RadioGroup.Indicator />\n              </RadioGroup.Item>\n              <Label htmlFor=\"trackDisableRadio\">Mute</Label>\n            </Flex>\n            <Flex align=\"center\" css={{ cursor: \"pointer\" }}>\n              <RadioGroup.Item\n                value={true}\n                id=\"trackEnableRadio\"\n                css={{ mr: \"$4\" }}\n              >\n                <RadioGroup.Indicator />\n              </RadioGroup.Item>\n              <Label htmlFor=\"trackEnableRadio\">Request Unmute</Label>\n            </Flex>\n          </RadioGroup.Root>\n        </DialogRow>\n        <DialogRow justify=\"end\">\n          <Button variant=\"primary\" onClick={muteAll}>\n            Apply\n          </Button>\n        </DialogRow>\n      </DialogContent>\n    </Dialog.Root>\n  );\n};\n","import { HangUpIcon, InfoIcon } from \"@100mslive/react-icons\";\nimport { Flex, Input, Label, Text, Tooltip } from \"@100mslive/react-ui\";\nimport React, { useCallback, useState } from \"react\";\nimport {\n  RTMP_RECORD_DEFAULT_RESOLUTION,\n  RTMP_RECORD_RESOLUTION_MAX,\n  RTMP_RECORD_RESOLUTION_MIN,\n} from \"../../common/constants\";\nimport { DialogRow } from \"../../primitives/DialogContent\";\n\nexport const ResolutionInput = ({\n  onResolutionChange,\n  disabled,\n  tooltipText,\n}) => {\n  const [resolution, setResolution] = useState(RTMP_RECORD_DEFAULT_RESOLUTION);\n\n  const resolutionChangeHandler = useCallback(\n    event => {\n      const { name, value } = event.target;\n      let width = name === \"resWidth\" ? Number(value) : resolution.width;\n      let height = name === \"resHeight\" ? Number(value) : resolution.height;\n\n      if (width === 0) {\n        width = null;\n      }\n      if (height === 0) {\n        height = null;\n      }\n      const newResolution = {\n        width: !isNaN(width) ? width : RTMP_RECORD_DEFAULT_RESOLUTION.width,\n        height: !isNaN(height) ? height : RTMP_RECORD_DEFAULT_RESOLUTION.height,\n      };\n      setResolution(newResolution);\n    },\n    [resolution]\n  );\n\n  return (\n    <DialogRow breakSm>\n      <Flex gap={1}>\n        <Label css={{ \"@sm\": { mb: \"$8\" } }}>Resolution</Label>\n        <Tooltip title={tooltipText}>\n          <div>\n            <InfoIcon color=\"#B0C3DB\" />\n          </div>\n        </Tooltip>\n      </Flex>\n      <Flex\n        justify=\"between\"\n        css={{ width: \"70%\", \"@sm\": { width: \"100%\" } }}\n        gap={2}\n        direction=\"column\"\n      >\n        <Flex justify=\"between\" gap={2}>\n          <Flex direction=\"column\" css={{ width: \"50%\" }}>\n            <Text variant=\"xs\">Width</Text>\n            <Input\n              css={{ width: \"100%\" }}\n              name=\"resWidth\"\n              value={resolution.width}\n              onChange={resolutionChangeHandler}\n              readOnly={disabled}\n              min={RTMP_RECORD_RESOLUTION_MIN}\n              max={RTMP_RECORD_RESOLUTION_MAX}\n              onBlur={() => onResolutionChange(resolution)}\n              type=\"number\"\n            />\n          </Flex>\n          <Flex direction=\"column\" css={{ width: \"50%\" }}>\n            <Text variant=\"xs\">Height</Text>\n            <Input\n              css={{ width: \"100%\" }}\n              name=\"resHeight\"\n              value={resolution.height}\n              onChange={resolutionChangeHandler}\n              onBlur={() => onResolutionChange(resolution)}\n              readOnly={disabled}\n              min={RTMP_RECORD_RESOLUTION_MIN}\n              max={RTMP_RECORD_RESOLUTION_MAX}\n              type=\"number\"\n            />\n          </Flex>\n        </Flex>\n      </Flex>\n    </DialogRow>\n  );\n};\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport {\n  selectAppData,\n  selectPermissions,\n  useHMSActions,\n  useHMSStore,\n  useRecordingStreaming,\n} from \"@100mslive/react-sdk\";\nimport { RecordIcon } from \"@100mslive/react-icons\";\nimport { Button, Text, Dialog, Box } from \"@100mslive/react-ui\";\nimport {\n  DialogCheckbox,\n  DialogContent,\n  DialogInput,\n  DialogRow,\n} from \"../../primitives/DialogContent\";\nimport { ToastManager } from \"../Toast/ToastManager\";\nimport { ResolutionInput } from \"./ResolutionInput\";\nimport {\n  APP_DATA,\n  QUERY_PARAM_SKIP_PREVIEW,\n  RTMP_RECORD_DEFAULT_RESOLUTION,\n  RTMP_RESOLUTION_IGNORED_WARNING_TEXT,\n} from \"../../common/constants\";\n\nconst defaultMeetingUrl =\n  window.location.href.replace(\"meeting\", \"preview\") +\n  `?${QUERY_PARAM_SKIP_PREVIEW}=true`;\n\nexport const RecordingAndRTMPModal = ({ onOpenChange }) => {\n  const hmsActions = useHMSActions();\n  const permissions = useHMSStore(selectPermissions);\n  const {\n    isHLSRecordingOn,\n    isHLSRunning,\n    isStreamingOn,\n    isBrowserRecordingOn,\n  } = useRecordingStreaming();\n  const recordingUrl = useHMSStore(selectAppData(APP_DATA.recordingUrl));\n  const [meetingURL, setMeetingURL] = useState(\n    recordingUrl || defaultMeetingUrl\n  );\n  const [rtmpURL, setRTMPURL] = useState(\"\");\n  const [hlsSelected, setHLS] = useState(false);\n  const [recordingResolution, setRecordingResolution] = useState(\n    RTMP_RECORD_DEFAULT_RESOLUTION\n  );\n  const [recordingSelected, setRecording] = useState(false);\n  const isRecordingOn = isBrowserRecordingOn || isHLSRecordingOn;\n  const isAnythingRunning = isRecordingOn || isStreamingOn;\n\n  const recordingStreamingStatusText = useMemo(() => {\n    let text = \"\";\n    if (isStreamingOn) {\n      text += \"Streaming\";\n    }\n    if (isRecordingOn) {\n      if (text) text += \"/\";\n      text += \"Recording\";\n    }\n    text += \" is running\";\n    return text;\n  }, [isStreamingOn, isRecordingOn]);\n\n  const resolutionChangeHandler = useCallback(\n    resolution => setRecordingResolution(resolution),\n    []\n  );\n  const startStopRTMPRecordingHLS = async action => {\n    try {\n      if (action === \"start\") {\n        // the skip_preview param only works for preview link, replace meeting with preview if needed\n        const urlToStreamRecord = meetingURL.replace(\n          \"app.100ms.live/meeting\",\n          \"app.100ms.live/preview\"\n        );\n        if (hlsSelected) {\n          await hmsActions.startHLSStreaming({\n            variants: [{ meetingURL: urlToStreamRecord }],\n            recording: recordingSelected\n              ? { hlsVod: true, singleFilePerLayer: true }\n              : undefined,\n          });\n        } else {\n          const rtmpRecordParams = {\n            meetingURL: urlToStreamRecord,\n            rtmpURLs: rtmpURL.length > 0 ? [rtmpURL] : undefined,\n            record: recordingSelected,\n          };\n          const resolution = getResolution();\n\n          if (resolution) {\n            rtmpRecordParams.resolution = resolution;\n          }\n          await hmsActions.startRTMPOrRecording(rtmpRecordParams);\n        }\n      } else {\n        isHLSRunning\n          ? await hmsActions.stopHLSStreaming()\n          : await hmsActions.stopRTMPAndRecording();\n      }\n      onOpenChange(false);\n    } catch (error) {\n      console.error(\n        `failed to start/stop ${\n          hlsSelected ? \"hls streaming\" : \"rtmp/recording\"\n        }`,\n        error\n      );\n      ToastManager.addToast({ title: error.message });\n    }\n\n    function getResolution() {\n      const resolution = {};\n      if (recordingResolution.width) {\n        resolution.width = recordingResolution.width;\n      }\n      if (recordingResolution.height) {\n        resolution.height = recordingResolution.height;\n      }\n      if (Object.keys(resolution).length > 0) {\n        return resolution;\n      }\n    }\n  };\n\n  return (\n    <Dialog.Root defaultOpen onOpenChange={onOpenChange}>\n      <DialogContent title=\"Streaming/Recording\" Icon={RecordIcon}>\n        <Box as=\"form\" onSubmit={e => e.preventDefault()}>\n          <DialogInput\n            title=\"Meeting URL\"\n            value={meetingURL}\n            onChange={setMeetingURL}\n            placeholder=\"Enter meeting url\"\n            disabled={isAnythingRunning}\n            data-testid=\"metting_url_field\"\n          />\n          {permissions.streaming && (\n            <DialogInput\n              title=\"RTMP Out\"\n              value={rtmpURL}\n              onChange={setRTMPURL}\n              placeholder=\"Enter rtmp out url\"\n              disabled={isAnythingRunning || hlsSelected}\n              data-testid=\"rtmp_url_field\"\n            />\n          )}\n\n          <ResolutionInput\n            onResolutionChange={resolutionChangeHandler}\n            disabled={hlsSelected || isHLSRunning}\n            tooltipText={RTMP_RESOLUTION_IGNORED_WARNING_TEXT}\n          />\n\n          {permissions.streaming && (\n            <DialogCheckbox\n              title=\"HLS\"\n              id=\"hlsCheckbox\"\n              value={hlsSelected || isHLSRunning}\n              onChange={setHLS}\n              disabled={isAnythingRunning || rtmpURL[0]}\n            />\n          )}\n          {permissions.recording && (\n            <DialogCheckbox\n              title=\"Recording\"\n              value={recordingSelected || isRecordingOn}\n              disabled={isAnythingRunning}\n              id=\"recordingCheckbox\"\n              onChange={setRecording}\n            />\n          )}\n          <DialogRow justify=\"end\">\n            {isAnythingRunning && (\n              <Text variant=\"sm\" css={{ color: \"$error\" }}>\n                {recordingStreamingStatusText}\n              </Text>\n            )}\n            <Button\n              variant=\"danger\"\n              type=\"reset\"\n              css={{ mx: \"$4\" }}\n              onClick={() => startStopRTMPRecordingHLS(\"stop\")}\n              disabled={!isAnythingRunning}\n              data-testid=\"rtmp_recording_stop\"\n            >\n              Stop\n            </Button>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => startStopRTMPRecordingHLS(\"start\")}\n              disabled={\n                isAnythingRunning ||\n                (!hlsSelected && !recordingSelected && !rtmpURL)\n              }\n              data-testid=\"rtmp_recording_start\"\n            >\n              Start\n            </Button>\n          </DialogRow>\n        </Box>\n      </DialogContent>\n    </Dialog.Root>\n  );\n};\n","import React, { Fragment, useState } from \"react\";\nimport {\n  GridIcon,\n  HamburgerMenuIcon,\n  InfoIcon,\n  MicOffIcon,\n  RecordIcon,\n  SettingIcon,\n  TextboxIcon,\n} from \"@100mslive/react-icons\";\nimport {\n  selectLocalPeerID,\n  selectPermissions,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { Box, Dropdown, IconButton, Text, Tooltip } from \"@100mslive/react-ui\";\nimport { ChangeSelfRole } from \"./ChangeSelfRole\";\nimport { FullScreenItem } from \"./FullScreenItem\";\nimport { UISettings } from \"./UISettings\";\nimport Settings from \"../Settings\";\nimport { RoleChangeModal } from \"../RoleChangeModal\";\nimport { ChangeNameModal } from \"./ChangeNameModal\";\nimport { StatsForNerds } from \"../StatsForNerds\";\nimport { MuteAllModal } from \"./MuteAllModal\";\nimport { RecordingAndRTMPModal } from \"./RecordingAndRTMPModal\";\nimport { FeatureFlags } from \"../../services/FeatureFlags\";\n\nconst hoverStyles = {\n  \"&:hover\": {\n    cursor: \"pointer\",\n    bg: \"$iconHoverBg\",\n  },\n  \"&:focus-visible\": {\n    bg: \"$iconHoverBg\",\n  },\n};\n\nexport const MoreSettings = () => {\n  const permissions = useHMSStore(selectPermissions);\n  const localPeerId = useHMSStore(selectLocalPeerID);\n  const [open, setOpen] = useState(false);\n  const [showChangeNameModal, setShowChangeNameModal] = useState(false);\n  const [showRecordingModal, setShowRecordingModal] = useState(false);\n  const [showMuteAll, setShowMuteAll] = useState(false);\n  const [showDeviceSettings, setShowDeviceSettings] = useState(false);\n  const [showStatsForNerds, setShowStatsForNerds] = useState(false);\n  const [showUISettings, setShowUISettings] = useState(false);\n  const [showSelfRoleChange, setShowSelfRoleChange] = useState(false);\n\n  return (\n    <Fragment>\n      <Dropdown.Root open={open} onOpenChange={setOpen}>\n        <Dropdown.Trigger asChild data-testid=\"more_settings_btn\">\n          <IconButton\n            css={{\n              mx: \"$4\",\n            }}\n          >\n            <Tooltip title=\"More Options\">\n              <Box>\n                <HamburgerMenuIcon />\n              </Box>\n            </Tooltip>\n          </IconButton>\n        </Dropdown.Trigger>\n        <Dropdown.Content\n          sideOffset={5}\n          align=\"center\"\n          css={{ maxHeight: \"$96\" }}\n        >\n          <Dropdown.Item\n            css={hoverStyles}\n            onClick={() => setShowChangeNameModal(value => !value)}\n            data-testid=\"change_name_btn\"\n          >\n            <TextboxIcon />\n            <Text variant=\"sm\" css={{ ml: \"$4\" }}>\n              Change Name\n            </Text>\n          </Dropdown.Item>\n          <ChangeSelfRole\n            css={hoverStyles}\n            onClick={() => setShowSelfRoleChange(true)}\n          />\n          {(permissions.streaming || permissions.recording) && (\n            <Dropdown.Item\n              onClick={() => setShowRecordingModal(true)}\n              css={hoverStyles}\n              data-testid=\"streaming_recording_btn\"\n            >\n              <RecordIcon />\n              <Text variant=\"sm\" css={{ ml: \"$4\" }}>\n                Streaming/Recording\n              </Text>\n            </Dropdown.Item>\n          )}\n          <FullScreenItem hoverStyles={hoverStyles} />\n          {permissions.mute && (\n            <Dropdown.Item\n              onClick={() => setShowMuteAll(true)}\n              css={hoverStyles}\n              data-testid=\"mute_all_btn\"\n            >\n              <MicOffIcon />\n              <Text variant=\"sm\" css={{ ml: \"$4\" }}>\n                Mute All\n              </Text>\n            </Dropdown.Item>\n          )}\n          <Dropdown.ItemSeparator />\n          <Dropdown.Item\n            onClick={() => setShowUISettings(true)}\n            css={hoverStyles}\n            data-testid=\"ui_settings_btn\"\n          >\n            <GridIcon />\n            <Text variant=\"sm\" css={{ ml: \"$4\" }}>\n              UI Settings\n            </Text>\n          </Dropdown.Item>\n          <Dropdown.Item\n            onClick={() => setShowDeviceSettings(true)}\n            css={hoverStyles}\n            data-testid=\"device_settings_btn\"\n          >\n            <SettingIcon />\n            <Text variant=\"sm\" css={{ ml: \"$4\" }}>\n              Device Settings\n            </Text>\n          </Dropdown.Item>\n          {FeatureFlags.enableStatsForNerds && (\n            <Dropdown.Item\n              onClick={() => setShowStatsForNerds(true)}\n              css={hoverStyles}\n              data-testid=\"stats_for_nreds_btn\"\n            >\n              <InfoIcon />\n              <Text variant=\"sm\" css={{ ml: \"$4\" }}>\n                Stats for Nerds\n              </Text>\n            </Dropdown.Item>\n          )}\n        </Dropdown.Content>\n      </Dropdown.Root>\n      {showMuteAll && <MuteAllModal onOpenChange={setShowMuteAll} />}\n      {showChangeNameModal && (\n        <ChangeNameModal onOpenChange={setShowChangeNameModal} />\n      )}\n      {showRecordingModal && (\n        <RecordingAndRTMPModal onOpenChange={setShowRecordingModal} />\n      )}\n      {showDeviceSettings && (\n        <Settings open onOpenChange={setShowDeviceSettings} />\n      )}\n      {FeatureFlags.enableStatsForNerds && showStatsForNerds && (\n        <StatsForNerds\n          open={showStatsForNerds}\n          onOpenChange={setShowStatsForNerds}\n        />\n      )}\n      {showUISettings && (\n        <UISettings open={showUISettings} onOpenChange={setShowUISettings} />\n      )}\n      {showSelfRoleChange && (\n        <RoleChangeModal\n          peerId={localPeerId}\n          onOpenChange={setShowSelfRoleChange}\n        />\n      )}\n    </Fragment>\n  );\n};\n","import { ShareScreenIcon } from \"@100mslive/react-icons\";\nimport {\n  selectIsAllowedToPublish,\n  useHMSStore,\n  useScreenShare,\n} from \"@100mslive/react-sdk\";\nimport { IconButton, Tooltip } from \"@100mslive/react-ui\";\nimport { UI_SETTINGS } from \"../common/constants\";\nimport { isScreenshareSupported } from \"../common/utils\";\nimport { useUISettings } from \"./AppData/useUISettings\";\n\nexport const ScreenshareToggle = ({ css }) => {\n  const isAllowedToPublish = useHMSStore(selectIsAllowedToPublish);\n  const isAudioOnly = useUISettings(UI_SETTINGS.isAudioOnly);\n  const {\n    amIScreenSharing,\n    screenShareVideoTrackId: video,\n    toggleScreenShare,\n  } = useScreenShare();\n  const isVideoScreenshare = amIScreenSharing && !!video;\n  if (!isAllowedToPublish.screen || !isScreenshareSupported()) {\n    return null;\n  }\n  return (\n    <Tooltip title={`${!isVideoScreenshare ? \"Start\" : \"Stop\"} Screen sharing`}>\n      <IconButton\n        active={!isVideoScreenshare}\n        css={css}\n        disabled={isAudioOnly}\n        onClick={() => {\n          toggleScreenShare();\n        }}\n        data-testid=\"screen_share_btn\"\n      >\n        <ShareScreenIcon />\n      </IconButton>\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport { useHMSActions } from \"@100mslive/react-sdk\";\nimport { Dialog, Button } from \"@100mslive/react-ui\";\nimport { DialogContent, DialogRow } from \"../primitives/DialogContent\";\n\nexport const ScreenShareHintModal = ({ onClose }) => {\n  const hmsActions = useHMSActions();\n  return (\n    <Dialog.Root defaultOpen onOpenChange={value => !value && onClose()}>\n      <DialogContent title=\"AudioOnly Screenshare\">\n        <img\n          src=\"/share-audio.png\"\n          alt=\"AudioOnly Screenshare instructions\"\n        ></img>\n        <DialogRow justify=\"end\">\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              hmsActions.setScreenShareEnabled(true, true);\n              onClose();\n            }}\n            data-testid=\"audio_screenshare_continue\"\n          >\n            Continue\n          </Button>\n        </DialogRow>\n      </DialogContent>\n    </Dialog.Root>\n  );\n};\n","import { useCallback, useRef, useState, useEffect } from \"react\";\nimport { ToastManager } from \"../components/Toast/ToastManager\";\n\nimport {\n  useHMSActions,\n  useHMSStore,\n  selectIsLocalAudioPluginPresent,\n  useDevices,\n} from \"@100mslive/react-sdk\";\nimport { AudioLevelIcon } from \"@100mslive/react-icons\";\nimport { IconButton, Tooltip } from \"@100mslive/react-ui\";\nimport { FeatureFlags } from \"../services/FeatureFlags\";\n\nexport const NoiseSuppression = () => {\n  const pluginRef = useRef(null);\n  const hmsActions = useHMSActions();\n  const [disable, setDisabled] = useState(false);\n  const [isNSSupported, setIsNSSupported] = useState(false);\n  const isPluginPresent = useHMSStore(\n    selectIsLocalAudioPluginPresent(\"@100mslive/hms-noise-suppression\")\n  );\n  const { selectedDeviceIDs } = useDevices();\n  const pluginActive = isPluginPresent && !disable;\n\n  const createPlugin = useCallback(async () => {\n    if (!pluginRef.current) {\n      const { HMSNoiseSuppressionPlugin } = await import(\n        \"@100mslive/hms-noise-suppression\"\n      );\n      pluginRef.current = new HMSNoiseSuppressionPlugin(\n        process.env.NS_DURATION_TIME_IN_MS\n      );\n    }\n  }, []);\n\n  const removePlugin = useCallback(async () => {\n    if (pluginRef.current) {\n      await hmsActions.removePluginFromAudioTrack(pluginRef.current);\n      pluginRef.current = null;\n    }\n  }, [hmsActions]);\n\n  const handleFailure = useCallback(\n    async err => {\n      let message = \"adding Noise Suppression plugin failed, see docs\";\n      if (err.message) {\n        message = err.message;\n      }\n      ToastManager.addToast({\n        title: message,\n      });\n\n      setDisabled(true);\n      await removePlugin();\n      pluginRef.current = null;\n      console.error(err);\n    },\n    [removePlugin]\n  );\n\n  const addPlugin = useCallback(async () => {\n    try {\n      setDisabled(false);\n      await createPlugin();\n      //check support its recommended\n      const pluginSupport = hmsActions.validateAudioPluginSupport(\n        pluginRef.current\n      );\n      if (pluginSupport.isSupported) {\n        await hmsActions.addPluginToAudioTrack(pluginRef.current);\n      } else {\n        const err = pluginSupport.errMsg;\n        await handleFailure(err);\n      }\n    } catch (err) {\n      await handleFailure(err);\n    }\n  }, [hmsActions, handleFailure, createPlugin]);\n\n  useEffect(() => {\n    (async () => {\n      if (!pluginRef.current) {\n        await createPlugin();\n      }\n\n      const pluginSupport = hmsActions.validateAudioPluginSupport(\n        pluginRef.current\n      );\n      setIsNSSupported(pluginSupport.isSupported);\n      setDisabled(!pluginSupport.isSupported);\n    })();\n  }, [selectedDeviceIDs.audioInput, hmsActions, createPlugin]);\n\n  if (isNSSupported && FeatureFlags.showNS()) {\n    return (\n      <Tooltip title={`Turn ${!pluginActive ? \"on\" : \"off\"} noise suppression`}>\n        <IconButton\n          active={!pluginActive}\n          disabled={disable}\n          onClick={async () => {\n            if (!pluginActive) {\n              await addPlugin();\n            } else {\n              await removePlugin();\n            }\n          }}\n          css={{ mx: \"$4\" }}\n          data-testid=\"noise_suppression_btn\"\n        >\n          <AudioLevelIcon />\n        </IconButton>\n      </Tooltip>\n    );\n  }\n\n  return null;\n};\n","export function getRandomVirtualBackground() {\n  let backgroundList = [\n    \"blur\",\n    \"https://www.100ms.live/images/vb-1.jpeg\",\n    \"https://www.100ms.live/images/vb-2.jpg\",\n    \"https://www.100ms.live/images/vb-3.png\",\n  ];\n\n  if (process.env[\"REACT_APP_VIDEO_VB\"]) {\n    let gifList = [\"https://www.100ms.live/images/vb-1.gif\"];\n    backgroundList.push(...gifList);\n\n    /* //Not Supporting video backgrounds until web worker issue is resolved\n    let videoList = [\n      \"https://www.100ms.live/images/video-1.mp4\",\n      \"https://www.100ms.live/images/video-2.mp4\",\n      \"https://www.100ms.live/images/video-5.mp4\",\n      \"https://www.100ms.live/images/video-7.mp4\",\n      \"https://www.100ms.live/images/video-8.mp4\",\n    ];\n    backgroundList.push(...videoList);*/\n  }\n\n  let randomIdx = Math.floor(Math.random() * backgroundList.length);\n  if (randomIdx === 0) {\n    return \"blur\";\n  } else if (randomIdx <= 3) {\n    const img = document.createElement(\"img\");\n    img.alt = \"VB\";\n    img.src = backgroundList[randomIdx];\n    return img;\n  } else if (randomIdx === 4) {\n    return backgroundList[randomIdx];\n  }\n  /*} else {\n    const videoEl = document.createElement(\"video\");\n    videoEl.src = backgroundList[randomIdx];\n    return videoEl;\n  }*/\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport {\n  useHMSActions,\n  useHMSStore,\n  selectIsLocalVideoPluginPresent,\n  selectIsAllowedToPublish,\n} from \"@100mslive/react-sdk\";\nimport { VirtualBackgroundIcon } from \"@100mslive/react-icons\";\nimport { IconButton, Tooltip } from \"@100mslive/react-ui\";\nimport { getRandomVirtualBackground } from \"./vbutils\";\n\nexport const VirtualBackground = () => {\n  const pluginRef = useRef(null);\n  const hmsActions = useHMSActions();\n  const isAllowedToPublish = useHMSStore(selectIsAllowedToPublish);\n  const [isVBSupported, setIsVBSupported] = useState(false);\n  const isVBPresent = useHMSStore(\n    selectIsLocalVideoPluginPresent(\"@100mslive/hms-virtual-background\")\n  );\n\n  async function createPlugin() {\n    if (!pluginRef.current) {\n      const { HMSVirtualBackgroundPlugin } = await import(\n        \"@100mslive/hms-virtual-background\"\n      );\n      pluginRef.current = new HMSVirtualBackgroundPlugin(\"none\", true);\n    }\n  }\n  useEffect(() => {\n    createPlugin().then(() => {\n      //check support of plugin\n      const pluginSupport = hmsActions.validateVideoPluginSupport(\n        pluginRef.current\n      );\n      setIsVBSupported(pluginSupport.isSupported);\n    });\n  }, [hmsActions]);\n\n  async function addPlugin() {\n    try {\n      await createPlugin();\n      window.HMS.virtualBackground = pluginRef.current;\n      await pluginRef.current.setBackground(getRandomVirtualBackground());\n      //Running VB on every alternate frame rate for optimized cpu usage\n      await hmsActions.addPluginToVideoTrack(pluginRef.current, 15);\n    } catch (err) {\n      console.error(\"add virtual background plugin failed\", err);\n    }\n  }\n\n  async function removePlugin() {\n    if (pluginRef.current) {\n      await hmsActions.removePluginFromVideoTrack(pluginRef.current);\n      pluginRef.current = null;\n    }\n  }\n\n  if (!isAllowedToPublish.video || !isVBSupported) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={`Turn ${!isVBPresent ? \"on\" : \"off\"} virtual background`}>\n      <IconButton\n        active={!isVBPresent}\n        onClick={() => {\n          !isVBPresent ? addPlugin() : removePlugin();\n        }}\n        css={{ mx: \"$4\" }}\n        data-testid=\"virtual_bg_btn\"\n      >\n        <VirtualBackgroundIcon />\n      </IconButton>\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport { Dropdown, Flex, Text } from \"@100mslive/react-ui\";\n\nfunction formatDuration(duration) {\n  if (!duration) {\n    return \"\";\n  }\n  let mins = Math.floor(duration / 60);\n  if (mins < 10) {\n    mins = `0${String(mins)}`;\n  }\n  let secs = Math.floor(duration % 60);\n  if (secs < 10) {\n    secs = `0${String(secs)}`;\n  }\n\n  return `${mins}:${secs}`;\n}\n\nexport const PlaylistItem = React.memo(\n  ({ name, metadata, duration, selected, onClick }) => {\n    return (\n      <Dropdown.Item\n        css={{\n          flexDirection: \"column\",\n          alignItems: \"flex-start\",\n          h: \"$18\",\n          p: \"$8\",\n          \"&:hover\": {\n            cursor: \"pointer\",\n            bg: \"$menuBg\",\n          },\n          \"&:focus-visible\": {\n            bg: \"$menuBg\",\n          },\n        }}\n        onClick={onClick}\n      >\n        <Flex\n          align=\"center\"\n          justify=\"between\"\n          css={{ width: \"100%\", minHeight: 0 }}\n        >\n          <Text\n            variant=\"md\"\n            css={{ color: selected ? \"$brandDefault\" : \"$textPrimary\" }}\n          >\n            {name}\n          </Text>\n          <Text variant=\"xs\">{formatDuration(duration)}</Text>\n        </Flex>\n        {metadata?.description && (\n          <Text variant=\"xs\" css={{ mt: \"$4\" }}>\n            {metadata?.description}\n          </Text>\n        )}\n      </Dropdown.Item>\n    );\n  }\n);\n","import React, { Fragment, useState } from \"react\";\nimport {\n  HMSPlaylistType,\n  useHMSStore,\n  selectIsAllowedToPublish,\n} from \"@100mslive/react-sdk\";\nimport {\n  AudioPlayerIcon,\n  CrossIcon,\n  VideoPlayerIcon,\n} from \"@100mslive/react-icons\";\nimport {\n  Dropdown,\n  IconButton,\n  Text,\n  Flex,\n  Tooltip,\n  Box,\n} from \"@100mslive/react-ui\";\nimport { PlaylistItem } from \"./PlaylistItem\";\nimport { AudioPlaylistControls } from \"./PlaylistControls\";\nimport { usePlaylist } from \"../hooks/usePlaylist\";\n\nconst BrowseAndPlayFromLocal = ({ type, actions }) => {\n  return (\n    <Fragment>\n      <Text\n        as=\"label\"\n        htmlFor={`${type}PlaylistBrowse`}\n        variant=\"sm\"\n        css={{ cursor: \"pointer\", mr: \"$2\" }}\n      >\n        Browse\n      </Text>\n      <input\n        type=\"file\"\n        id={`${type}PlaylistBrowse`}\n        accept={type === HMSPlaylistType.audio ? \"audio/*\" : \"video/*\"}\n        onChange={e => {\n          const file = e.target.files[0];\n          const id = file.lastModified;\n          actions.setList([\n            {\n              type,\n              id,\n              name: file.name,\n              url: URL.createObjectURL(file),\n            },\n          ]);\n          actions.play(id);\n        }}\n        style={{ display: \"none\" }}\n      />\n    </Fragment>\n  );\n};\n\nexport const Playlist = ({ type }) => {\n  const isAudioPlaylist = type === HMSPlaylistType.audio;\n  const { active, list: playlist, actions } = usePlaylist(type);\n  const [open, setOpen] = useState(false);\n  const [collapse, setCollapse] = useState(false);\n  const isAllowedToPublish = useHMSStore(selectIsAllowedToPublish);\n  if (!isAllowedToPublish.screen || playlist.length === 0) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <Dropdown.Root open={open} onOpenChange={setOpen}>\n        <Dropdown.Trigger\n          asChild\n          data-testid={\n            type === HMSPlaylistType.audio ? \"audio_playlist\" : \"video_playlist\"\n          }\n        >\n          <IconButton css={{ mx: \"$4\" }} active={!active}>\n            <Tooltip\n              title={isAudioPlaylist ? \"Audio Playlist\" : \"Video Playlist\"}\n            >\n              <Box>\n                {isAudioPlaylist ? <AudioPlayerIcon /> : <VideoPlayerIcon />}\n              </Box>\n            </Tooltip>\n          </IconButton>\n        </Dropdown.Trigger>\n        <Dropdown.Content\n          sideOffset={5}\n          align=\"center\"\n          css={{\n            maxHeight: \"unset\",\n            width: \"$60\",\n            p: \"$0\",\n            bg: \"$bgSecondary\",\n            border: \"1px solid $menuBg\",\n          }}\n        >\n          <Flex\n            align=\"center\"\n            css={{\n              p: \"$4 $8\",\n              borderBottom: \"1px solid $borderLight\",\n              bg: \"$menuBg\",\n            }}\n          >\n            <Text variant=\"md\" css={{ flex: \"1 1 0\" }}>\n              {isAudioPlaylist ? \"Audio Player\" : \"Video Playlist\"}\n            </Text>\n            <BrowseAndPlayFromLocal type={type} actions={actions} />\n            <IconButton\n              css={{ mr: \"-$4\" }}\n              onClick={async () => {\n                if (active) {\n                  await actions.stop();\n                }\n                setOpen(false);\n                setCollapse(false);\n              }}\n            >\n              <CrossIcon width={24} height={24} />\n            </IconButton>\n          </Flex>\n          {!collapse && (\n            <Box css={{ maxHeight: \"$96\", overflowY: \"auto\" }}>\n              {playlist.map(playlistItem => {\n                return (\n                  <PlaylistItem\n                    key={playlistItem.id}\n                    {...playlistItem}\n                    onClick={async e => {\n                      e.preventDefault();\n                      await actions.play(playlistItem.id);\n                      // Close the dropdown list for videoplaylist\n                      if (!isAudioPlaylist) {\n                        setOpen(false);\n                      }\n                    }}\n                  />\n                );\n              })}\n            </Box>\n          )}\n          {isAudioPlaylist && (\n            <AudioPlaylistControls\n              onToggle={() => setCollapse(value => !value)}\n            />\n          )}\n        </Dropdown.Content>\n      </Dropdown.Root>\n    </Fragment>\n  );\n};\n","import React, { Fragment, useState } from \"react\";\nimport {\n  BrbIcon,\n  ChatIcon,\n  ChatUnreadIcon,\n  HandIcon,\n  MusicIcon,\n} from \"@100mslive/react-icons\";\nimport {\n  HMSPlaylistType,\n  selectUnreadHMSMessagesCount,\n  selectIsAllowedToPublish,\n  useHMSStore,\n  useScreenShare,\n} from \"@100mslive/react-sdk\";\nimport {\n  Flex,\n  IconButton,\n  Tooltip,\n  VerticalDivider,\n} from \"@100mslive/react-ui\";\nimport { AudioVideoToggle } from \"./AudioVideoToggle\";\nimport { LeaveRoom } from \"./LeaveRoom\";\nimport { MoreSettings } from \"./MoreSettings/MoreSettings\";\nimport { ScreenshareToggle } from \"./ScreenShare\";\nimport { ScreenShareHintModal } from \"./ScreenshareHintModal\";\nimport { NoiseSuppression } from \"../plugins/NoiseSuppression\";\nimport { ToggleWhiteboard } from \"../plugins/whiteboard\";\nimport { VirtualBackground } from \"../plugins/VirtualBackground/VirtualBackground\";\nimport { useMyMetadata } from \"./hooks/useMetadata\";\nimport { FeatureFlags } from \"../services/FeatureFlags\";\nimport { isScreenshareSupported } from \"../common/utils\";\nimport { Playlist } from \"../components/Playlist/Playlist\";\nimport { useIsChatOpen, useToggleChat } from \"./AppData/useChatState\";\n\nconst TranscriptionButton = React.lazy(() =>\n  import(\"../plugins/transcription\")\n);\n\nconst ScreenshareAudio = () => {\n  const {\n    amIScreenSharing,\n    screenShareVideoTrackId: video,\n    screenShareAudioTrackId: audio,\n    toggleScreenShare,\n  } = useScreenShare();\n  const isAllowedToPublish = useHMSStore(selectIsAllowedToPublish);\n  const isAudioScreenshare = amIScreenSharing && !video && !!audio;\n  const [showModal, setShowModal] = useState(false);\n  if (!isAllowedToPublish.screen || !isScreenshareSupported()) {\n    return null;\n  }\n  return (\n    <Fragment>\n      <Tooltip\n        title={`${!isAudioScreenshare ? \"Start\" : \"Stop\"} audio sharing`}\n        key=\"shareAudio\"\n      >\n        <IconButton\n          active={!isAudioScreenshare}\n          css={{ mr: \"$4\" }}\n          onClick={() => {\n            if (amIScreenSharing) {\n              toggleScreenShare(true);\n            } else {\n              setShowModal(true);\n            }\n          }}\n          data-testid=\"screenshare_audio\"\n        >\n          <MusicIcon />\n        </IconButton>\n      </Tooltip>\n      {showModal && (\n        <ScreenShareHintModal onClose={() => setShowModal(false)} />\n      )}\n    </Fragment>\n  );\n};\n\nexport const MetaActions = ({ isMobile = false }) => {\n  const { isHandRaised, isBRBOn, toggleHandRaise, toggleBRB } = useMyMetadata();\n\n  return (\n    <Flex align=\"center\">\n      <Tooltip\n        title={`${!isHandRaised ? \"Raise\" : \"Unraise\"} hand`}\n        css={{ mx: \"$4\" }}\n      >\n        <IconButton\n          onClick={toggleHandRaise}\n          active={!isHandRaised}\n          data-testid={`${\n            isMobile ? \"raise_hand_btn_mobile\" : \"raise_hand_btn\"\n          }`}\n        >\n          <HandIcon />\n        </IconButton>\n      </Tooltip>\n      <Tooltip title={`${isBRBOn ? `I'm back` : `I'll be right back`}`}>\n        <IconButton\n          css={{ mx: \"$4\" }}\n          onClick={toggleBRB}\n          active={!isBRBOn}\n          data-testid=\"brb_btn\"\n        >\n          <BrbIcon />\n        </IconButton>\n      </Tooltip>\n    </Flex>\n  );\n};\n\nconst Chat = () => {\n  const countUnreadMessages = useHMSStore(selectUnreadHMSMessagesCount);\n  const isChatOpen = useIsChatOpen();\n  const toggleChat = useToggleChat();\n\n  return (\n    <Tooltip key=\"chat\" title={`${isChatOpen ? \"Close\" : \"Open\"} chat`}>\n      <IconButton\n        css={{ mx: \"$4\" }}\n        onClick={toggleChat}\n        active={!isChatOpen}\n        data-testid=\"chat_btn\"\n      >\n        {countUnreadMessages === 0 ? (\n          <ChatIcon />\n        ) : (\n          <ChatUnreadIcon data-testid=\"chat_unread_btn\" />\n        )}\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport const Footer = () => {\n  return (\n    <Flex\n      justify=\"between\"\n      align=\"center\"\n      css={{\n        padding: \"$2\",\n        position: \"relative\",\n        height: \"100%\",\n        \"@md\": { flexWrap: \"wrap\" },\n      }}\n    >\n      <Flex\n        align=\"center\"\n        css={{\n          position: \"absolute\",\n          left: \"$7\",\n          \"@md\": {\n            position: \"unset\",\n            justifyContent: \"center\",\n            w: \"100%\",\n            p: \"$4 0\",\n          },\n        }}\n      >\n        <ScreenshareAudio />\n        <Playlist type={HMSPlaylistType.audio} />\n        <Playlist type={HMSPlaylistType.video} />\n        {FeatureFlags.enableWhiteboard ? <ToggleWhiteboard /> : null}\n        <LeftDivider />\n        <VirtualBackground />\n        <NoiseSuppression />\n        {FeatureFlags.enableTranscription && <TranscriptionButton />}\n        <Flex\n          align=\"center\"\n          css={{\n            display: \"none\",\n            \"@md\": {\n              display: \"flex\",\n            },\n          }}\n        >\n          <VerticalDivider space={4} />\n          <MetaActions isMobile />\n        </Flex>\n      </Flex>\n      <Flex align=\"center\" justify=\"center\" css={{ w: \"100%\" }}>\n        <AudioVideoToggle />\n        <ScreenshareToggle css={{ mx: \"$4\" }} />\n        <MoreSettings />\n        <VerticalDivider space={4} />\n        <LeaveRoom />\n        <Flex\n          align=\"center\"\n          css={{ display: \"none\", \"@md\": { display: \"flex\", ml: \"$4\" } }}\n        >\n          <Chat />\n        </Flex>\n      </Flex>\n      <Flex\n        align=\"center\"\n        css={{\n          position: \"absolute\",\n          right: \"$7\",\n          \"@md\": {\n            display: \"none\",\n          },\n        }}\n      >\n        <MetaActions />\n        <VerticalDivider space={4} />\n        <Chat />\n      </Flex>\n    </Flex>\n  );\n};\n\nconst LeftDivider = () => {\n  const allowedToPublish = useHMSStore(selectIsAllowedToPublish);\n  return (\n    <>\n      {allowedToPublish.screen || FeatureFlags.enableWhiteboard ? (\n        <VerticalDivider space={4} />\n      ) : null}\n    </>\n  );\n};\n","import React from \"react\";\nimport {\n  useHMSActions,\n  selectRoleChangeRequest,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { PersonIcon } from \"@100mslive/react-icons\";\nimport { RequestDialog } from \"../primitives/DialogContent\";\nimport { useIsHeadless } from \"./AppData/useUISettings\";\n\nexport const RoleChangeRequestModal = () => {\n  const hmsActions = useHMSActions();\n  const isHeadless = useIsHeadless();\n  const roleChangeRequest = useHMSStore(selectRoleChangeRequest);\n\n  if (!roleChangeRequest?.role || isHeadless) {\n    return null;\n  }\n\n  return (\n    <RequestDialog\n      title=\"Role Change Request\"\n      onOpenChange={value =>\n        !value && hmsActions.rejectChangeRole(roleChangeRequest)\n      }\n      body={`${roleChangeRequest?.requestedBy?.name} has requested you to change your role to ${roleChangeRequest?.role?.name}.`}\n      onAction={() => {\n        hmsActions.acceptChangeRole(roleChangeRequest);\n      }}\n      Icon={PersonIcon}\n      actionText=\"Accept\"\n    />\n  );\n};\n","import React, { useContext } from \"react\";\nimport {\n  selectLocalPeerID,\n  selectPeers,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { Flex } from \"@100mslive/react-ui\";\nimport { GridCenterView, GridSidePaneView } from \"../components/gridView\";\nimport { AppContext } from \"../components/context/AppContext\";\n\nexport const MainGridView = () => {\n  const {\n    maxTileCount,\n    appPolicyConfig: { center: centerRoles = [], sidepane: sidepaneRoles = [] },\n    showStatsOnTiles,\n  } = useContext(AppContext);\n  const peers = useHMSStore(selectPeers);\n  const localPeerId = useHMSStore(selectLocalPeerID);\n  const centerPeers = peers.filter(peer => centerRoles.includes(peer.roleName));\n  const sidebarPeers = peers.filter(peer =>\n    sidepaneRoles.includes(peer.roleName)\n  );\n\n  /**\n   * If there are peers from many publishing roles, then it's possible to divide\n   * them into two parts, those who show in center and those who show in sidepane.\n   * In case there is only one person in the room, then too sidepane will be shown\n   * and center would be taken up by a banner image.\n   * There is an issue currently, where the banner is still shown if there are\n   * multiple viewers in the room but no publisher. Depending on the use case\n   * this can be useful(for webinar) or look odd(for showing you're the only one).\n   * Note that both center peers and sidebar peers have only publishing peers in them.\n   */\n  let showSidePane = centerPeers.length > 0 && sidebarPeers.length > 0;\n  if (centerPeers.length === 0) {\n    // we'll show the sidepane for banner in this case too if 1). it's only me\n    // in the room. or 2). noone is publishing in the room\n    const itsOnlyMeInTheRoom =\n      peers.length === 1 && peers[0].id === localPeerId;\n    const nooneIsPublishing = sidebarPeers.length === 0;\n    showSidePane = itsOnlyMeInTheRoom || nooneIsPublishing;\n  }\n\n  return (\n    <Flex\n      css={{\n        size: \"100%\",\n      }}\n      direction={{\n        \"@initial\": \"row\",\n        \"@md\": \"column\",\n      }}\n    >\n      <GridCenterView\n        peers={showSidePane ? centerPeers : peers}\n        maxTileCount={maxTileCount}\n        allowRemoteMute={false}\n        hideSidePane={!showSidePane}\n        totalPeers={peers.length}\n        showStatsOnTiles={showStatsOnTiles}\n      />\n      {showSidePane && (\n        <GridSidePaneView\n          peers={sidebarPeers}\n          totalPeers={peers.length}\n          showStatsOnTiles={showStatsOnTiles}\n        />\n      )}\n    </Flex>\n  );\n};\n","// @ts-check\nimport {\n  useHMSActions,\n  useHMSStore,\n  selectPeerCount,\n  selectPermissions,\n  selectHLSState,\n  selectRTMPState,\n  selectRecordingState,\n  selectIsConnectedToRoom,\n} from \"@100mslive/react-sdk\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useIsHeadless } from \"../components/AppData/useUISettings\";\n\n/**\n * Hook to execute a callback when alone in room(after a certain 5d of time)\n * @param {number} thresholdMs The threshold(in ms) after which the callback is executed,\n * starting from the instant when alone in room.\n * note: the cb is not called when another peer joins during this period.\n */\nexport const useWhenAloneInRoom = (thresholdMs = 5 * 60 * 1000) => {\n  const isConnected = useHMSStore(selectIsConnectedToRoom);\n  const peerCount = useHMSStore(selectPeerCount);\n  const [aloneForLong, setAloneForLong] = useState(false);\n  const cbTimeout = useRef(null);\n  const alone = isConnected && peerCount === 1;\n\n  useEffect(() => {\n    if (alone && !cbTimeout.current) {\n      cbTimeout.current = setTimeout(() => {\n        setAloneForLong(true);\n      }, thresholdMs);\n    } else if (!alone) {\n      cbTimeout.current && clearTimeout(cbTimeout.current);\n      cbTimeout.current = null;\n      setAloneForLong(false);\n    }\n  }, [alone, thresholdMs]);\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(cbTimeout.current);\n    };\n  }, []);\n\n  return { alone, aloneForLong };\n};\n\nexport const useBeamAutoLeave = () => {\n  const hmsActions = useHMSActions();\n  const permissions = useHMSStore(selectPermissions);\n  const isHeadless = useIsHeadless();\n  const { aloneForLong } = useWhenAloneInRoom();\n  const hls = useHMSStore(selectHLSState);\n  const rtmp = useHMSStore(selectRTMPState);\n  const recording = useHMSStore(selectRecordingState);\n\n  /**\n   * End room after 5 minutes of being alone in the room to stop beam\n   * Note: Leave doesn't stop beam\n   */\n  useEffect(() => {\n    if (aloneForLong && isHeadless) {\n      if (permissions.endRoom) {\n        hmsActions.endRoom(false, \"Stop Beam\");\n      } else {\n        if (hls.running && permissions.streaming) {\n          hmsActions.stopHLSStreaming();\n        }\n        if (\n          (rtmp.running && permissions.streaming) ||\n          (recording.browser.running && permissions.recording)\n        ) {\n          hmsActions.stopRTMPAndRecording();\n        }\n      }\n    }\n  }, [aloneForLong, isHeadless, hmsActions, permissions, hls, recording, rtmp]);\n};\n","import React, { useEffect, useContext, Suspense } from \"react\";\nimport {\n  useHMSStore,\n  useHMSActions,\n  HMSRoomState,\n  selectPeerSharingAudio,\n  selectPeerScreenSharing,\n  selectPeerSharingVideoPlaylist,\n  selectRoomState,\n  selectLocalPeerRoleName,\n} from \"@100mslive/react-sdk\";\nimport { MainGridView } from \"./mainGridView\";\nimport { AppContext } from \"../components/context/AppContext\";\nimport FullPageProgress from \"../components/FullPageProgress\";\nimport ScreenShareView from \"./screenShareView\";\nimport { useWhiteboardMetadata } from \"../plugins/whiteboard\";\nimport { useBeamAutoLeave } from \"../common/hooks\";\nimport { UI_MODE_ACTIVE_SPEAKER, UI_SETTINGS } from \"../common/constants\";\nimport { useUISettings } from \"../components/AppData/useUISettings\";\n\nconst WhiteboardView = React.lazy(() => import(\"./WhiteboardView\"));\nconst HLSView = React.lazy(() => import(\"./HLSView\"));\nconst ActiveSpeakerView = React.lazy(() => import(\"./ActiveSpeakerView\"));\n\nexport const ConferenceMainView = () => {\n  const localPeerRole = useHMSStore(selectLocalPeerRoleName);\n  const peerSharing = useHMSStore(selectPeerScreenSharing);\n  const peerSharingAudio = useHMSStore(selectPeerSharingAudio);\n  const peerSharingPlaylist = useHMSStore(selectPeerSharingVideoPlaylist);\n  const isAudioOnly = useUISettings(UI_SETTINGS.isAudioOnly);\n  const { whiteboardOwner: whiteboardShared } = useWhiteboardMetadata();\n  const roomState = useHMSStore(selectRoomState);\n  useBeamAutoLeave();\n  const hmsActions = useHMSActions();\n  const {\n    audioPlaylist,\n    videoPlaylist,\n    uiViewMode,\n    HLS_VIEWER_ROLE,\n    showStatsOnTiles,\n  } = useContext(AppContext);\n\n  useEffect(() => {\n    // set list only when room state is connected\n    if (roomState !== HMSRoomState.Connected) {\n      return;\n    }\n    if (videoPlaylist.length > 0) {\n      hmsActions.videoPlaylist.setList(videoPlaylist);\n    }\n    if (audioPlaylist.length > 0) {\n      hmsActions.audioPlaylist.setList(audioPlaylist);\n    }\n  }, [roomState, videoPlaylist, audioPlaylist, hmsActions]);\n\n  if (!localPeerRole) {\n    // we don't know the role yet to decide how to render UI\n    return null;\n  }\n\n  let ViewComponent;\n  if (localPeerRole === HLS_VIEWER_ROLE) {\n    ViewComponent = HLSView;\n  } else if (whiteboardShared) {\n    ViewComponent = WhiteboardView;\n  } else if (\n    ((peerSharing && peerSharing.id !== peerSharingAudio?.id) ||\n      peerSharingPlaylist) &&\n    !isAudioOnly\n  ) {\n    ViewComponent = ScreenShareView;\n  } else if (uiViewMode === UI_MODE_ACTIVE_SPEAKER) {\n    ViewComponent = ActiveSpeakerView;\n  } else {\n    ViewComponent = MainGridView;\n  }\n\n  return (\n    ViewComponent && (\n      <Suspense fallback={<FullPageProgress />}>\n        <ViewComponent showStats={showStatsOnTiles} />\n      </Suspense>\n    )\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { usePrevious } from \"react-use\";\nimport {\n  selectRoomState,\n  HMSRoomState,\n  selectIsConnectedToRoom,\n  useHMSActions,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { Box, Flex } from \"@100mslive/react-ui\";\nimport { Header } from \"./Header\";\nimport { Footer } from \"./Footer\";\nimport FullPageProgress from \"./FullPageProgress\";\nimport { RoleChangeRequestModal } from \"./RoleChangeRequestModal\";\nimport { ConferenceMainView } from \"../layouts/mainView\";\nimport { useIsHeadless } from \"./AppData/useUISettings\";\n\nconst Conference = () => {\n  const navigate = useNavigate();\n  const { roomId, role } = useParams();\n  const isHeadless = useIsHeadless();\n  const roomState = useHMSStore(selectRoomState);\n  const prevState = usePrevious(roomState);\n  const isConnectedToRoom = useHMSStore(selectIsConnectedToRoom);\n  const hmsActions = useHMSActions();\n\n  useEffect(() => {\n    if (!roomId) {\n      navigate(`/`);\n      return;\n    }\n    if (\n      !prevState &&\n      !(\n        roomState === HMSRoomState.Connecting ||\n        roomState === HMSRoomState.Reconnecting ||\n        isConnectedToRoom\n      )\n    ) {\n      if (role) navigate(`/preview/${roomId || \"\"}/${role}`);\n      else navigate(`/preview/${roomId || \"\"}`);\n    }\n  }, [isConnectedToRoom, prevState, roomState, navigate, role, roomId]);\n\n  useEffect(() => {\n    return () => {\n      // This is needed to handle mac touchpad swipe gesture\n      if (isConnectedToRoom) {\n        hmsActions.leave();\n      }\n    };\n  }, [hmsActions, isConnectedToRoom]);\n\n  if (!isConnectedToRoom) {\n    return <FullPageProgress />;\n  }\n\n  return (\n    <Flex css={{ size: \"100%\" }} direction=\"column\">\n      {!isHeadless && (\n        <Box css={{ h: \"$18\", \"@md\": { h: \"$17\" } }} data-testid=\"header\">\n          <Header />\n        </Box>\n      )}\n      <Box\n        css={{\n          w: \"100%\",\n          flex: \"1 1 0\",\n          minHeight: 0,\n        }}\n        data-testid=\"conferencing\"\n      >\n        <ConferenceMainView />\n      </Box>\n      {!isHeadless && (\n        <Box css={{ flexShrink: 0, minHeight: \"$24\" }} data-testid=\"footer\">\n          <Footer />\n        </Box>\n      )}\n      <RoleChangeRequestModal />\n    </Flex>\n  );\n};\n\nexport default Conference;\n","import React from \"react\";\nimport { Flex, Box, Text } from \"@100mslive/react-ui\";\nimport PlaceholderBg from \"../images/first_person.png\";\n\nexport const FirstPersonDisplay = React.memo(() => {\n  return (\n    <Box\n      css={{\n        position: \"relative\",\n        overflow: \"hidden\",\n        w: \"37.5rem\",\n        maxWidth: \"80%\",\n        h: \"100%\",\n        r: \"$3\",\n        m: \"0 auto\",\n        backgroundImage: `url(${PlaceholderBg})`,\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n      data-testid=\"first_person_img\"\n    >\n      <Flex\n        align=\"center\"\n        direction=\"column\"\n        css={{\n          position: \"absolute\",\n          w: \"100%\",\n          top: \"33.33%\",\n          left: 0,\n          textAlign: \"center\",\n        }}\n      >\n        <Text color=\"white\" variant=\"h4\" css={{ \"@md\": { fontSize: \"$md\" } }}>\n          Welcome!\n        </Text>\n        <Text\n          color=\"white\"\n          variant=\"h6\"\n          css={{ mt: \"$4\", \"@md\": { fontSize: \"$sm\" } }}\n        >\n          You’re the first one here.\n        </Text>\n        <Text\n          color=\"white\"\n          variant=\"h6\"\n          css={{ mt: \"$2\", \"@md\": { fontSize: \"$sm\" } }}\n        >\n          Sit back and relax till the others join.\n        </Text>\n      </Flex>\n    </Box>\n  );\n});\n","import { styled } from \"@100mslive/react-ui\";\n\nexport const Image = styled(\"img\", {\n  width: \"100%\",\n  height: \"auto\",\n  r: \"$3\",\n});\n","import React, { Fragment } from \"react\";\nimport { useMedia } from \"react-use\";\nimport { Box, Flex, config as cssConfig } from \"@100mslive/react-ui\";\nimport { FirstPersonDisplay } from \"./FirstPersonDisplay\";\nimport { ChatView } from \"./chatView\";\nimport VideoList from \"./VideoList\";\nimport { useIsChatOpen } from \"./AppData/useChatState\";\nimport { mobileChatStyle } from \"../common/utils\";\nimport { Image } from \"./Image\";\n\nconst MAX_TILES_FOR_MOBILE = 4;\n\n/**\n * the below variables are for showing webinar etc. related image if required on certain meeting urls\n */\nconst webinarProps = JSON.parse(process.env.REACT_APP_WEBINAR_PROPS || \"{}\");\nconst eventRoomIDs = webinarProps?.ROOM_IDS || [];\nconst eventsImg = webinarProps?.IMAGE_FILE || \"\"; // the image to show in center\n// the link to navigate to when user clicks on the image\nconst webinarInfoLink = webinarProps?.LINK_HREF || \"https://100ms.live/\";\n\n// The center of the screen shows bigger tiles\nexport const GridCenterView = ({\n  peers,\n  maxTileCount,\n  hideSidePane,\n  showStatsOnTiles,\n}) => {\n  const mediaQueryLg = cssConfig.media.md;\n  const limitMaxTiles = useMedia(mediaQueryLg);\n  const isChatOpen = useIsChatOpen();\n  return (\n    <Fragment>\n      <Box\n        css={{\n          flex: \"1 1 0\",\n          height: \"100%\",\n          \"@md\": { flex: \"2 1 0\" },\n        }}\n      >\n        {peers && peers.length > 0 ? (\n          <VideoList\n            showStatsOnTiles={showStatsOnTiles}\n            peers={peers}\n            maxTileCount={limitMaxTiles ? MAX_TILES_FOR_MOBILE : maxTileCount}\n          />\n        ) : eventRoomIDs.some(id => window.location.href.includes(id)) ? (\n          <Box\n            css={{\n              display: \"grid\",\n              placeItems: \"center\",\n              size: \"100%\",\n              p: \"$12\",\n            }}\n          >\n            <a href={webinarInfoLink} target=\"_blank\" rel=\"noreferrer\">\n              <Image\n                css={{ p: \"$4\", boxShadow: \"$sm\" }}\n                alt=\"Event template\"\n                src={eventsImg}\n              />\n            </a>\n          </Box>\n        ) : (\n          <FirstPersonDisplay />\n        )}\n      </Box>\n      {isChatOpen && hideSidePane && (\n        <Flex\n          css={{\n            height: \"75%\",\n            flex: \"0 0 20%\",\n            zIndex: 40,\n            mr: \"$4\",\n            alignSelf: \"flex-end\",\n            \"@md\": mobileChatStyle,\n            \"@ls\": {\n              minHeight: \"100%\", // no sidepeer tiles will be present\n              bottom: \"$7\",\n            },\n          }}\n        >\n          <ChatView />\n        </Flex>\n      )}\n    </Fragment>\n  );\n};\n\n// Side pane shows smaller tiles\nexport const GridSidePaneView = ({ peers, showStatsOnTiles }) => {\n  const isChatOpen = useIsChatOpen();\n  return (\n    <Flex\n      direction=\"column\"\n      css={{\n        flex: \"0 0 20%\",\n        mx: \"$4\",\n        \"@lg\": {\n          flex: \"0 0 25%\",\n        },\n        \"@md\": {\n          flex: \"1 1 0\",\n        },\n      }}\n    >\n      <Flex css={{ flex: \"1 1 0\" }} align=\"end\">\n        {peers && peers.length > 0 && (\n          <VideoList\n            showStatsOnTiles={showStatsOnTiles}\n            peers={peers}\n            maxColCount={2}\n          />\n        )}\n      </Flex>\n      {isChatOpen && (\n        <Flex\n          align=\"end\"\n          css={{\n            flex: \"1 1 0\",\n            h: \"50%\",\n            p: \"$4\",\n            \"@md\": mobileChatStyle,\n            \"@ls\": {\n              ...mobileChatStyle,\n              minHeight: \"85%\",\n            },\n          }}\n        >\n          <ChatView />\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n","const PEER_NAME_PLACEHOLDER = \"peerName\";\nconst labelMap = new Map([\n  [[true, \"screen\"].toString(), \"Your Screen\"],\n  [[true, \"regular\"].toString(), `You (${PEER_NAME_PLACEHOLDER})`],\n  [[false, \"screen\"].toString(), `${PEER_NAME_PLACEHOLDER}'s Screen`],\n  [[false, \"regular\"].toString(), PEER_NAME_PLACEHOLDER],\n  [[true, undefined].toString(), `You (${PEER_NAME_PLACEHOLDER})`],\n  [[false, undefined].toString(), `${PEER_NAME_PLACEHOLDER}`],\n]);\n\nexport const getVideoTileLabel = ({ peerName, isLocal, track }) => {\n  const isPeerPresent = peerName !== undefined;\n  if (!isPeerPresent || !track) {\n    // for peers with only audio track\n    return isPeerPresent\n      ? labelMap\n          .get([isLocal, undefined].toString())\n          .replace(PEER_NAME_PLACEHOLDER, peerName)\n      : \"\";\n  }\n  const isLocallyMuted = track.volume === 0;\n  // Map [isLocal, videoSource] to the label to be displayed.\n  let label = labelMap.get([isLocal, track.source].toString());\n  if (label) {\n    label = label.replace(PEER_NAME_PLACEHOLDER, peerName);\n  } else {\n    label = `${peerName} ${track.source}`;\n  }\n  label = `${label}${track.degraded ? \"(Degraded)\" : \"\"}`;\n  return `${label}${isLocallyMuted ? \" (Muted for you)\" : \"\"}`;\n};\n","import { CrossIcon, ShareScreenIcon } from \"@100mslive/react-icons\";\nimport { useHMSActions } from \"@100mslive/react-sdk\";\nimport { Button, Flex, Text } from \"@100mslive/react-ui\";\nimport React from \"react\";\n\nexport const ScreenshareDisplay = () => {\n  const hmsActions = useHMSActions();\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"center\"\n      justify=\"center\"\n      css={{\n        position: \"relative\",\n        overflow: \"hidden\",\n        w: \"37.5rem\",\n        maxWidth: \"80%\",\n        h: \"100%\",\n        r: \"$3\",\n        m: \"0 auto\",\n        color: \"$textPrimary\",\n        bg: \"$tileBg\",\n        textAlign: \"center\",\n      }}\n    >\n      <ShareScreenIcon width={48} height={48} />\n      <Text variant=\"h5\" css={{ m: \"$8 0\" }}>\n        You are sharing your screen\n      </Text>\n      <Button\n        variant=\"danger\"\n        onClick={async () => {\n          await hmsActions.setScreenShareEnabled(false);\n        }}\n        data-testid=\"stop_screen_share_btn\"\n      >\n        <CrossIcon width={18} height={18} />\n        &nbsp; Stop screen share\n      </Button>\n    </Flex>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { useFullscreen, useToggle } from \"react-use\";\nimport screenfull from \"screenfull\";\nimport {\n  selectVideoPlaylist,\n  selectVideoPlaylistVideoTrackByPeerID,\n  useHMSActions,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { ShrinkIcon, ExpandIcon, CrossIcon } from \"@100mslive/react-icons\";\nimport { Flex, IconButton, Text, Video } from \"@100mslive/react-ui\";\nimport { VideoPlaylistControls } from \"./PlaylistControls\";\nimport { UI_SETTINGS } from \"../../common/constants\";\nimport { useUISettings } from \"../AppData/useUISettings\";\n\nexport const VideoPlayer = React.memo(({ peerId }) => {\n  const videoTrack = useHMSStore(selectVideoPlaylistVideoTrackByPeerID(peerId));\n  const active = useHMSStore(selectVideoPlaylist.selectedItem);\n  const isAudioOnly = useUISettings(UI_SETTINGS.isAudioOnly);\n  const hmsActions = useHMSActions();\n  const ref = useRef(null);\n  const [show, toggle] = useToggle(false);\n  const isFullscreen = useFullscreen(ref, show, {\n    onClose: () => toggle(false),\n  });\n  return (\n    <Flex\n      direction=\"column\"\n      justify=\"center\"\n      css={{ w: \"100%\", h: \"100%\" }}\n      ref={ref}\n    >\n      {active && (\n        <Flex\n          justify=\"between\"\n          align=\"center\"\n          css={{\n            bg: \"$menuBg\",\n            p: \"$2 $2 $2 $6\",\n            borderTopLeftRadius: \"$1\",\n            borderTopRightRadius: \"$1\",\n          }}\n        >\n          <Text css={{ color: \"$textPrimary\" }}>{active.name}</Text>\n          <IconButton\n            css={{\n              color: \"$white\",\n            }}\n            onClick={() => {\n              hmsActions.videoPlaylist.stop();\n            }}\n            data-testid=\"videoplaylist_cross_btn\"\n          >\n            <CrossIcon />\n          </IconButton>\n        </Flex>\n      )}\n      <Video\n        trackId={videoTrack?.id}\n        attach={!isAudioOnly}\n        css={{\n          \"@lg\": { objectFit: \"contain\", h: \"auto\" },\n          r: \"$1\",\n          borderTopLeftRadius: 0,\n          borderTopRightRadius: 0,\n        }}\n      />\n      <VideoPlaylistControls>\n        {screenfull.enabled && (\n          <IconButton\n            onClick={() => toggle()}\n            css={{\n              color: \"$white\",\n              height: \"max-content\",\n              alignSelf: \"center\",\n              cursor: \"pointer\",\n            }}\n          >\n            {isFullscreen ? <ShrinkIcon /> : <ExpandIcon />}\n          </IconButton>\n        )}\n      </VideoPlaylistControls>\n    </Flex>\n  );\n});\n","import React, { useCallback, useMemo, Fragment } from \"react\";\nimport { useMedia } from \"react-use\";\nimport {\n  useHMSStore,\n  selectPeers,\n  selectPeerScreenSharing,\n  selectPeerSharingVideoPlaylist,\n  selectScreenShareByPeerID,\n  selectLocalPeerID,\n  selectLocalPeerRoleName,\n} from \"@100mslive/react-sdk\";\nimport { Box, Flex, config as cssConfig } from \"@100mslive/react-ui\";\nimport { ChatView } from \"../components/chatView\";\nimport { ScreenshareDisplay } from \"../components/ScreenshareDisplay\";\nimport ScreenshareTile from \"../components/ScreenshareTile\";\nimport VideoList from \"../components/VideoList\";\nimport VideoTile from \"../components/VideoTile\";\nimport { VideoPlayer } from \"../components/Playlist/VideoPlayer\";\nimport { mobileChatStyle } from \"../common/utils\";\nimport { useIsChatOpen } from \"../components/AppData/useChatState\";\n\nconst ScreenShareView = ({ showStats }) => {\n  // for smaller screen we will show sidebar in bottom\n  const mediaQueryLg = cssConfig.media.lg;\n  const showSidebarInBottom = useMedia(mediaQueryLg);\n  const peers = useHMSStore(selectPeers);\n  const localPeerID = useHMSStore(selectLocalPeerID);\n  const localPeerRole = useHMSStore(selectLocalPeerRoleName);\n  const peerPresenting = useHMSStore(selectPeerScreenSharing);\n  const peerSharingPlaylist = useHMSStore(selectPeerSharingVideoPlaylist);\n  const isPresenterFromMyRole =\n    peerPresenting?.roleName?.toLowerCase() === localPeerRole?.toLowerCase();\n  const amIPresenting = localPeerID === peerPresenting?.id;\n  const showPresenterInSmallTile =\n    showSidebarInBottom || amIPresenting || isPresenterFromMyRole;\n\n  const smallTilePeers = useMemo(() => {\n    const smallTilePeers = peers.filter(peer => peer.id !== peerPresenting?.id);\n    if (showPresenterInSmallTile && peerPresenting) {\n      smallTilePeers.unshift(peerPresenting); // put presenter on first page\n    }\n    return smallTilePeers;\n  }, [peers, peerPresenting, showPresenterInSmallTile]);\n\n  return (\n    <Flex\n      css={{\n        size: \"100%\",\n      }}\n      direction={showSidebarInBottom ? \"column\" : \"row\"}\n    >\n      <ScreenShareComponent\n        showStats={showStats}\n        amIPresenting={amIPresenting}\n        peerPresenting={peerPresenting}\n        peerSharingPlaylist={peerSharingPlaylist}\n      />\n      <Flex\n        direction={{ \"@initial\": \"column\", \"@lg\": \"row\" }}\n        css={{\n          overflow: \"hidden\",\n          p: \"$4\",\n          flex: \"0 0 20%\",\n          \"@lg\": {\n            flex: \"1 1 0\",\n          },\n        }}\n      >\n        <SidePane\n          showSidebarInBottom={showSidebarInBottom}\n          showStats={showStats}\n          peerScreenSharing={peerPresenting}\n          isPresenterInSmallTiles={showPresenterInSmallTile}\n          smallTilePeers={smallTilePeers}\n          totalPeers={peers.length}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\n// Sidepane will show the camera stream of the main peer who is screensharing\n// and both camera + screen(if applicable) of others\nexport const SidePane = ({\n  showStats,\n  isPresenterInSmallTiles,\n  peerScreenSharing, // the peer who is screensharing\n  smallTilePeers,\n  totalPeers,\n  showSidebarInBottom,\n}) => {\n  // The main peer's screenshare is already being shown in center view\n  const shouldShowScreenFn = useCallback(\n    peer => peerScreenSharing && peer.id !== peerScreenSharing.id,\n    [peerScreenSharing]\n  );\n  return (\n    <Fragment>\n      {!isPresenterInSmallTiles && (\n        <LargeTilePeerView\n          peerScreenSharing={peerScreenSharing}\n          showStatsOnTiles={showStats}\n        />\n      )}\n      <SmallTilePeersView\n        showSidebarInBottom={showSidebarInBottom}\n        smallTilePeers={smallTilePeers}\n        shouldShowScreenFn={shouldShowScreenFn}\n        showStatsOnTiles={showStats}\n      />\n      <CustomChatView totalPeers={totalPeers} />\n    </Fragment>\n  );\n};\n\nconst ScreenShareComponent = ({\n  showStats,\n  amIPresenting,\n  peerPresenting,\n  peerSharingPlaylist,\n}) => {\n  const screenshareTrack = useHMSStore(\n    selectScreenShareByPeerID(peerPresenting?.id)\n  );\n\n  if (peerSharingPlaylist) {\n    return (\n      <Box\n        css={{\n          mx: \"$4\",\n          flex: \"3 1 0\",\n          \"@lg\": {\n            flex: \"2 1 0\",\n            display: \"flex\",\n            alignItems: \"center\",\n          },\n        }}\n      >\n        <VideoPlayer peerId={peerSharingPlaylist.id} />\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      css={{\n        flex: \"3 1 0\",\n        mx: \"$4\",\n        ml: \"$5\",\n        \"@lg\": { ml: \"$4\", maxHeight: \"80%\" },\n      }}\n    >\n      {peerPresenting &&\n        (amIPresenting &&\n        ![\"browser\", \"window\", \"application\"].includes(\n          screenshareTrack?.displaySurface\n        ) ? (\n          <Box css={{ objectFit: \"contain\", h: \"100%\" }}>\n            <ScreenshareDisplay />\n          </Box>\n        ) : (\n          <ScreenshareTile\n            showStatsOnTiles={showStats}\n            peerId={peerPresenting?.id}\n          />\n        ))}\n    </Box>\n  );\n};\n\nconst CustomChatView = () => {\n  const isChatOpen = useIsChatOpen();\n  return isChatOpen ? (\n    <Box\n      css={{\n        h: \"45%\",\n        flexShrink: 0,\n        \"@lg\": mobileChatStyle,\n        \"@ls\": {\n          position: \"absolute\",\n          top: 0,\n          h: \"100%\",\n          minHeight: 300,\n          zIndex: 40,\n        },\n      }}\n    >\n      <ChatView />\n    </Box>\n  ) : null;\n};\n\nconst SmallTilePeersView = ({\n  smallTilePeers,\n  shouldShowScreenFn,\n  showStatsOnTiles,\n  showSidebarInBottom,\n}) => {\n  return (\n    <Flex\n      css={{\n        flex: \"2 1 0\",\n      }}\n    >\n      {smallTilePeers && smallTilePeers.length > 0 && (\n        <VideoList\n          peers={smallTilePeers}\n          maxColCount={showSidebarInBottom ? undefined : 2}\n          maxRowCount={showSidebarInBottom ? 1 : undefined}\n          includeScreenShareForPeer={shouldShowScreenFn}\n          showStatsOnTiles={showStatsOnTiles}\n        />\n      )}\n    </Flex>\n  );\n};\n\nconst LargeTilePeerView = ({ peerScreenSharing, showStatsOnTiles }) => {\n  return peerScreenSharing ? (\n    <Box\n      css={{\n        flex: \"1 1 0\",\n        minHeight: \"25%\",\n        py: \"$4\",\n        \"@lg\": {\n          mr: \"$4\",\n          minHeight: \"unset\",\n          py: 0,\n        },\n        \"@sm\": {\n          height: \"100%\",\n          maxHeight: \"75%\",\n          alignSelf: \"center\",\n        },\n      }}\n    >\n      <VideoTile\n        showStatsOnTiles={showStatsOnTiles}\n        width=\"100%\"\n        height=\"100%\"\n        peerId={peerScreenSharing.id}\n      />\n    </Box>\n  ) : null;\n};\n\nexport default ScreenShareView;\n"],"names":[],"sourceRoot":""}