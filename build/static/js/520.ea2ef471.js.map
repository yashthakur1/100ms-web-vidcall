{"version":3,"file":"static/js/520.ea2ef471.js","mappings":"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pE,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GA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","sources":["../node_modules/@tensorflow/tfjs-core/dist/backends/backend.js","../node_modules/@tensorflow/tfjs-core/dist/util_base.js","../node_modules/@tensorflow/tfjs-core/dist/environment.js","../node_modules/@tensorflow/tfjs-core/dist/global_util.js","../node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../node_modules/@tensorflow/tfjs-core/dist/log.js","../node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js","../node_modules/@tensorflow/tfjs-core/dist/hash_util.js","../node_modules/@tensorflow/tfjs-core/dist/util.js","../node_modules/@tensorflow/tfjs-core/dist/profiler.js","../node_modules/@tensorflow/tfjs-core/dist/tape.js","../node_modules/@tensorflow/tfjs-core/dist/tensor_format.js","../node_modules/@tensorflow/tfjs-core/dist/tensor.js","../node_modules/@tensorflow/tfjs-core/dist/types.js","../node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../node_modules/@tensorflow/tfjs-core/dist/engine.js","../node_modules/@tensorflow/tfjs-core/dist/device_util.js","../node_modules/@tensorflow/tfjs-core/dist/flags.js","../node_modules/@tensorflow/tfjs-core/dist/io/types.js","../node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js","../node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js","../node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js","../node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js","../node_modules/@tensorflow/tfjs-core/dist/io/model_management.js","../node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js","../node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js","../node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","../node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../node_modules/@tensorflow/tfjs-core/dist/ops/clone.js","../node_modules/@tensorflow/tfjs-core/dist/ops/print.js","../node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js","../node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js","../node_modules/@tensorflow/tfjs-core/dist/io/progress.js","../node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js","../node_modules/@tensorflow/tfjs-core/dist/io/http.js","../node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js","../node_modules/@tensorflow/tfjs-core/dist/io/io.js","../node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../node_modules/@tensorflow/tfjs-core/dist/ops/complex.js","../node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js","../node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","../node_modules/@tensorflow/tfjs-core/dist/ops/imag.js","../node_modules/@tensorflow/tfjs-core/dist/ops/real.js","../node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","../node_modules/@tensorflow/tfjs-core/dist/ops/split.js","../node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js","../node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js","../node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js","../node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js","../node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js","../node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js","../node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js","../node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js","../node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js","../node_modules/@tensorflow/tfjs-core/dist/ops/fill.js","../node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js","../node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js","../node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js","../node_modules/@tensorflow/tfjs-core/dist/ops/tile.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/grayscale_to_rgb.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js","../node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js","../node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_util.js","../node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js","../node_modules/@tensorflow/tfjs-core/dist/ops/bincount.js","../node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js","../node_modules/@tensorflow/tfjs-core/dist/ops/greater.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sum.js","../node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js","../node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../node_modules/@tensorflow/tfjs-core/dist/ops/round.js","../node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js","../node_modules/@tensorflow/tfjs-core/dist/ops/where.js","../node_modules/@tensorflow/tfjs-core/dist/ops/range.js","../node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/threshold.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/transform.js","../node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js","../node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js","../node_modules/@tensorflow/tfjs-core/dist/ops/stack.js","../node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js","../node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js","../node_modules/@tensorflow/tfjs-core/dist/ops/abs.js","../node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/max.js","../node_modules/@tensorflow/tfjs-core/dist/ops/min.js","../node_modules/@tensorflow/tfjs-core/dist/ops/pow.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","../node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../node_modules/@tensorflow/tfjs-core/dist/ops/norm.js","../node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js","../node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js","../node_modules/@tensorflow/tfjs-core/dist/globals.js","../node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js","../node_modules/@tensorflow/tfjs-core/dist/ops/eye.js","../node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js","../node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js","../node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js","../node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","../node_modules/@tensorflow/tfjs-core/dist/ops/mean.js","../node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js","../node_modules/@tensorflow/tfjs-core/dist/ops/ones.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js","../node_modules/@tensorflow/tfjs-core/dist/ops/relu.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js","../node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js","../node_modules/@tensorflow/tfjs-core/dist/ops/log.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js","../node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js","../node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","../node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js","../node_modules/@tensorflow/tfjs-core/dist/gradients.js","../node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_fill_empty_rows.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_reshape.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_segment_mean.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_segment_sum.js","../node_modules/@tensorflow/tfjs-core/dist/ops/string/string_n_grams.js","../node_modules/@tensorflow/tfjs-core/dist/ops/string/string_split.js","../node_modules/@tensorflow/tfjs-core/dist/ops/string/string_to_hash_bucket_fast.js","../node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/elu.js","../node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js","../node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js","../node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js","../node_modules/@tensorflow/tfjs-core/dist/ops/step.js","../node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js","../node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js","../node_modules/@tensorflow/tfjs-core/dist/backends/einsum_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_fill_empty_rows_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_reshape_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_segment_reduction_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js","../node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js","../node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js","../node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js","../node_modules/@tensorflow/tfjs-core/dist/base.js","../node_modules/@tensorflow/tfjs-core/dist/index.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/zeros_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Real.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cast.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Equal.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd_Impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GreaterEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LessEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sigmoid.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentReduction_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sqrt.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringNGrams_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringToHashBucketFast_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LeakyRelu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prelu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multiply.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/mean_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/_FusedMatMul.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Abs.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acos.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acosh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Add.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AddN.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/All.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Any.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMax.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMin.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asin.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asinh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan2.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atanh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3DGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPoolGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchNorm.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchToSpaceND.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Bincount.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BroadcastArgs.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NotEqual.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/int.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cast.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Ceil.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ClipByValue.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ComplexAbs.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropFilter.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropInput.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropFilterV2.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropInputV2.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cos.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cosh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/CropAndResize.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/cumsum_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumsum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DenseBincount.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthToSpace.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNative.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropInput.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Diag.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/dilation_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Dilation2D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Einsum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Elu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/EluGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Equal.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Erf.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Exp.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ExpandDims.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Expm1.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Fill.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Floor.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FloorDiv.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedConv2D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedDepthwiseConv2D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherNd.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherV2.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Greater.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GreaterEqual.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IFFT.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsFinite.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsInf.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsNaN.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Less.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LessEqual.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LinSpace.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log1p.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalAnd.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalNot.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalOr.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRN.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRNGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Maximum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3DGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Min.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Minimum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MirrorPad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mod.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RealDiv.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sub.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softmax.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multinomial.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Neg.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OneHot.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ZerosLike.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OnesLike.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pack.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/PadV2.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pow.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prod.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Range.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reciprocal.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu6.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinear.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinearGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighbor.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighborGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reverse.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Round.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Rsqrt.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ScatterNd.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Select.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Selu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sigmoid.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sign.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sin.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sinh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softplus.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SpaceToBatchND.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseFillEmptyRows.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseReshape.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseSegmentMean.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseSegmentSum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseToDense.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SplitV.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sqrt.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Step.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StridedSlice.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringNGrams.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringSplit.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringToHashBucketFast.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tan.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tanh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tile.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/top_k_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/TopK.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/transform_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transform.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unique.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unpack.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/UnsortedSegmentSum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/index.js","../node_modules/@100mslive/hms-virtual-background/dist/index.js","../node_modules/gifuct-js/lib/deinterlace.js","../node_modules/gifuct-js/lib/index.js","../node_modules/gifuct-js/lib/lzw.js","../node_modules/js-binary-schema-parser/lib/index.js","../node_modules/js-binary-schema-parser/lib/parsers/uint8.js","../node_modules/js-binary-schema-parser/lib/schemas/gif.js","../node_modules/long/src/long.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage {\n    constructor(backend, dataMover) {\n        this.backend = backend;\n        this.dataMover = dataMover;\n        this.data = new WeakMap();\n        this.dataIdsCount = 0;\n    }\n    get(dataId) {\n        if (!this.data.has(dataId)) {\n            this.dataMover.moveData(this.backend, dataId);\n        }\n        return this.data.get(dataId);\n    }\n    set(dataId, value) {\n        this.dataIdsCount++;\n        this.data.set(dataId, value);\n    }\n    has(dataId) {\n        return this.data.has(dataId);\n    }\n    delete(dataId) {\n        this.dataIdsCount--;\n        return this.data.delete(dataId);\n    }\n    numDataIds() {\n        return this.dataIdsCount;\n    }\n}\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend {\n    refCount(dataId) {\n        return notYetImplemented('refCount');\n    }\n    incRef(dataId) {\n        return notYetImplemented('incRef');\n    }\n    timerAvailable() {\n        return true;\n    }\n    time(f) {\n        return notYetImplemented('time');\n    }\n    read(dataId) {\n        return notYetImplemented('read');\n    }\n    readSync(dataId) {\n        return notYetImplemented('readSync');\n    }\n    readToGPU(dataId, options) {\n        return notYetImplemented('readToGPU');\n    }\n    numDataIds() {\n        return notYetImplemented('numDataIds');\n    }\n    disposeData(dataId, force) {\n        return notYetImplemented('disposeData');\n    }\n    write(values, shape, dtype) {\n        return notYetImplemented('write');\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        return notYetImplemented('move');\n    }\n    memory() {\n        return notYetImplemented('memory');\n    }\n    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n    floatPrecision() {\n        return notYetImplemented('floatPrecision');\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    dispose() {\n        return notYetImplemented('dispose');\n    }\n}\nfunction notYetImplemented(kernelName) {\n    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +\n        `This kernel may not be supported by the tfjs backend you have chosen`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n    let counter = array.length;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element with it\n        swap(array, counter, index);\n    }\n}\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function shuffleCombo(\n// tslint:disable-next-line:no-any\narray, \n// tslint:disable-next-line:no-any\narray2) {\n    if (array.length !== array2.length) {\n        throw new Error(`Array sizes must match to be shuffled together ` +\n            `First array length was ${array.length}` +\n            `Second array length was ${array2.length}`);\n    }\n    let counter = array.length;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element of each array with it\n        swap(array, counter, index);\n        swap(array2, counter, index);\n    }\n}\n/** Clamps a value to a specified range. */\nexport function clamp(min, x, max) {\n    return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n    return val % 2 === 0 ? val : val + 1;\n}\nexport function swap(object, left, right) {\n    const temp = object[left];\n    object[left] = object[right];\n    object[right] = temp;\n}\nexport function sum(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a, b) {\n    const r = Math.random();\n    return (b * r) + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a, b) {\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n        const diff = Number(a[i]) - Number(b[i]);\n        result += diff * diff;\n    }\n    return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr, msg) {\n    if (!expr) {\n        throw new Error(typeof msg === 'string' ? msg : msg());\n    }\n}\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\n    assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n    assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n}\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function flatten(arr, result = [], skipTypedArray = false) {\n    if (result == null) {\n        result = [];\n    }\n    if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n        for (let i = 0; i < arr.length; ++i) {\n            flatten(arr[i], result, skipTypedArray);\n        }\n    }\n    else {\n        result.push(arr);\n    }\n    return result;\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape) {\n    if (shape.length === 0) {\n        // Scalar.\n        return 1;\n    }\n    let size = shape[0];\n    for (let i = 1; i < shape.length; i++) {\n        size *= shape[i];\n    }\n    return size;\n}\nexport function isScalarShape(shape) {\n    return shape.length === 0;\n}\nexport function arraysEqual(n1, n2) {\n    if (n1 === n2) {\n        return true;\n    }\n    if (n1 == null || n2 == null) {\n        return false;\n    }\n    if (n1.length !== n2.length) {\n        return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n        if (n1[i] !== n2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isInt(a) {\n    return a % 1 === 0;\n}\nexport function tanh(x) {\n    // tslint:disable-next-line:no-any\n    if (Math.tanh != null) {\n        // tslint:disable-next-line:no-any\n        return Math.tanh(x);\n    }\n    if (x === Infinity) {\n        return 1;\n    }\n    else if (x === -Infinity) {\n        return -1;\n    }\n    else {\n        const e2x = Math.exp(2 * x);\n        return (e2x - 1) / (e2x + 1);\n    }\n}\nexport function sizeToSquarishShape(size) {\n    const width = Math.ceil(Math.sqrt(size));\n    return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indicies to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indicies to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n) {\n    const shuffledIndices = new Uint32Array(n);\n    for (let i = 0; i < n; ++i) {\n        shuffledIndices[i] = i;\n    }\n    shuffle(shuffledIndices);\n    return shuffledIndices;\n}\nexport function rightPad(a, size) {\n    if (size <= a.length) {\n        return a;\n    }\n    return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter) {\n    return new Promise((resolve, reject) => {\n        let tryCount = 0;\n        const tryFn = () => {\n            if (checkFn()) {\n                resolve();\n                return;\n            }\n            tryCount++;\n            const nextBackoff = delayFn(tryCount);\n            if (maxCounter != null && tryCount >= maxCounter) {\n                reject();\n                return;\n            }\n            setTimeout(tryFn, nextBackoff);\n        };\n        tryFn();\n    });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(shape, size) {\n    let shapeProd = 1;\n    let implicitIdx = -1;\n    for (let i = 0; i < shape.length; ++i) {\n        if (shape[i] >= 0) {\n            shapeProd *= shape[i];\n        }\n        else if (shape[i] === -1) {\n            if (implicitIdx !== -1) {\n                throw Error(`Shapes can only have 1 implicit size. ` +\n                    `Found -1 at dim ${implicitIdx} and dim ${i}`);\n            }\n            implicitIdx = i;\n        }\n        else if (shape[i] < 0) {\n            throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n        }\n    }\n    if (implicitIdx === -1) {\n        if (size > 0 && size !== shapeProd) {\n            throw Error(`Size(${size}) must match the product of shape ${shape}`);\n        }\n        return shape;\n    }\n    if (shapeProd === 0) {\n        throw Error(`Cannot infer the missing size in [${shape}] when ` +\n            `there are 0 elements`);\n    }\n    if (size % shapeProd !== 0) {\n        throw Error(`The implicit shape can't be a fractional number. ` +\n            `Got ${size} / ${shapeProd}`);\n    }\n    const newShape = shape.slice();\n    newShape[implicitIdx] = size / shapeProd;\n    return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n    const rank = shape.length;\n    // Normalize input\n    axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n    // Check for valid range\n    assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n        `got axis ${axis}`);\n    // Check for only integers\n    assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +\n        `got axis ${axis}`);\n    // Handle negative axis.\n    return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape, axis) {\n    const newShape = [];\n    const keptDims = [];\n    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n    const axes = (axis == null || isEmptyArray) ?\n        null :\n        parseAxisParam(axis, shape).sort();\n    let j = 0;\n    for (let i = 0; i < shape.length; ++i) {\n        if (axes != null) {\n            if (axes[j] === i && shape[i] !== 1) {\n                throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n            }\n            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n                newShape.push(shape[i]);\n                keptDims.push(i);\n            }\n            if (axes[j] <= i) {\n                j++;\n            }\n        }\n        if (shape[i] !== 1) {\n            newShape.push(shape[i]);\n            keptDims.push(i);\n        }\n    }\n    return { newShape, keptDims };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function getArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else if (dtype === 'string') {\n        values = new Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n        }\n    }\n}\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype) {\n    return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n        dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType, newType) {\n    if (newType === 'complex64') {\n        return false;\n    }\n    if (newType === 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'bool' && oldType === 'bool') {\n        return false;\n    }\n    return true;\n}\nexport function isTypedArray(a) {\n    return a instanceof Float32Array || a instanceof Int32Array ||\n        a instanceof Uint8Array || a instanceof Uint8ClampedArray;\n}\nexport function bytesPerElement(dtype) {\n    if (dtype === 'float32' || dtype === 'int32') {\n        return 4;\n    }\n    else if (dtype === 'complex64') {\n        return 8;\n    }\n    else if (dtype === 'bool') {\n        return 1;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS is\n * not possible since it depends on the encoding of the html page that serves\n * the website.\n */\nexport function bytesFromStringArray(arr) {\n    if (arr == null) {\n        return 0;\n    }\n    let bytes = 0;\n    arr.forEach(x => bytes += x.length);\n    return bytes;\n}\n/** Returns true if the value is a string. */\nexport function isString(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n    return typeof value === 'number';\n}\nexport function inferDtype(values) {\n    if (Array.isArray(values)) {\n        return inferDtype(values[0]);\n    }\n    if (values instanceof Float32Array) {\n        return 'float32';\n    }\n    else if (values instanceof Int32Array\n        || values instanceof Uint8Array\n        || values instanceof Uint8ClampedArray) {\n        return 'int32';\n    }\n    else if (isNumber(values)) {\n        return 'float32';\n    }\n    else if (isString(values)) {\n        return 'string';\n    }\n    else if (isBoolean(values)) {\n        return 'bool';\n    }\n    return 'float32';\n}\nexport function isFunction(f) {\n    return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n    for (let i = start; i < size; ++i) {\n        if (size % i === 0) {\n            return i;\n        }\n    }\n    return size;\n}\nexport function computeStrides(shape) {\n    const rank = shape.length;\n    if (rank < 2) {\n        return [];\n    }\n    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n    // strides.\n    const strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n        strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    return strides;\n}\nfunction createNestedArray(offset, shape, a, isComplex = false) {\n    const ret = new Array();\n    if (shape.length === 1) {\n        const d = shape[0] * (isComplex ? 2 : 1);\n        for (let i = 0; i < d; i++) {\n            ret[i] = a[offset + i];\n        }\n    }\n    else {\n        const d = shape[0];\n        const rest = shape.slice(1);\n        const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n        for (let i = 0; i < d; i++) {\n            ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n        }\n    }\n    return ret;\n}\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(shape, a, isComplex = false) {\n    if (shape.length === 0) {\n        // Scalar type should return a single number.\n        return a[0];\n    }\n    const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n    if (size === 0) {\n        // A tensor with shape zero should be turned into empty list.\n        return [];\n    }\n    if (size !== a.length) {\n        throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? ' for a complex tensor' : ''}.`);\n    }\n    return createNestedArray(0, shape, a, isComplex);\n}\nexport function makeOnesTypedArray(size, dtype) {\n    const array = makeZerosTypedArray(size, dtype);\n    for (let i = 0; i < array.length; i++) {\n        array[i] = 1;\n    }\n    return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        return new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray(shape, dtype) {\n    const size = shape.reduce((prev, curr) => prev * curr, 1);\n    if (dtype == null || dtype === 'float32') {\n        return toNestedArray(shape, new Float32Array(size));\n    }\n    else if (dtype === 'int32') {\n        return toNestedArray(shape, new Int32Array(size));\n    }\n    else if (dtype === 'bool') {\n        return toNestedArray(shape, new Uint8Array(size));\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n    shape.forEach(dimSize => {\n        assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n    });\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(locs, rank, strides) {\n    if (rank === 0) {\n        return 0;\n    }\n    else if (rank === 1) {\n        return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n        index += strides[i] * locs[i];\n    }\n    return index;\n}\n/**\n * Computes the location (multidimensional index) in a tensor/multidimentional\n * array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(index, rank, strides) {\n    if (rank === 0) {\n        return [];\n    }\n    else if (rank === 1) {\n        return [index];\n    }\n    const locs = new Array(rank);\n    for (let i = 0; i < locs.length - 1; ++i) {\n        locs[i] = Math.floor(index / strides[i]);\n        index -= locs[i] * strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n}\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object) {\n    //  We chose to not use 'obj instanceOf Promise' for two reasons:\n    //  1. It only reliably works for es6 Promise, not other Promise\n    //  implementations.\n    //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch\n    //  the async calls, so it is possible the obj (patched) is comparing to a\n    //  pre-patched Promise.\n    return object && object.then && typeof object.then === 'function';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isPromise } from './util_base';\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n    // tslint:disable-next-line: no-any\n    constructor(global) {\n        this.global = global;\n        this.flags = {};\n        this.flagRegistry = {};\n        this.urlFlags = {};\n        // Jasmine spies on this in 'environment_test.ts'\n        this.getQueryParams = getQueryParams;\n        this.populateURLFlags();\n    }\n    setPlatform(platformName, platform) {\n        if (this.platform != null) {\n            if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n                console.warn(`Platform ${this.platformName} has already been set. ` +\n                    `Overwriting the platform with ${platform}.`);\n            }\n        }\n        this.platformName = platformName;\n        this.platform = platform;\n    }\n    registerFlag(flagName, evaluationFn, setHook) {\n        this.flagRegistry[flagName] = { evaluationFn, setHook };\n        // Override the flag value from the URL. This has to happen here because\n        // the environment is initialized before flags get registered.\n        if (this.urlFlags[flagName] != null) {\n            const flagValue = this.urlFlags[flagName];\n            if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n                console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n            }\n            this.set(flagName, flagValue);\n        }\n    }\n    async getAsync(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        this.flags[flagName] = await this.evaluateFlag(flagName);\n        return this.flags[flagName];\n    }\n    get(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        const flagValue = this.evaluateFlag(flagName);\n        if (isPromise(flagValue)) {\n            throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` +\n                `Please use getAsync() instead.`);\n        }\n        this.flags[flagName] = flagValue;\n        return this.flags[flagName];\n    }\n    getNumber(flagName) {\n        return this.get(flagName);\n    }\n    getBool(flagName) {\n        return this.get(flagName);\n    }\n    getFlags() {\n        return this.flags;\n    }\n    // For backwards compatibility.\n    get features() {\n        return this.flags;\n    }\n    set(flagName, value) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n        }\n        this.flags[flagName] = value;\n        if (this.flagRegistry[flagName].setHook != null) {\n            this.flagRegistry[flagName].setHook(value);\n        }\n    }\n    evaluateFlag(flagName) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n        }\n        return this.flagRegistry[flagName].evaluationFn();\n    }\n    setFlags(flags) {\n        this.flags = Object.assign({}, flags);\n    }\n    reset() {\n        this.flags = {};\n        this.urlFlags = {};\n        this.populateURLFlags();\n    }\n    populateURLFlags() {\n        if (typeof this.global === 'undefined' ||\n            typeof this.global.location === 'undefined' ||\n            typeof this.global.location.search === 'undefined') {\n            return;\n        }\n        const urlParams = this.getQueryParams(this.global.location.search);\n        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n            keyValues.forEach(keyValue => {\n                const [key, value] = keyValue.split(':');\n                this.urlFlags[key] = parseValue(key, value);\n            });\n        }\n    }\n}\nexport function getQueryParams(queryString) {\n    const params = {};\n    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n        decodeParam(params, t[0], t[1]);\n        return t.join('=');\n    });\n    return params;\n}\nfunction decodeParam(params, name, value) {\n    params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\nfunction parseValue(flagName, value) {\n    value = value.toLowerCase();\n    if (value === 'true' || value === 'false') {\n        return value === 'true';\n    }\n    else if (`${+value}` === value) {\n        return +value;\n    }\n    throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n    return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n    ENV = environment;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace;\n// tslint:disable-next-line:no-any\nexport function getGlobalNamespace() {\n    if (globalNameSpace == null) {\n        // tslint:disable-next-line:no-any\n        let ns;\n        if (typeof (window) !== 'undefined') {\n            ns = window;\n        }\n        else if (typeof (global) !== 'undefined') {\n            ns = global;\n        }\n        else if (typeof (process) !== 'undefined') {\n            ns = process;\n        }\n        else if (typeof (self) !== 'undefined') {\n            ns = self;\n        }\n        else {\n            throw new Error('Could not find a global object');\n        }\n        globalNameSpace = ns;\n    }\n    return globalNameSpace;\n}\n// tslint:disable-next-line:no-any\nfunction getGlobalMap() {\n    const ns = getGlobalNamespace();\n    if (ns._tfGlobals == null) {\n        ns._tfGlobals = new Map();\n    }\n    return ns._tfGlobals;\n}\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\nexport function getGlobal(key, init) {\n    const globalMap = getGlobalMap();\n    if (globalMap.has(key)) {\n        return globalMap.get(key);\n    }\n    else {\n        const singleton = init();\n        globalMap.set(key, singleton);\n        return globalMap.get(key);\n    }\n}\n","export const Abs = 'Abs';\nexport const Acos = 'Acos';\nexport const Acosh = 'Acosh';\nexport const Add = 'Add';\nexport const AddN = 'AddN';\nexport const All = 'All';\nexport const Any = 'Any';\nexport const ArgMax = 'ArgMax';\nexport const ArgMin = 'ArgMin';\nexport const Asin = 'Asin';\nexport const Asinh = 'Asinh';\nexport const Atan = 'Atan';\nexport const Atanh = 'Atanh';\nexport const Atan2 = 'Atan2';\nexport const AvgPool = 'AvgPool';\nexport const AvgPoolGrad = 'AvgPoolGrad';\nexport const AvgPool3D = 'AvgPool3D';\nexport const AvgPool3DGrad = 'AvgPool3DGrad';\nexport const BatchMatMul = 'BatchMatMul';\nexport const BatchToSpaceND = 'BatchToSpaceND';\nexport const Bincount = 'Bincount';\nexport const BroadcastTo = 'BroadcastTo';\nexport const BroadcastArgs = 'BroadcastArgs';\nexport const Cast = 'Cast';\nexport const Ceil = 'Ceil';\nexport const ClipByValue = 'ClipByValue';\nexport const Complex = 'Complex';\nexport const ComplexAbs = 'ComplexAbs';\nexport const Concat = 'Concat';\nexport const Conv2D = 'Conv2D';\nexport const Conv2DBackpropFilter = 'Conv2DBackpropFilter';\nexport const Conv2DBackpropInput = 'Conv2DBackpropInput';\nexport const Conv3D = 'Conv3D';\nexport const Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';\nexport const Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';\nexport const Cos = 'Cos';\nexport const Cosh = 'Cosh';\nexport const Cumsum = 'Cumsum';\nexport const CropAndResize = 'CropAndResize';\nexport const DenseBincount = 'DenseBincount';\nexport const DepthToSpace = 'DepthToSpace';\nexport const DepthwiseConv2dNative = 'DepthwiseConv2dNative';\nexport const DepthwiseConv2dNativeBackpropFilter = 'DepthwiseConv2dNativeBackpropFilter';\nexport const DepthwiseConv2dNativeBackpropInput = 'DepthwiseConv2dNativeBackpropInput';\nexport const Diag = 'Diag';\nexport const Dilation2D = 'Dilation2D';\nexport const Dilation2DBackpropInput = 'Dilation2DBackpropInput';\nexport const Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';\nexport const RealDiv = 'RealDiv';\nexport const Einsum = 'Einsum';\nexport const Elu = 'Elu';\nexport const EluGrad = 'EluGrad';\nexport const Erf = 'Erf';\nexport const Equal = 'Equal';\nexport const Exp = 'Exp';\nexport const ExpandDims = 'ExpandDims';\nexport const Expm1 = 'Expm1';\nexport const FFT = 'FFT';\nexport const Fill = 'Fill';\nexport const FlipLeftRight = 'FlipLeftRight';\nexport const Floor = 'Floor';\nexport const FloorDiv = 'FloorDiv';\nexport const FusedBatchNorm = 'FusedBatchNorm';\nexport const GatherV2 = 'GatherV2';\nexport const GatherNd = 'GatherNd';\nexport const Greater = 'Greater';\nexport const GreaterEqual = 'GreaterEqual';\nexport const Identity = 'Identity';\nexport const IFFT = 'IFFT';\nexport const Imag = 'Imag';\nexport const IsFinite = 'IsFinite';\nexport const IsInf = 'IsInf';\nexport const IsNan = 'IsNan';\nexport const LeakyRelu = 'LeakyRelu';\nexport const Less = 'Less';\nexport const LessEqual = 'LessEqual';\nexport const LinSpace = 'LinSpace';\nexport const Log = 'Log';\nexport const Log1p = 'Log1p';\nexport const LogicalAnd = 'LogicalAnd';\nexport const LogicalNot = 'LogicalNot';\nexport const LogicalOr = 'LogicalOr';\nexport const LogSoftmax = 'LogSoftmax';\nexport const LRN = 'LRN';\nexport const LRNGrad = 'LRNGrad';\nexport const Max = 'Max';\nexport const Maximum = 'Maximum';\nexport const MaxPool = 'MaxPool';\nexport const MaxPoolGrad = 'MaxPoolGrad';\nexport const MaxPool3D = 'MaxPool3D';\nexport const MaxPool3DGrad = 'MaxPool3DGrad';\nexport const MaxPoolWithArgmax = 'MaxPoolWithArgmax';\nexport const Mean = 'Mean';\nexport const Min = 'Min';\nexport const Minimum = 'Minimum';\nexport const MirrorPad = 'MirrorPad';\nexport const Mod = 'Mod';\nexport const Multinomial = 'Multinomial';\nexport const Multiply = 'Multiply';\nexport const Neg = 'Neg';\nexport const NotEqual = 'NotEqual';\nexport const NonMaxSuppressionV3 = 'NonMaxSuppressionV3';\nexport const NonMaxSuppressionV4 = 'NonMaxSuppressionV4';\nexport const NonMaxSuppressionV5 = 'NonMaxSuppressionV5';\nexport const OnesLike = 'OnesLike';\nexport const OneHot = 'OneHot';\nexport const Pack = 'Pack';\nexport const PadV2 = 'PadV2';\nexport const Pool = 'Pool';\nexport const Pow = 'Pow';\nexport const Prelu = 'Prelu';\nexport const Prod = 'Prod';\nexport const Range = 'Range';\nexport const Real = 'Real';\nexport const Reciprocal = 'Reciprocal';\nexport const Relu = 'Relu';\nexport const Reshape = 'Reshape';\nexport const ResizeNearestNeighbor = 'ResizeNearestNeighbor';\nexport const ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';\nexport const ResizeBilinear = 'ResizeBilinear';\nexport const ResizeBilinearGrad = 'ResizeBilinearGrad';\nexport const Relu6 = 'Relu6';\nexport const Reverse = 'Reverse';\nexport const Round = 'Round';\nexport const Rsqrt = 'Rsqrt';\nexport const ScatterNd = 'ScatterNd';\nexport const Select = 'Select';\nexport const Selu = 'Selu';\nexport const Slice = 'Slice';\nexport const Sin = 'Sin';\nexport const Sinh = 'Sinh';\nexport const Sign = 'Sign';\nexport const Sigmoid = 'Sigmoid';\nexport const Softplus = 'Softplus';\nexport const Sqrt = 'Sqrt';\nexport const Sum = 'Sum';\nexport const SpaceToBatchND = 'SpaceToBatchND';\nexport const SplitV = 'SplitV';\nexport const Softmax = 'Softmax';\nexport const SparseFillEmptyRows = 'SparseFillEmptyRows';\nexport const SparseReshape = 'SparseReshape';\nexport const SparseSegmentMean = 'SparseSegmentMean';\nexport const SparseSegmentSum = 'SparseSegmentSum';\nexport const SparseToDense = 'SparseToDense';\nexport const SquaredDifference = 'SquaredDifference';\nexport const Square = 'Square';\nexport const StridedSlice = 'StridedSlice';\nexport const StringNGrams = 'StringNGrams';\nexport const StringSplit = 'StringSplit';\nexport const StringToHashBucketFast = 'StringToHashBucketFast';\nexport const Sub = 'Sub';\nexport const Tan = 'Tan';\nexport const Tanh = 'Tanh';\nexport const Tile = 'Tile';\nexport const TopK = 'TopK';\nexport const Transform = 'Transform';\nexport const Transpose = 'Transpose';\nexport const Unique = 'Unique';\nexport const Unpack = 'Unpack';\nexport const UnsortedSegmentSum = 'UnsortedSegmentSum';\nexport const ZerosLike = 'ZerosLike';\n/**\n * TensorFlow.js-only kernels\n */\nexport const Step = 'Step';\nexport const FromPixels = 'FromPixels';\nexport const RotateWithOffset = 'RotateWithOffset';\nexport const _FusedMatMul = '_FusedMatMul';\nexport const FusedConv2D = 'FusedConv2D';\nexport const FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nexport function warn(...msg) {\n    if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(...msg);\n    }\n}\nexport function log(...msg) {\n    if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.log(...msg);\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nimport * as log from './log';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName) {\n    return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n    const it = kernelRegistry.entries();\n    const result = [];\n    while (true) {\n        const { done, value } = it.next();\n        if (done) {\n            break;\n        }\n        const [key, config] = value;\n        const [backend,] = key.split('_');\n        if (backend === backendName) {\n            result.push(config);\n        }\n    }\n    return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config) {\n    const { kernelName, backendName } = config;\n    const key = makeKey(kernelName, backendName);\n    if (kernelRegistry.has(key)) {\n        log.warn(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is already registered`);\n    }\n    kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config) {\n    const { kernelName } = config;\n    if (gradRegistry.has(kernelName)) {\n        // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n        // to debug mode.\n        if (env().getBool('DEBUG')) {\n            log.warn(`Overriding the gradient for '${kernelName}'`);\n        }\n    }\n    gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    if (!kernelRegistry.has(key)) {\n        throw new Error(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is not registered`);\n    }\n    kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName) {\n    if (!gradRegistry.has(kernelName)) {\n        throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n    }\n    gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n    const kernels = getKernelsForBackend(registeredBackendName);\n    kernels.forEach(kernelConfig => {\n        const newKernelConfig = Object.assign({}, kernelConfig, { backendName: newBackendName });\n        registerKernel(newKernelConfig);\n    });\n}\nfunction makeKey(kernelName, backendName) {\n    return `${backendName}_${kernelName}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for allowing cjs module to be included in bundle created by\n// rollup.\nimport * as LongExports from 'long';\n// tslint:disable-next-line\nconst Long = \n// tslint:disable-next-line\nLongExports.default || LongExports;\nexport function hexToLong(hex) {\n    return Long.fromString(hex, true, 16);\n}\n// Some primes between 2^63 and 2^64 for various uses.\n// Hex 0xc3a5c85c97cb3127\nconst k0 = hexToLong('c3a5c85c97cb3127');\n// Hex 0xb492b66fbe98f273\nconst k1 = hexToLong('b492b66fbe98f273');\n// Hex 0x9ae16a3b2f90404f\nconst k2 = hexToLong('9ae16a3b2f90404f');\nfunction shiftMix(val) {\n    return val.xor(val.shru(47));\n}\nfunction fetch(s, offset, numBytes) {\n    const bytes = s.slice(offset, offset + numBytes);\n    return Long.fromBytes(Array.from(bytes), true, true);\n}\nfunction fetch64(s, offset) {\n    return fetch(s, offset, 8);\n}\nfunction fetch32(s, offset) {\n    return fetch(s, offset, 4);\n}\nfunction rotate64(val, shift) {\n    // Avoid shifting by 64: doing so yields an undefined result.\n    return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\nfunction hashLen16(u, v, mul = hexToLong('9ddfea08eb382d69')) {\n    // Murmur-inspired hashing.\n    let a = u.xor(v).mul(mul);\n    a = a.xor(a.shru(47));\n    let b = v.xor(a).mul(mul);\n    b = b.xor(b.shru(47));\n    b = b.mul(mul);\n    return b;\n}\n// Return a 16-byte hash for 48 bytes.  Quick and dirty.\n// Callers do best to use \"random-looking\" values for a and b.\nfunction weakHashLen32WithSeeds(w, x, y, z, a, b) {\n    a = a.add(w);\n    b = rotate64(b.add(a).add(z), 21);\n    const c = a;\n    a = a.add(x);\n    a = a.add(y);\n    b = b.add(rotate64(a, 44));\n    return [a.add(z), b.add(c)];\n}\nfunction weakHashLen32WithSeedsStr(s, offset, a, b) {\n    return weakHashLen32WithSeeds(fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16), fetch64(s, offset + 24), a, b);\n}\nfunction hashLen0to16(s, len = s.length) {\n    if (len >= 8) {\n        const mul = k2.add(len * 2);\n        const a = fetch64(s, 0).add(k2);\n        const b = fetch64(s, len - 8);\n        const c = rotate64(b, 37).mul(mul).add(a);\n        const d = rotate64(a, 25).add(b).mul(mul);\n        return hashLen16(c, d, mul);\n    }\n    if (len >= 4) {\n        const mul = k2.add(len * 2);\n        const a = fetch32(s, 0);\n        return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);\n    }\n    if (len > 0) {\n        const a = s[0];\n        const b = s[len >> 1];\n        const c = s[len - 1];\n        const y = a + (b << 8);\n        const z = len + (c << 2);\n        return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n    }\n    return k2;\n}\nfunction hashLen17to32(s, len = s.length) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).mul(k1);\n    const b = fetch64(s, 8);\n    const c = fetch64(s, len - 8).mul(mul);\n    const d = fetch64(s, len - 16).mul(k2);\n    return hashLen16(rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d), a.add(rotate64(b.add(k2), 18)).add(c), mul);\n}\nfunction hashLen33to64(s, len = s.length) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).mul(k2);\n    const b = fetch64(s, 8);\n    const c = fetch64(s, len - 8).mul(mul);\n    const d = fetch64(s, len - 16).mul(k2);\n    const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n    const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);\n    const e = fetch64(s, 16).mul(mul);\n    const f = fetch64(s, 24);\n    const g = y.add(fetch64(s, len - 32)).mul(mul);\n    const h = z.add(fetch64(s, len - 24)).mul(mul);\n    return hashLen16(rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h), e.add(rotate64(f.add(a), 18)).add(g), mul);\n}\nexport function fingerPrint64(s, len = s.length) {\n    const seed = Long.fromNumber(81, true);\n    if (len <= 32) {\n        if (len <= 16) {\n            return hashLen0to16(s, len);\n        }\n        else {\n            return hashLen17to32(s, len);\n        }\n    }\n    else if (len <= 64) {\n        return hashLen33to64(s, len);\n    }\n    // For strings over 64 bytes we loop.  Internal state consists of\n    // 56 bytes: v, w, x, y, and z.\n    let x = seed;\n    let y = seed.mul(k1).add(113);\n    let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n    let v = [Long.UZERO, Long.UZERO];\n    let w = [Long.UZERO, Long.UZERO];\n    x = x.mul(k2).add(fetch64(s, 0));\n    let offset = 0;\n    // Set end so that after the loop we have 1 to 64 bytes left to process.\n    const end = ((len - 1) >> 6) * 64;\n    const last64 = end + ((len - 1) & 63) - 63;\n    do {\n        x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n        y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n        x = x.xor(w[1]);\n        y = y.add(v[0]).add(fetch64(s, offset + 40));\n        z = rotate64(z.add(w[0]), 33).mul(k1);\n        v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n        w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n        [z, x] = [x, z];\n        offset += 64;\n    } while (offset !== end);\n    const mul = k1.add(z.and(0xff).shl(1));\n    // Point to the last 64 bytes of input.\n    offset = last64;\n    w[0] = w[0].add((len - 1) & 63);\n    v[0] = v[0].add(w[0]);\n    w[0] = w[0].add(v[0]);\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);\n    x = x.xor(w[1].mul(9));\n    y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n    z = rotate64(z.add(w[0]), 33).mul(mul);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n    [z, x] = [x, z];\n    return hashLen16(hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z), hashLen16(v[1], w[1], mul).add(x), mul);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\nexport function createScalarValue(value, dtype) {\n    if (dtype === 'string') {\n        return encodeString(value);\n    }\n    return toTypedArray([value], dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n    return (a instanceof Float32Array && dtype === 'float32') ||\n        (a instanceof Int32Array && dtype === 'int32') ||\n        (a instanceof Uint8Array && dtype === 'bool');\n}\nexport function toTypedArray(a, dtype) {\n    if (dtype === 'string') {\n        throw new Error('Cannot convert a string[] to a TypedArray');\n    }\n    if (Array.isArray(a)) {\n        a = base.flatten(a);\n    }\n    if (env().getBool('DEBUG')) {\n        base.checkConversionForErrors(a, dtype);\n    }\n    if (noConversionNeeded(a, dtype)) {\n        return a;\n    }\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(a);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(a);\n    }\n    else if (dtype === 'bool') {\n        const bool = new Uint8Array(a.length);\n        for (let i = 0; i < bool.length; ++i) {\n            if (Math.round(a[i]) !== 0) {\n                bool[i] = 1;\n            }\n        }\n        return bool;\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now() {\n    return env().platform.now();\n}\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(path, requestInits) {\n    return env().platform.fetch(path, requestInits);\n}\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.encode(s, encoding);\n}\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.decode(bytes, encoding);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport class Profiler {\n    constructor(backendTimer, logger) {\n        this.backendTimer = backendTimer;\n        this.logger = logger;\n        if (logger == null) {\n            this.logger = new Logger();\n        }\n    }\n    profileKernel(kernelName, inputs, f) {\n        let outputs;\n        const holdResultWrapperFn = () => {\n            outputs = f();\n        };\n        let timer;\n        const start = util.now();\n        if (this.backendTimer.timerAvailable()) {\n            timer = this.backendTimer.time(holdResultWrapperFn);\n        }\n        else {\n            holdResultWrapperFn();\n            for (const output of outputs) {\n                output.dataSync();\n            }\n            timer = Promise.resolve({ kernelMs: util.now() - start });\n        }\n        if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n            for (let i = 0; i < outputs.length; i++) {\n                const output = outputs[i];\n                // Dangling promise here because we don't want to propagate up\n                // asynchronicity.\n                output.data().then(tensorVals => {\n                    checkComputationForErrors(tensorVals, output.dtype, kernelName);\n                });\n            }\n        }\n        const kernelProfile = {\n            kernelName,\n            outputs,\n            inputs,\n            timeMs: timer.then(timing => timing.kernelMs),\n            extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ?\n                timing.getExtraProfileInfo() :\n                '')\n        };\n        return kernelProfile;\n    }\n    logKernelProfile(kernelProfile) {\n        const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;\n        outputs.forEach(result => {\n            Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n                this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n            });\n        });\n    }\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n    if (dtype !== 'float32') {\n        // Only floating point computations will generate NaN values\n        return false;\n    }\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            // Throwing custom exception so behavior is testable.\n            console.warn(`Found ${num} in the result of '${kernelName}'`);\n            return true;\n        }\n    }\n    return false;\n}\nexport class Logger {\n    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n        const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n            timeMs['error'];\n        const paddedName = util.rightPad(name, 25);\n        const rank = result.rank;\n        const size = result.size;\n        const shape = util.rightPad(result.shape.toString(), 14);\n        let inputShapesDescription = '';\n        for (const name in inputs) {\n            const input = inputs[name];\n            if (input != null) {\n                // The input might be a non-tensor (e.g HTMLImageElement), in which case\n                // we claim the output shape as input shape.\n                const inputShape = input.shape || result.shape;\n                const inputRank = inputShape.length;\n                inputShapesDescription +=\n                    `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n            }\n        }\n        console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n    }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(tape, xs, y) {\n    // Forward pass to compute all the nodes and Tensors that are transitively a\n    // function of x.\n    const tensorsFromX = {};\n    const nodesFromX = {};\n    for (let i = 0; i < xs.length; i++) {\n        tensorsFromX[xs[i].id] = true;\n    }\n    for (let i = 0; i < tape.length; i++) {\n        const node = tape[i];\n        const nodeInputs = node.inputs;\n        for (const inputName in nodeInputs) {\n            const input = nodeInputs[inputName];\n            let anyInputFromX = false;\n            for (let j = 0; j < xs.length; j++) {\n                if (tensorsFromX[input.id]) {\n                    node.outputs.forEach(output => tensorsFromX[output.id] = true);\n                    anyInputFromX = true;\n                    nodesFromX[node.id] = true;\n                    break;\n                }\n            }\n            if (anyInputFromX) {\n                break;\n            }\n        }\n    }\n    // Backward pass to find all of the nodes and Tensors that lead to y.\n    const tensorsLeadToY = {};\n    tensorsLeadToY[y.id] = true;\n    const nodesToY = {};\n    for (let i = tape.length - 1; i >= 0; i--) {\n        const node = tape[i];\n        const nodeInputs = node.inputs;\n        // If any of the outputs lead to y, mark all of the inputs as leading to y.\n        for (let j = 0; j < node.outputs.length; j++) {\n            if (tensorsLeadToY[node.outputs[j].id]) {\n                for (const inputName in nodeInputs) {\n                    tensorsLeadToY[nodeInputs[inputName].id] = true;\n                    nodesToY[node.id] = true;\n                }\n                break;\n            }\n        }\n    }\n    // Return the paths that come from x and lead to y.\n    const filteredTape = [];\n    for (let i = 0; i < tape.length; i++) {\n        const node = tape[i];\n        if (nodesFromX[node.id] && nodesToY[node.id]) {\n            // Prune the inputs from the node that aren't a function of x.\n            const prunedInputs = {};\n            for (const inputName in node.inputs) {\n                const nodeInput = node.inputs[inputName];\n                if (tensorsFromX[nodeInput.id]) {\n                    prunedInputs[inputName] = nodeInput;\n                }\n            }\n            // Copy the node and overwrite inputsAndArgs to the pruned version.\n            const prunedNode = Object.assign({}, node);\n            prunedNode.inputs = prunedInputs;\n            prunedNode.outputs = node.outputs;\n            filteredTape.push(prunedNode);\n        }\n    }\n    return filteredTape;\n}\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {\n    // Walk the tape backward and keep a map of Tensor to its gradient.\n    for (let i = filteredTape.length - 1; i >= 0; i--) {\n        const node = filteredTape[i];\n        const dys = [];\n        node.outputs.forEach(o => {\n            const gradTensor = tensorAccumulatedGradientMap[o.id];\n            if (gradTensor != null) {\n                dys.push(gradTensor);\n            }\n            else {\n                // This particular output is not in the back-propagation subgraph, so it\n                // does not affect the final output, thus we put null for its dy.\n                dys.push(null);\n            }\n        });\n        if (node.gradient == null) {\n            throw new Error(`Cannot compute gradient: gradient function not found ` +\n                `for ${node.kernelName}.`);\n        }\n        // Backprop dy through this node and accumulate gradients over the inputs.\n        const inputGradients = node.gradient(dys);\n        for (const inputName in node.inputs) {\n            if (!(inputName in inputGradients)) {\n                throw new Error(`Cannot backprop through input ${inputName}. ` +\n                    `Available gradients found: ${Object.keys(inputGradients)}.`);\n            }\n            // Call the gradient function.\n            const dx = tidy(() => inputGradients[inputName]());\n            if (dx.dtype !== 'float32') {\n                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +\n                    `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n            }\n            const x = node.inputs[inputName];\n            if (!util.arraysEqual(dx.shape, x.shape)) {\n                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +\n                    `'${inputName}' has shape '${dx.shape}', which does not match ` +\n                    `the shape of the input '${x.shape}'`);\n            }\n            if (tensorAccumulatedGradientMap[x.id] == null) {\n                tensorAccumulatedGradientMap[x.id] = dx;\n            }\n            else {\n                const curGradient = tensorAccumulatedGradientMap[x.id];\n                tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n                curGradient.dispose();\n            }\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { computeStrides, isString, rightPad, sizeFromShape } from './util';\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\nexport function tensorToString(vals, shape, dtype, verbose) {\n    const strides = computeStrides(shape);\n    const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n    const rank = shape.length;\n    const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n    const lines = ['Tensor'];\n    if (verbose) {\n        lines.push(`  dtype: ${dtype}`);\n        lines.push(`  rank: ${rank}`);\n        lines.push(`  shape: [${shape}]`);\n        lines.push(`  values:`);\n    }\n    lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n    return lines.join('\\n');\n}\nfunction computeMaxSizePerColumn(vals, shape, dtype, strides) {\n    const n = sizeFromShape(shape);\n    const numCols = strides[strides.length - 1];\n    const padPerCol = new Array(numCols).fill(0);\n    const rank = shape.length;\n    const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;\n    if (rank > 1) {\n        for (let row = 0; row < n / numCols; row++) {\n            const offset = row * numCols;\n            for (let j = 0; j < numCols; j++) {\n                padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);\n            }\n        }\n    }\n    return padPerCol;\n}\nfunction valToString(val, pad, dtype) {\n    let valStr;\n    if (Array.isArray(val)) {\n        valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +\n            `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n    }\n    else if (isString(val)) {\n        valStr = `'${val}'`;\n    }\n    else if (dtype === 'bool') {\n        valStr = boolNumToString(val);\n    }\n    else {\n        valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n    }\n    return rightPad(valStr, pad);\n}\nfunction boolNumToString(v) {\n    return v === 0 ? 'false' : 'true';\n}\nfunction subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {\n    const storagePerElement = dtype === 'complex64' ? 2 : 1;\n    const size = shape[0];\n    const rank = shape.length;\n    if (rank === 0) {\n        if (dtype === 'complex64') {\n            const complexTuple = createComplexTuples(vals);\n            return [valToString(complexTuple[0], 0, dtype)];\n        }\n        if (dtype === 'bool') {\n            return [boolNumToString(vals[0])];\n        }\n        return [vals[0].toString()];\n    }\n    if (rank === 1) {\n        if (size > FORMAT_LIMIT_NUM_VALS) {\n            const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n            let firstVals = Array.from(vals.slice(0, firstValsSize));\n            let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));\n            if (dtype === 'complex64') {\n                firstVals = createComplexTuples(firstVals);\n                lastVals = createComplexTuples(lastVals);\n            }\n            return [\n                '[' +\n                    firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n                        .join(', ') +\n                    ', ..., ' +\n                    lastVals\n                        .map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))\n                        .join(', ') +\n                    ']'\n            ];\n        }\n        const displayVals = dtype === 'complex64' ? createComplexTuples(vals) :\n            Array.from(vals);\n        return [\n            '[' +\n                displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n                    .join(', ') +\n                ']'\n        ];\n    }\n    // The array is rank 2 or more.\n    const subshape = shape.slice(1);\n    const substrides = strides.slice(1);\n    const stride = strides[0] * storagePerElement;\n    const lines = [];\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n        for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */));\n        }\n        lines.push('...');\n        for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n        }\n    }\n    else {\n        for (let i = 0; i < size; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n        }\n    }\n    const sep = rank === 2 ? ',' : '';\n    lines[0] = '[' + lines[0] + sep;\n    for (let i = 1; i < lines.length - 1; i++) {\n        lines[i] = ' ' + lines[i] + sep;\n    }\n    let newLineSep = ',\\n';\n    for (let i = 2; i < rank; i++) {\n        newLineSep += '\\n';\n    }\n    lines[lines.length - 1] =\n        ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n    return lines;\n}\nfunction createComplexTuples(vals) {\n    const complexTuples = [];\n    for (let i = 0; i < vals.length; i += 2) {\n        complexTuples.push([vals[i], vals[i + 1]]);\n    }\n    return complexTuples;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlobal } from './global_util';\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class TensorBuffer {\n    constructor(shape, dtype, values) {\n        this.dtype = dtype;\n        this.shape = shape.slice();\n        this.size = util.sizeFromShape(shape);\n        if (values != null) {\n            const n = values.length;\n            util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` +\n                `inferred by the shape '${this.size}'.`);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +\n                `a TensorBuffer for the real and imaginary parts separately and ` +\n                `call tf.complex(real, imag).`);\n        }\n        this.values = values || util.getArrayFromDType(dtype, this.size);\n        this.strides = computeStrides(shape);\n    }\n    /**\n     * Sets a value in the buffer at a given location.\n     *\n     * @param value The value to set.\n     * @param locs  The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    set(value, ...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n        const index = this.locToIndex(locs);\n        this.values[index] = value;\n    }\n    /**\n     * Returns the value in the buffer at the provided location.\n     *\n     * @param locs The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    get(...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        let i = 0;\n        for (const loc of locs) {\n            if (loc < 0 || loc >= this.shape[i]) {\n                const msg = `Requested out of range element at ${locs}. ` +\n                    `  Buffer shape=${this.shape}`;\n                throw new Error(msg);\n            }\n            i++;\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return this.values[index];\n    }\n    locToIndex(locs) {\n        if (this.rank === 0) {\n            return 0;\n        }\n        else if (this.rank === 1) {\n            return locs[0];\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return index;\n    }\n    indexToLoc(index) {\n        if (this.rank === 0) {\n            return [];\n        }\n        else if (this.rank === 1) {\n            return [index];\n        }\n        const locs = new Array(this.shape.length);\n        for (let i = 0; i < locs.length - 1; ++i) {\n            locs[i] = Math.floor(index / this.strides[i]);\n            index -= locs[i] * this.strides[i];\n        }\n        locs[locs.length - 1] = index;\n        return locs;\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Creates an immutable `tf.Tensor` object from the buffer.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    toTensor() {\n        return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n    }\n}\n// For tracking tensor creation and disposal.\nlet trackerFn = null;\n// Used by chaining methods to call into ops.\nlet opHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn) {\n    trackerFn = fn;\n}\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler) {\n    opHandler = handler;\n}\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn) {\n    deprecationWarningFn = fn;\n}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * For performance reasons, functions that create tensors do not necessarily\n * perform a copy of the data passed to them (e.g. if the data is passed as a\n * `Float32Array`), and changes to the data will change the tensor. This is not\n * a feature and is not supported. To avoid this behavior, use the tensor before\n * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Tensor {\n    constructor(shape, dtype, dataId, id) {\n        /** Whether this tensor has been globally kept. */\n        this.kept = false;\n        this.isDisposedInternal = false;\n        this.shape = shape.slice();\n        this.dtype = dtype || 'float32';\n        this.size = util.sizeFromShape(shape);\n        this.strides = computeStrides(shape);\n        this.dataId = dataId;\n        this.id = id;\n        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async buffer() {\n        const vals = await this.data();\n        return opHandler.buffer(this.shape, this.dtype, vals);\n    }\n    /**\n     * Returns a `tf.TensorBuffer` that holds the underlying data.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    bufferSync() {\n        return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * asynchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async array() {\n        const vals = await this.data();\n        return toNestedArray(this.shape, vals, this.dtype === 'complex64');\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * synchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    arraySync() {\n        return toNestedArray(this.shape, this.dataSync(), this.dtype === 'complex64');\n    }\n    /**\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n     * promise of `TypedArray` that resolves when the computation has finished.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async data() {\n        this.throwIfDisposed();\n        const data = trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            const bytes = await data;\n            try {\n                return bytes.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /**\n     * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`\n     * and `data()`, this method prevents data from being downloaded to CPU.\n     *\n     * For WebGL backend, the data will be stored on a densely packed texture.\n     * This means that the texture will use the RGBA channels to store value.\n     *\n     * @param options:\n     *     For WebGL,\n     *         - customTexShape: Optional. If set, will use the user defined\n     *     texture shape to create the texture.\n     *\n     * @returns For WebGL backend, a GPUData contains the new texture and\n     *     its information.\n     *     {\n     *        tensorRef: The tensor that is associated with this texture,\n     *        texture: WebGLTexture,\n     *        texShape: [number, number] // [height, width]\n     *     }\n     *     Remember to dispose the GPUData after it is used by\n     *     `res.tensorRef.dispose()`.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dataToGPU(options) {\n        this.throwIfDisposed();\n        return trackerFn().readToGPU(this.dataId, options);\n    }\n    /**\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n     * UI thread until the values are ready, which can cause performance issues.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dataSync() {\n        this.throwIfDisposed();\n        const data = trackerFn().readSync(this.dataId);\n        if (this.dtype === 'string') {\n            try {\n                return data.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /** Returns the underlying bytes of the tensor's data. */\n    async bytes() {\n        this.throwIfDisposed();\n        const data = await trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            return data;\n        }\n        else {\n            return new Uint8Array(data.buffer);\n        }\n    }\n    /**\n     * Disposes `tf.Tensor` from memory.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        trackerFn().disposeTensor(this);\n        this.isDisposedInternal = true;\n    }\n    get isDisposed() {\n        return this.isDisposedInternal;\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error(`Tensor is disposed.`);\n        }\n    }\n    /**\n     * Prints the `tf.Tensor`. See `tf.print` for details.\n     *\n     * @param verbose Whether to print verbose information about the tensor,\n     *    including dtype and size.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    print(verbose = false) {\n        return opHandler.print(this, verbose);\n    }\n    /**\n     * Returns a copy of the tensor. See `tf.clone` for details.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    clone() {\n        this.throwIfDisposed();\n        return opHandler.clone(this);\n    }\n    /**\n     * Returns a human-readable description of the tensor. Useful for logging.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    toString(verbose = false) {\n        const vals = this.dataSync();\n        return tensorToString(vals, this.shape, this.dtype, verbose);\n    }\n    cast(dtype) {\n        this.throwIfDisposed();\n        return opHandler.cast(this, dtype);\n    }\n    variable(trainable = true, name, dtype) {\n        this.throwIfDisposed();\n        return trackerFn().makeVariable(this, trainable, name, dtype);\n    }\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n    value: (instance) => {\n        // Implementation note: we should use properties of the object that will be\n        // defined before the constructor body has finished executing (methods).\n        // This is because when this code is transpiled by babel, babel will call\n        // classCallCheck before the constructor body is run.\n        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n        return !!instance && instance.data != null && instance.dataSync != null &&\n            instance.throwIfDisposed != null;\n    }\n});\nexport function getGlobalTensorClass() {\n    // Use getGlobal so that we can augment the Tensor class across package\n    // boundaries becase the node resolution alg may result in different modules\n    // being returned for this file depending on the path they are loaded from.\n    return getGlobal('Tensor', () => {\n        return Tensor;\n    });\n}\n// Global side effect. Cache global reference to Tensor class\ngetGlobalTensorClass();\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Variable extends Tensor {\n    constructor(initialValue, trainable, name, tensorId) {\n        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n        this.trainable = trainable;\n        this.name = name;\n    }\n    /**\n     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n     * the same shape and dtype as the old `tf.Tensor`.\n     *\n     * @param newValue New tensor to be assigned to this variable.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    assign(newValue) {\n        if (newValue.dtype !== this.dtype) {\n            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +\n                `previous value (${this.dtype}) must match`);\n        }\n        if (!util.arraysEqual(newValue.shape, this.shape)) {\n            throw new Error(`shape of the new value (${newValue.shape}) and ` +\n                `previous value (${this.shape}) must match`);\n        }\n        trackerFn().disposeTensor(this);\n        this.dataId = newValue.dataId;\n        trackerFn().incRef(this, null /* backend */);\n    }\n    dispose() {\n        trackerFn().disposeVariable(this);\n        this.isDisposedInternal = true;\n    }\n}\nObject.defineProperty(Variable, Symbol.hasInstance, {\n    value: (instance) => {\n        return instance instanceof Tensor && instance.assign != null &&\n            instance.assign instanceof Function;\n    }\n});\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Rank;\n(function (Rank) {\n    Rank[\"R0\"] = \"R0\";\n    Rank[\"R1\"] = \"R1\";\n    Rank[\"R2\"] = \"R2\";\n    Rank[\"R3\"] = \"R3\";\n    Rank[\"R4\"] = \"R4\";\n    Rank[\"R5\"] = \"R5\";\n    Rank[\"R6\"] = \"R6\";\n})(Rank || (Rank = {}));\n// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nvar UpcastInt32AndMap;\n(function (UpcastInt32AndMap) {\n    UpcastInt32AndMap[\"float32\"] = \"float32\";\n    UpcastInt32AndMap[\"int32\"] = \"int32\";\n    UpcastInt32AndMap[\"bool\"] = \"int32\";\n    UpcastInt32AndMap[\"complex64\"] = \"complex64\";\n})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));\nvar UpcastBoolAndMap;\n(function (UpcastBoolAndMap) {\n    UpcastBoolAndMap[\"float32\"] = \"float32\";\n    UpcastBoolAndMap[\"int32\"] = \"int32\";\n    UpcastBoolAndMap[\"bool\"] = \"bool\";\n    UpcastBoolAndMap[\"complex64\"] = \"complex64\";\n})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));\nvar UpcastFloat32AndMap;\n(function (UpcastFloat32AndMap) {\n    UpcastFloat32AndMap[\"float32\"] = \"float32\";\n    UpcastFloat32AndMap[\"int32\"] = \"float32\";\n    UpcastFloat32AndMap[\"bool\"] = \"float32\";\n    UpcastFloat32AndMap[\"complex64\"] = \"complex64\";\n})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));\nvar UpcastComplex64AndMap;\n(function (UpcastComplex64AndMap) {\n    UpcastComplex64AndMap[\"float32\"] = \"complex64\";\n    UpcastComplex64AndMap[\"int32\"] = \"complex64\";\n    UpcastComplex64AndMap[\"bool\"] = \"complex64\";\n    UpcastComplex64AndMap[\"complex64\"] = \"complex64\";\n})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));\nconst upcastTypeMap = {\n    'float32': UpcastFloat32AndMap,\n    'int32': UpcastInt32AndMap,\n    'bool': UpcastBoolAndMap,\n    'complex64': UpcastComplex64AndMap\n};\nexport function upcastType(typeA, typeB) {\n    if (typeA === 'string' || typeB === 'string') {\n        if (typeA === 'string' && typeB === 'string') {\n            return 'string';\n        }\n        throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n    }\n    return upcastTypeMap[typeA][typeB];\n}\n/** Returns the output type after summation. */\nexport function sumOutType(type) {\n    return upcastType(type, 'int32');\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tensor } from './tensor';\nimport { upcastType } from './types';\nimport { assert } from './util';\nexport function makeTypesMatch(a, b) {\n    if (a.dtype === b.dtype) {\n        return [a, b];\n    }\n    const dtype = upcastType(a.dtype, b.dtype);\n    return [a.cast(dtype), b.cast(dtype)];\n}\nexport function assertTypesMatch(a, b) {\n    assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` +\n        ` second(${b.dtype}) input must match`);\n}\nexport function isTensorInList(tensor, tensorList) {\n    return tensorList.some(x => x.id === tensor.id);\n}\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result) {\n    const list = [];\n    const seen = new Set();\n    walkTensorContainer(result, list, seen);\n    return list;\n}\nfunction walkTensorContainer(container, list, seen) {\n    if (container == null) {\n        return;\n    }\n    if (container instanceof Tensor) {\n        list.push(container);\n        return;\n    }\n    if (!isIterable(container)) {\n        return;\n    }\n    // Iteration over keys works also for arrays.\n    const iterable = container;\n    for (const k in iterable) {\n        const val = iterable[k];\n        if (!seen.has(val)) {\n            seen.add(val);\n            walkTensorContainer(val, list, seen);\n        }\n    }\n}\n// tslint:disable-next-line:no-any\nfunction isIterable(obj) {\n    return Array.isArray(obj) || typeof obj === 'object';\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast, Identity } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport * as log from './log';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n    return kernelInvocation.kernelName != null;\n}\nclass EngineState {\n    constructor() {\n        // Public since optimizers will use it.\n        this.registeredVariables = {};\n        this.nextTapeNodeId = 0;\n        this.numBytes = 0;\n        this.numTensors = 0;\n        this.numStringTensors = 0;\n        this.numDataBuffers = 0;\n        // Number of nested tf.grad() statements when computing higher-order\n        // gradients. E.g. `1` for first-order gradients and `2` for second-order\n        // gradients. Used to track if the tape should be removed after a backprop.\n        this.gradientDepth = 0;\n        // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n        // off the tape.\n        this.kernelDepth = 0;\n        this.scopeStack = [];\n        /**\n         * Keeps track of the number of data moves during a kernel execution. We\n         * maintain a stack since kernels can call other kernels, recursively.\n         */\n        this.numDataMovesStack = [];\n        this.nextScopeId = 0;\n        this.tensorInfo = new WeakMap();\n        this.profiling = false;\n        this.activeProfile = {\n            newBytes: 0,\n            newTensors: 0,\n            peakBytes: 0,\n            kernels: [],\n            result: null,\n            get kernelNames() {\n                return Array.from(new Set(this.kernels.map(k => k.name)));\n            }\n        };\n    }\n    dispose() {\n        for (const variableName in this.registeredVariables) {\n            this.registeredVariables[variableName].dispose();\n        }\n    }\n}\nexport class Engine {\n    constructor(ENV) {\n        this.ENV = ENV;\n        this.registry = {};\n        this.registryFactory = {};\n        this.pendingBackendInitId = 0;\n        this.state = new EngineState();\n    }\n    async ready() {\n        if (this.pendingBackendInit != null) {\n            return this.pendingBackendInit.then(() => { });\n        }\n        if (this.backendInstance != null) {\n            return;\n        }\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const success = await this.initializeBackend(backendName).success;\n            if (success) {\n                await this.setBackend(backendName);\n                return;\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    get backend() {\n        if (this.pendingBackendInit != null) {\n            throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +\n                `sure to await tf.ready() or await tf.setBackend() before calling ` +\n                `other methods`);\n        }\n        if (this.backendInstance == null) {\n            const { name, asyncInit } = this.initializeBackendsAndReturnBest();\n            if (asyncInit) {\n                throw new Error(`The highest priority backend '${name}' has not yet been ` +\n                    `initialized. Make sure to await tf.ready() or ` +\n                    `await tf.setBackend() before calling other methods`);\n            }\n            this.setBackend(name);\n        }\n        return this.backendInstance;\n    }\n    backendNames() {\n        return Object.keys(this.registryFactory);\n    }\n    findBackend(backendName) {\n        if (!(backendName in this.registry)) {\n            // If the backend hasn't been initialized but we have a registry entry for\n            // it, initialize it and return it.\n            if (backendName in this.registryFactory) {\n                const { asyncInit } = this.initializeBackend(backendName);\n                if (asyncInit) {\n                    // Backend is not ready yet.\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        return this.registry[backendName];\n    }\n    findBackendFactory(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            return null;\n        }\n        return this.registryFactory[backendName].factory;\n    }\n    registerBackend(backendName, factory, priority = 1) {\n        if (backendName in this.registryFactory) {\n            log.warn(`${backendName} backend was already registered. ` +\n                `Reusing existing backend factory.`);\n            return false;\n        }\n        this.registryFactory[backendName] = { factory, priority };\n        return true;\n    }\n    async setBackend(backendName) {\n        if (this.registryFactory[backendName] == null) {\n            throw new Error(`Backend name '${backendName}' not found in registry`);\n        }\n        this.backendName = backendName;\n        if (this.registry[backendName] == null) {\n            this.backendInstance = null;\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            const result = asyncInit ? await success : success;\n            if (!result) {\n                return false;\n            }\n        }\n        this.backendInstance = this.registry[backendName];\n        this.setupRegisteredKernels();\n        // Reset the profiler.\n        this.profiler = new Profiler(this.backendInstance);\n        return true;\n    }\n    setupRegisteredKernels() {\n        const kernels = getKernelsForBackend(this.backendName);\n        kernels.forEach(kernel => {\n            if (kernel.setupFunc != null) {\n                kernel.setupFunc(this.backendInstance);\n            }\n        });\n    }\n    disposeRegisteredKernels(backendName) {\n        const kernels = getKernelsForBackend(backendName);\n        kernels.forEach(kernel => {\n            if (kernel.disposeFunc != null) {\n                kernel.disposeFunc(this.registry[backendName]);\n            }\n        });\n    }\n    /**\n     * Initializes a backend by looking up the backend name in the factory\n     * registry and calling the factory method. Returns a boolean representing\n     * whether the initialization of the backend suceeded. Throws an error if\n     * there is no backend in the factory registry.\n     */\n    initializeBackend(backendName) {\n        const registryFactoryEntry = this.registryFactory[backendName];\n        if (registryFactoryEntry == null) {\n            throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n        }\n        try {\n            const backend = registryFactoryEntry.factory();\n            /* Test if the factory returns a promise.\n            Done in a more liberal way than\n            previous 'Promise.resolve(backend)===backend'\n            as we needed to account for custom Promise\n            implementations (e.g. Angular) */\n            if (backend && !(backend instanceof KernelBackend) &&\n                typeof backend.then === 'function') {\n                const promiseId = ++this.pendingBackendInitId;\n                const success = backend\n                    .then(backendInstance => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.registry[backendName] = backendInstance;\n                    this.pendingBackendInit = null;\n                    return true;\n                })\n                    .catch(err => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.pendingBackendInit = null;\n                    log.warn(`Initialization of backend ${backendName} failed`);\n                    log.warn(err.stack || err.message);\n                    return false;\n                });\n                this.pendingBackendInit = success;\n                return { success, asyncInit: true };\n            }\n            else {\n                this.registry[backendName] = backend;\n                return { success: true, asyncInit: false };\n            }\n        }\n        catch (err) {\n            log.warn(`Initialization of backend ${backendName} failed`);\n            log.warn(err.stack || err.message);\n            return { success: false, asyncInit: false };\n        }\n    }\n    removeBackend(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            throw new Error(`${backendName} backend not found in registry`);\n        }\n        if (this.backendName === backendName && this.pendingBackendInit != null) {\n            // There is a pending promise of the backend we want to remove. Make it\n            // obsolete.\n            this.pendingBackendInitId++;\n        }\n        if (backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        delete this.registryFactory[backendName];\n        // Unset the backend if it is active.\n        if (this.backendName === backendName) {\n            this.pendingBackendInit = null;\n            this.backendName = null;\n            this.backendInstance = null;\n        }\n    }\n    getSortedBackends() {\n        if (Object.keys(this.registryFactory).length === 0) {\n            throw new Error('No backend found in registry.');\n        }\n        return Object.keys(this.registryFactory).sort((a, b) => {\n            // Highest priority comes first.\n            return this.registryFactory[b].priority -\n                this.registryFactory[a].priority;\n        });\n    }\n    initializeBackendsAndReturnBest() {\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            if (asyncInit || success) {\n                return { name: backendName, asyncInit };\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    moveData(backend, dataId) {\n        const info = this.state.tensorInfo.get(dataId);\n        const srcBackend = info.backend;\n        const values = this.readSync(dataId);\n        const refCount = srcBackend.refCount(dataId);\n        // Delete the tensor from the old backend and move it to the new\n        // backend.\n        srcBackend.disposeData(dataId, true);\n        info.backend = backend;\n        backend.move(dataId, values, info.shape, info.dtype, refCount);\n        if (this.shouldCheckForMemLeaks()) {\n            // Track the number of moves during a kernel execution to correctly\n            // detect memory leaks.\n            this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n        }\n    }\n    tidy(nameOrFn, fn) {\n        let name = null;\n        if (fn == null) {\n            // Called with only 1 argument.\n            if (typeof nameOrFn !== 'function') {\n                throw new Error('Please provide a function to tidy()');\n            }\n            fn = nameOrFn;\n        }\n        else {\n            // Called with 2 arguments.\n            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n                throw new Error('When calling with two arguments, the first argument ' +\n                    'to tidy() must be a string');\n            }\n            if (typeof fn !== 'function') {\n                throw new Error('When calling with two arguments, the 2nd argument ' +\n                    'to tidy() must be a function');\n            }\n            name = nameOrFn;\n            // TODO(nsthorat,smilkov): Do operation logging and performance\n            // profiling.\n        }\n        let result;\n        return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n            result = fn();\n            if (result instanceof Promise) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            return result;\n        });\n    }\n    scopedRun(start, end, f) {\n        start();\n        try {\n            const res = f();\n            end();\n            return res;\n        }\n        catch (ex) {\n            end();\n            throw ex;\n        }\n    }\n    nextTensorId() {\n        return Engine.nextTensorId++;\n    }\n    nextVariableId() {\n        return Engine.nextVariableId++;\n    }\n    /**\n     * This method is called instead of the public-facing tensor.clone() when\n     * saving a tensor for backwards pass. It makes sure to add the clone\n     * operation to the tape regardless of being called inside a kernel\n     * execution.\n     */\n    clone(x) {\n        const y = ENGINE.runKernel(Identity, { x });\n        const inputs = { x };\n        const grad = (dy) => ({\n            x: () => {\n                const dtype = 'float32';\n                const gradInputs = { x: dy };\n                const attrs = { dtype };\n                return ENGINE.runKernel(Cast, gradInputs, \n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                attrs);\n            }\n        });\n        const saved = [];\n        this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n        return y;\n    }\n    /**\n     * Execute a kernel with the given name and return the output tensor.\n     *\n     * @param kernelName The name of the kernel to execute.\n     * @param inputs A map of input names to tensors.\n     * @param attrs A map of attribute names to their values. An attribute is a\n     *     primitive (non-tensor) input to the kernel.\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\n     *     computation.\n     * @param outputsToSave A list of booleans, specifying which output to save\n     *     for the backprop computation. These are booleans since the output\n     * tensors are not visible to the user.\n     */\n    runKernel(kernelName, inputs, attrs) {\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        const hasKernel = getKernel(kernelName, this.backendName) != null;\n        if (!hasKernel) {\n            throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);\n        }\n        return this.runKernelFunc({ kernelName, inputs, attrs });\n    }\n    shouldCheckForMemLeaks() {\n        return this.ENV.getBool('IS_TEST');\n    }\n    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n        const numDataIdsAfter = this.backend.numDataIds();\n        // Count the number of data ids associated with the result of the kernel.\n        let numOutputDataIds = 0;\n        outInfos.forEach(info => {\n            // Complex numbers allocate 3 data ids, one for 'real', one for\n            // 'imaginary', and one for the container that holds the former two.\n            numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n        });\n        // Account for the number of moves during kernel execution. A \"data move\"\n        // can happen in the middle of a kernel execution, placing a new (key,value)\n        // pair in the data storage. Since data moves have net zero effect (we\n        // always remove the data from the old backend), we have to cancel them out\n        // when detecting memory leaks.\n        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n        if (dataIdsLeaked > 0) {\n            throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +\n                `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n        }\n    }\n    /**\n     * Internal helper method to execute a kernel Func\n     *\n     * Use `runKernel` to execute kernels from outside of engine.\n     */\n    runKernelFunc(kernelParams) {\n        let outputs;\n        let saved = [];\n        const isTapeOn = this.isTapeOn();\n        const startingBytecount = this.state.numBytes;\n        const startingNumTensors = this.state.numTensors;\n        if (this.shouldCheckForMemLeaks()) {\n            this.state.numDataMovesStack.push(0);\n        }\n        let kernelFunc;\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        let out;\n        const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?\n            kernelParams.kernelName :\n            this.state.activeScope != null ? this.state.activeScope.name : '';\n        // Create the kernelFunc from either a registered kernel OR passed in\n        // forward/backward functions (used by custom grad). In this context a\n        // kernelFunc wraps a kernel implementation with some bookkeeping.\n        if (isRegisteredKernelInvocation(kernelParams)) {\n            const { kernelName, inputs, attrs } = kernelParams;\n            if (this.backendName == null) {\n                // backend has not been initialized yet (backend initialization is lazy\n                // can be deferred until an op/ kernel is run).\n                // The below getter has side effects that will try to initialize the\n                // backend and set properties like this.backendName\n                // tslint:disable-next-line: no-unused-expression\n                this.backend;\n            }\n            const kernel = getKernel(kernelName, this.backendName);\n            util.assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });\n                const outInfos = Array.isArray(out) ? out : [out];\n                if (this.shouldCheckForMemLeaks()) {\n                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n                }\n                const outTensors = outInfos.map((outInfo) => {\n                    // todo (yassogba) remove this option (Tensor) when node backend\n                    // methods have been modularized and they all return tensorInfo.\n                    // TensorInfos do not have a rank attribute.\n                    if (outInfo.rank != null) {\n                        return outInfo;\n                    }\n                    const { dataId, shape, dtype } = outInfo;\n                    return this.makeTensorFromDataId(dataId, shape, dtype);\n                });\n                // Save any required inputs and outputs.\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since there would be no backprop for these tensors\n                // (which would otherwise dispose them).\n                if (isTapeOn) {\n                    const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);\n                    saved = this.saveTensorsForBackwardMode(tensorsToSave);\n                }\n                return outTensors;\n            };\n        }\n        else {\n            const { forwardFunc } = kernelParams;\n            // Running a customGrad op.\n            const saveFunc = (tensors) => {\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since we would never run backprop, which disposes\n                // the kept tensors.\n                if (!isTapeOn) {\n                    return;\n                }\n                saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n            };\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n                const outs = (Array.isArray(out) ? out : [out]);\n                if (this.shouldCheckForMemLeaks()) {\n                    // Scope name is used to print a more helpful error message if needed.\n                    this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n                }\n                return outs;\n            };\n        }\n        //\n        // Run the kernelFunc. Optionally profiling it.\n        //\n        const { inputs, attrs } = kernelParams;\n        const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?\n            null :\n            kernelParams.backwardsFunc;\n        let kernelProfile;\n        this.scopedRun(\n        // Stop recording to a tape when running a kernel.\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n            if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n                outputs = kernelFunc();\n            }\n            else {\n                kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc());\n                if (this.ENV.getBool('DEBUG')) {\n                    this.profiler.logKernelProfile(kernelProfile);\n                }\n                outputs = kernelProfile.outputs;\n            }\n        });\n        if (isTapeOn) {\n            this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n        }\n        if (this.state.profiling) {\n            this.state.activeProfile.kernels.push({\n                name: kernelOrScopeName,\n                bytesAdded: this.state.numBytes - startingBytecount,\n                totalBytesSnapshot: this.state.numBytes,\n                tensorsAdded: this.state.numTensors - startingNumTensors,\n                totalTensorsSnapshot: this.state.numTensors,\n                inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),\n                outputShapes: outputs.map(item => item.shape),\n                kernelTimeMs: kernelProfile.timeMs,\n                extraInfo: kernelProfile.extraInfo\n            });\n        }\n        return (Array.isArray(out) ? outputs : outputs[0]);\n    }\n    /**\n     * Saves tensors used in forward mode for use in backward mode.\n     *\n     * @param tensors the list of tensors to save.\n     */\n    saveTensorsForBackwardMode(tensors) {\n        const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n        return saved;\n    }\n    /**\n     * Returns a list of tensors to save for a given gradient calculation.\n     *\n     * @param kernelName name of kernel to look up gradient for.\n     * @param inputs a map of input tensors.\n     * @param outputs an array of output tensors from forward mode of kernel.\n     */\n    getTensorsForGradient(kernelName, inputs, outputs) {\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            const inputsToSave = gradConfig.inputsToSave || [];\n            const outputsToSave = gradConfig.outputsToSave || [];\n            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n            // specified in inputsToSave will be saved.\n            let inputTensorsToSave;\n            if (gradConfig.saveAllInputs) {\n                util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');\n                inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n            }\n            else {\n                inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n            }\n            const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n            return inputTensorsToSave.concat(outputTensorsToSave);\n        }\n        // We return an empty list rather than throw an error because the kernel we\n        // are looking up may not actually be relevant to backproping through the\n        // overall function\n        //\n        // See 'does not error if irrelevant (pruned) ops are missing grads' test\n        // in gradients_test.ts for an example.\n        return [];\n    }\n    /**\n     * Internal method used by public APIs for tensor creation. Makes a new\n     * tensor with the provided shape, dtype and values. It always\n     * creates a new data id and writes the values to the underlying backend.\n     */\n    makeTensor(values, shape, dtype, backend) {\n        if (values == null) {\n            throw new Error('Values passed to engine.makeTensor() are null');\n        }\n        dtype = dtype || 'float32';\n        backend = backend || this.backend;\n        let backendVals = values;\n        if (dtype === 'string' && util.isString(values[0])) {\n            backendVals = values.map(d => util.encodeString(d));\n        }\n        const dataId = backend.write(backendVals, shape, dtype);\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        // Count bytes for string tensors.\n        if (dtype === 'string') {\n            const info = this.state.tensorInfo.get(dataId);\n            const newBytes = bytesFromStringArray(backendVals);\n            this.state.numBytes += newBytes - info.bytes;\n            info.bytes = newBytes;\n        }\n        return t;\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor\n     * that is a wrapper around an existing data id. It doesn't create\n     * a new data id, only increments the ref count used in memory tracking.\n     */\n    makeTensorFromDataId(dataId, shape, dtype, backend) {\n        dtype = dtype || 'float32';\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        return t;\n    }\n    makeVariable(initialValue, trainable = true, name, dtype) {\n        name = name || this.nextVariableId().toString();\n        if (dtype != null && dtype !== initialValue.dtype) {\n            initialValue = initialValue.cast(dtype);\n        }\n        const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n        if (this.state.registeredVariables[v.name] != null) {\n            throw new Error(`Variable with name ${v.name} was already registered`);\n        }\n        this.state.registeredVariables[v.name] = v;\n        this.incRef(v, this.backend);\n        return v;\n    }\n    trackTensor(a, backend) {\n        this.state.numTensors++;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors++;\n        }\n        // Bytes for complex numbers are counted by their components. Bytes for\n        // string tensors are counted when writing values.\n        let bytes = 0;\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            bytes = a.size * util.bytesPerElement(a.dtype);\n        }\n        this.state.numBytes += bytes;\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            this.state.numDataBuffers++;\n            this.state.tensorInfo.set(a.dataId, {\n                backend: backend || this.backend,\n                dtype: a.dtype,\n                shape: a.shape,\n                bytes\n            });\n        }\n        if (!(a instanceof Variable)) {\n            this.track(a);\n        }\n    }\n    // Track the tensor by dataId and increase the refCount for the dataId in the\n    // backend.\n    // TODO(pyu10055): This is currently used by makeVariable method, to increase\n    // refCount on the backend for the dataId. It can potentially be replaced with\n    // Identity op indead of calling backend directly.\n    incRef(a, backend) {\n        this.trackTensor(a, backend);\n        this.backend.incRef(a.dataId);\n    }\n    removeDataId(dataId, backend) {\n        if (this.state.tensorInfo.has(dataId) &&\n            this.state.tensorInfo.get(dataId).backend === backend) {\n            this.state.tensorInfo.delete(dataId);\n            this.state.numDataBuffers--;\n        }\n    }\n    disposeTensor(a) {\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            return;\n        }\n        const info = this.state.tensorInfo.get(a.dataId);\n        this.state.numTensors--;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors--;\n            this.state.numBytes -= info.bytes;\n        }\n        // Don't count bytes for complex numbers as they are counted by their\n        // components.\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            const bytes = a.size * util.bytesPerElement(a.dtype);\n            this.state.numBytes -= bytes;\n        }\n        // Remove the reference to dataId if backend dispose the data successfully\n        if (info.backend.disposeData(a.dataId)) {\n            this.removeDataId(a.dataId, info.backend);\n        }\n        // TODO(nsthorat): Construct an error and save the stack trace for\n        // debugging when in debug mode. Creating a stack trace is too expensive\n        // to do unconditionally.\n    }\n    disposeVariables() {\n        for (const varName in this.state.registeredVariables) {\n            const v = this.state.registeredVariables[varName];\n            this.disposeVariable(v);\n        }\n    }\n    disposeVariable(v) {\n        this.disposeTensor(v);\n        if (this.state.registeredVariables[v.name] != null) {\n            delete this.state.registeredVariables[v.name];\n        }\n    }\n    memory() {\n        const info = this.backend.memory();\n        info.numTensors = this.state.numTensors;\n        info.numDataBuffers = this.state.numDataBuffers;\n        info.numBytes = this.state.numBytes;\n        if (this.state.numStringTensors > 0) {\n            info.unreliable = true;\n            if (info.reasons == null) {\n                info.reasons = [];\n            }\n            info.reasons.push('Memory usage by string tensors is approximate ' +\n                '(2 bytes per character)');\n        }\n        return info;\n    }\n    async profile(query) {\n        this.state.profiling = true;\n        const startBytes = this.state.numBytes;\n        const startNumTensors = this.state.numTensors;\n        this.state.activeProfile.kernels = [];\n        this.state.activeProfile.result = await query();\n        this.state.profiling = false;\n        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n        this.state.activeProfile.newTensors =\n            this.state.numTensors - startNumTensors;\n        for (const kernel of this.state.activeProfile.kernels) {\n            kernel.kernelTimeMs = await kernel.kernelTimeMs;\n            kernel.extraInfo = await kernel.extraInfo;\n        }\n        return this.state.activeProfile;\n    }\n    isTapeOn() {\n        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n    }\n    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n        const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            gradientsFunc = gradConfig.gradFunc;\n        }\n        if (gradientsFunc != null) {\n            tapeNode.gradient = (dys) => {\n                // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n                // the backprop graph to the user as null instead of zeros\n                dys = dys.map((dy, i) => {\n                    if (dy == null) {\n                        const output = outputs[i];\n                        const vals = util.makeZerosTypedArray(output.size, output.dtype);\n                        return this.makeTensor(vals, output.shape, output.dtype);\n                    }\n                    return dy;\n                });\n                // Grad functions of ops with single outputs expect a dy, while ops\n                // with multiple outputs expect dys (array of dy).\n                return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n            };\n        }\n        this.state.activeTape.push(tapeNode);\n    }\n    keep(result) {\n        result.kept = true;\n        return result;\n    }\n    startTape() {\n        if (this.state.gradientDepth === 0) {\n            this.state.activeTape = [];\n        }\n        this.state.gradientDepth++;\n    }\n    endTape() {\n        this.state.gradientDepth--;\n    }\n    /**\n     * Start a scope. Use this with endScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    startScope(name) {\n        const scopeInfo = {\n            track: [],\n            name: 'unnamed scope',\n            id: this.state.nextScopeId++\n        };\n        if (name) {\n            scopeInfo.name = name;\n        }\n        this.state.scopeStack.push(scopeInfo);\n        this.state.activeScope = scopeInfo;\n    }\n    /**\n     * End a scope. Use this with startScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    endScope(result) {\n        const tensorsToTrackInParent = getTensorsInContainer(result);\n        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));\n        // Dispose the arrays tracked in this scope.\n        for (let i = 0; i < this.state.activeScope.track.length; i++) {\n            const tensor = this.state.activeScope.track[i];\n            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n                tensor.dispose();\n            }\n        }\n        const oldScope = this.state.scopeStack.pop();\n        this.state.activeScope = this.state.scopeStack.length === 0 ?\n            null :\n            this.state.scopeStack[this.state.scopeStack.length - 1];\n        // Track the current result in the parent scope.\n        tensorsToTrackInParent.forEach(tensor => {\n            // Only track the tensor if was allocated in the inner scope and is not\n            // globally kept.\n            if (!tensor.kept && tensor.scopeId === oldScope.id) {\n                this.track(tensor);\n            }\n        });\n    }\n    /**\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\n     * returned are of the same length as `xs`, but some might be null if `f`\n     * was not a function of that `x`. It also takes optional dy to multiply the\n     * gradient, which defaults to `1`.\n     */\n    gradients(f, xs, dy, allowNoGradients = false) {\n        util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');\n        if (dy != null && dy.dtype !== 'float32') {\n            throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n        }\n        const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));\n        util.assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.');\n        // Filter out the nodes that don't connect x => y.\n        const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n            throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n                'that the f you passed encloses all operations that lead from x ' +\n                'to y.');\n        }\n        return this.tidy('backward', () => {\n            const accumulatedGradientMap = {};\n            accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n            // Backprop gradients through the filtered nodes.\n            backpropagateGradients(accumulatedGradientMap, filteredTape, \n            // Pass the tidy function to avoid circular dep with `tape.ts`.\n            f => this.tidy(f), \n            // Pass an add function to avoide a circular dep with `tape.ts`.\n            add);\n            const grads = xs.map(x => accumulatedGradientMap[x.id]);\n            if (this.state.gradientDepth === 0) {\n                // This means that we are not computing higher-order gradients\n                // and can clean up the tape.\n                this.state.activeTape.forEach(node => {\n                    for (const tensor of node.saved) {\n                        tensor.dispose();\n                    }\n                });\n                this.state.activeTape = null;\n            }\n            return { value: y, grads };\n        });\n    }\n    customGrad(f) {\n        util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');\n        return (...inputs) => {\n            util.assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n                'tensors');\n            let res;\n            const inputMap = {};\n            inputs.forEach((input, i) => {\n                inputMap[i] = input;\n            });\n            const forwardFunc = (_, save) => {\n                res = f(...[...inputs, save]);\n                util.assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.value` is a tensor');\n                util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function.');\n                return res.value;\n            };\n            const backwardsFunc = (dy, saved) => {\n                const gradRes = res.gradFunc(dy, saved);\n                const grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n                util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'the same number of tensors as inputs passed to f(...).');\n                util.assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'a list of only tensors.');\n                const gradMap = {};\n                grads.forEach((grad, i) => {\n                    gradMap[i] = () => grad;\n                });\n                return gradMap;\n            };\n            return this.runKernelFunc({\n                forwardFunc,\n                backwardsFunc,\n                inputs: inputMap,\n            });\n        };\n    }\n    readSync(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readSync(dataId);\n    }\n    read(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.read(dataId);\n    }\n    readToGPU(dataId, options) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readToGPU(dataId, options);\n    }\n    async time(query) {\n        const start = now();\n        const timingInfo = await this.backend.time(query);\n        timingInfo.wallMs = now() - start;\n        return timingInfo;\n    }\n    /**\n     * Tracks a Tensor in the current scope to be automatically cleaned up\n     * when the current scope ends, and returns the value.\n     *\n     * @param result The Tensor to track in the current scope.\n     */\n    track(result) {\n        if (this.state.activeScope != null) {\n            result.scopeId = this.state.activeScope.id;\n            this.state.activeScope.track.push(result);\n        }\n        return result;\n    }\n    get registeredVariables() {\n        return this.state.registeredVariables;\n    }\n    /**\n     * Resets the engine state. Removes all backends but does not remove\n     * registered backend factories.\n     */\n    reset() {\n        // Make any pending promise obsolete.\n        this.pendingBackendInitId++;\n        this.state.dispose();\n        this.ENV.reset();\n        this.state = new EngineState();\n        for (const backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        this.backendName = null;\n        this.backendInstance = null;\n        this.pendingBackendInit = null;\n    }\n}\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\nfunction ones(shape) {\n    const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n    return ENGINE.makeTensor(values, shape, 'float32');\n}\nexport function getOrMakeEngine() {\n    const ns = getGlobalNamespace();\n    if (ns._tfengine == null) {\n        const environment = new Environment(ns);\n        ns._tfengine = new Engine(environment);\n    }\n    setEnvironmentGlobal(ns._tfengine.ENV);\n    // Tell the current tensor interface that the global engine is responsible\n    // for tracking.\n    setTensorTracker(() => ns._tfengine);\n    return ns._tfengine;\n}\nexport const ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a, b) {\n    // We duplicate Add here to avoid a circular dependency with add.ts.\n    const inputs = { a, b };\n    return ENGINE.runKernel(Add, inputs);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line:no-any\nfunction _isNavigatorDefined() {\n    return typeof navigator !== 'undefined' && navigator != null;\n}\nlet isMobileMockValue;\nexport function mockIsMobile(value) {\n    isMobileMockValue = value;\n}\nexport function isMobile(nav) {\n    if (isMobileMockValue !== undefined) {\n        return isMobileMockValue;\n    }\n    if (nav || _isNavigatorDefined()) {\n        if (!nav) {\n            nav = navigator;\n        }\n        if (nav.product === 'ReactNative') {\n            return true;\n        }\n        const a = nav.userAgent || nav.vendor ||\n            // tslint:disable-next-line:no-any\n            (typeof window !== 'undefined' ? window.opera : '');\n        // Use `navigator.userAgentData.mobile` as fallback.\n        if (!a) {\n            // tslint:disable-next-line:no-any\n            const navAny = nav;\n            return navAny.userAgentData && navAny.userAgentData.mobile;\n        }\n        // tslint:disable-next-line:max-line-length\n        return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n            .test(a) ||\n            // tslint:disable-next-line:max-line-length\n            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n                .test(a.substr(0, 4));\n    }\n    return false;\n}\nexport function isBrowser() {\n    return (typeof window !== 'undefined' && window.document != null) ||\n        //@ts-ignore\n        (typeof WorkerGlobalScope !== 'undefined');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './engine';\nimport * as device_util from './device_util';\nimport { env } from './environment';\nconst ENV = env();\n/**\n * This file contains environment-related flag registrations.\n */\n/** Whether to enable debug mode. */\nENV.registerFlag('DEBUG', () => false, debugValue => {\n    if (debugValue) {\n        console.warn('Debugging mode is ON. The output of every math call will ' +\n            'be downloaded to CPU and checked for NaNs. ' +\n            'This significantly impacts performance.');\n    }\n});\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_NODE', () => (typeof process !== 'undefined') &&\n    (typeof process.versions !== 'undefined') &&\n    (typeof process.versions.node !== 'undefined'));\n/** Whether this browser is Chrome. */\nENV.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null &&\n    navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&\n    /Google Inc/.test(navigator.vendor));\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\nENV.registerFlag('PROD', () => false);\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\nENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));\n/** Whether deprecation warnings are enabled. */\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);\n/** True if running unit tests. */\nENV.registerFlag('IS_TEST', () => false);\n/** Whether to check computation result for errors. */\nENV.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => true);\n/** Whether the backend needs to wrap input to imageBitmap. */\nENV.registerFlag('WRAP_TO_IMAGEBITMAP', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/* Type definitions for exporting and importing of models. */\n/**\n * A map from Tensor dtype to number of bytes per element of the Tensor.\n */\nexport const DTYPE_VALUE_SIZE_MAP = {\n    'float32': 4,\n    'float16': 2,\n    'int32': 4,\n    'uint16': 2,\n    'uint8': 1,\n    'bool': 1,\n    'complex64': 8\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(tensors, group) {\n    // TODO(adarob, cais): Support quantization.\n    const specs = [];\n    const dataPromises = [];\n    const names = Array.isArray(tensors) ?\n        tensors.map(tensor => tensor.name) :\n        Object.keys(tensors);\n    for (let i = 0; i < names.length; ++i) {\n        const name = names[i];\n        const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n        if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n            t.dtype !== 'string' && t.dtype !== 'complex64') {\n            throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n        }\n        const spec = { name, shape: t.shape, dtype: t.dtype };\n        if (t.dtype === 'string') {\n            const utf8bytes = new Promise(async (resolve) => {\n                const vals = await t.bytes();\n                const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n                    NUM_BYTES_STRING_LENGTH * vals.length;\n                const bytes = new Uint8Array(totalNumBytes);\n                let offset = 0;\n                for (let i = 0; i < vals.length; i++) {\n                    const val = vals[i];\n                    const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n                    bytes.set(bytesOfLength, offset);\n                    offset += NUM_BYTES_STRING_LENGTH;\n                    bytes.set(val, offset);\n                    offset += val.length;\n                }\n                resolve(bytes);\n            });\n            dataPromises.push(utf8bytes);\n        }\n        else {\n            dataPromises.push(t.data());\n        }\n        if (group != null) {\n            spec.group = group;\n        }\n        specs.push(spec);\n    }\n    const tensorValues = await Promise.all(dataPromises);\n    return { data: concatenateTypedArrays(tensorValues), specs };\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(buffer, specs) {\n    // TODO(adarob, cais): Support quantization.\n    const out = {};\n    let float16Decode;\n    let offset = 0;\n    for (const spec of specs) {\n        const name = spec.name;\n        const dtype = spec.dtype;\n        const shape = spec.shape;\n        const size = sizeFromShape(shape);\n        let values;\n        if ('quantization' in spec) {\n            const quantization = spec.quantization;\n            if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n                if (!('min' in quantization && 'scale' in quantization)) {\n                    throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` +\n                        `doesn't have corresponding metadata min and scale.`);\n                }\n            }\n            else if (quantization.dtype === 'float16') {\n                if (dtype !== 'float32') {\n                    throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n                        `which only supports weights of type float32 not ${dtype}.`);\n                }\n            }\n            else {\n                throw new Error(`Weight ${spec.name} has unknown ` +\n                    `quantization dtype ${quantization.dtype}. ` +\n                    `Supported quantization dtypes are: ` +\n                    `'uint8', 'uint16', and 'float16'.`);\n            }\n            const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n            const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\n            const quantizedArray = (quantization.dtype === 'uint8') ?\n                new Uint8Array(byteBuffer) :\n                new Uint16Array(byteBuffer);\n            if (dtype === 'float32') {\n                if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n                    values = new Float32Array(quantizedArray.length);\n                    for (let i = 0; i < quantizedArray.length; i++) {\n                        const v = quantizedArray[i];\n                        values[i] = v * quantization.scale + quantization.min;\n                    }\n                }\n                else if (quantization.dtype === 'float16') {\n                    if (float16Decode === undefined) {\n                        float16Decode = getFloat16Decoder();\n                    }\n                    values = float16Decode(quantizedArray);\n                }\n                else {\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                        `for weight type float32.`);\n                }\n            }\n            else if (dtype === 'int32') {\n                if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                        `for weight type int32.`);\n                }\n                values = new Int32Array(quantizedArray.length);\n                for (let i = 0; i < quantizedArray.length; i++) {\n                    const v = quantizedArray[i];\n                    values[i] = Math.round(v * quantization.scale + quantization.min);\n                }\n            }\n            else {\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n            }\n            offset += size * quantizationSizeFactor;\n        }\n        else if (dtype === 'string') {\n            const size = sizeFromShape(spec.shape);\n            values = [];\n            for (let i = 0; i < size; i++) {\n                const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n                offset += NUM_BYTES_STRING_LENGTH;\n                const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n                values.push(bytes);\n                offset += byteLength;\n            }\n        }\n        else {\n            const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n            const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n            if (dtype === 'float32') {\n                values = new Float32Array(byteBuffer);\n            }\n            else if (dtype === 'int32') {\n                values = new Int32Array(byteBuffer);\n            }\n            else if (dtype === 'bool') {\n                values = new Uint8Array(byteBuffer);\n            }\n            else if (dtype === 'complex64') {\n                values = new Float32Array(byteBuffer);\n                const real = new Float32Array(values.length / 2);\n                const image = new Float32Array(values.length / 2);\n                for (let i = 0; i < real.length; i++) {\n                    real[i] = values[i * 2];\n                    image[i] = values[i * 2 + 1];\n                }\n                const realTensor = tensor(real, shape, 'float32');\n                const imageTensor = tensor(image, shape, 'float32');\n                out[name] = complex(realTensor, imageTensor);\n                realTensor.dispose();\n                imageTensor.dispose();\n            }\n            else {\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n            }\n            offset += size * dtypeFactor;\n        }\n        if (dtype !== 'complex64') {\n            out[name] = tensor(values, shape, dtype);\n        }\n    }\n    return out;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs) {\n    // TODO(adarob, cais): Support quantization.\n    if (xs === null) {\n        throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n    }\n    let totalByteLength = 0;\n    // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n    // can have a different byte length from that of the `TypedArray` itself,\n    // for example, when the `TypedArray` is created from an offset in an\n    // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n    // the `TypedArray` in byte length. If an element of `xs` does not show\n    // this property, a new `TypedArray` that satisfy this property will be\n    // constructed and pushed into `normalizedXs`.\n    const normalizedXs = [];\n    xs.forEach((x) => {\n        totalByteLength += x.byteLength;\n        // tslint:disable:no-any\n        normalizedXs.push(x.byteLength === x.buffer.byteLength ? x :\n            new x.constructor(x));\n        if (!(x instanceof Float32Array || x instanceof Int32Array ||\n            x instanceof Uint8Array)) {\n            throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n        }\n        // tslint:enable:no-any\n    });\n    const y = new Uint8Array(totalByteLength);\n    let offset = 0;\n    normalizedXs.forEach((x) => {\n        y.set(new Uint8Array(x.buffer), offset);\n        offset += x.byteLength;\n    });\n    return y.buffer;\n}\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n        typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str) {\n    if (useNodeBuffer) {\n        return Buffer.byteLength(str);\n    }\n    return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer) {\n    if (useNodeBuffer) {\n        return Buffer.from(buffer).toString('base64');\n    }\n    const buf = new Uint8Array(buffer);\n    let s = '';\n    for (let i = 0, l = buf.length; i < l; i++) {\n        s += String.fromCharCode(buf[i]);\n    }\n    return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str) {\n    if (useNodeBuffer) {\n        const buf = Buffer.from(str, 'base64');\n        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n    }\n    const s = atob(str);\n    const buffer = new Uint8Array(s.length);\n    for (let i = 0; i < s.length; ++i) {\n        buffer.set([s.charCodeAt(i)], i);\n    }\n    return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers) {\n    if (buffers.length === 1) {\n        return buffers[0];\n    }\n    let totalByteLength = 0;\n    buffers.forEach((buffer) => {\n        totalByteLength += buffer.byteLength;\n    });\n    const temp = new Uint8Array(totalByteLength);\n    let offset = 0;\n    buffers.forEach((buffer) => {\n        temp.set(new Uint8Array(buffer), offset);\n        offset += buffer.byteLength;\n    });\n    return temp.buffer;\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path) {\n    const SEPARATOR = '/';\n    path = path.trim();\n    while (path.endsWith(SEPARATOR)) {\n        path = path.slice(0, path.length - 1);\n    }\n    const items = path.split(SEPARATOR);\n    return items[items.length - 1];\n}\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(artifacts, manifest) {\n    const result = {\n        modelTopology: artifacts.modelTopology,\n        format: artifacts.format,\n        generatedBy: artifacts.generatedBy,\n        convertedBy: artifacts.convertedBy,\n        weightsManifest: manifest\n    };\n    if (artifacts.signature != null) {\n        result.signature = artifacts.signature;\n    }\n    if (artifacts.userDefinedMetadata != null) {\n        result.userDefinedMetadata = artifacts.userDefinedMetadata;\n    }\n    if (artifacts.modelInitializer != null) {\n        result.modelInitializer = artifacts.modelInitializer;\n    }\n    if (artifacts.trainingConfig != null) {\n        result.trainingConfig = artifacts.trainingConfig;\n    }\n    return result;\n}\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(modelJSON, loadWeights) {\n    const modelArtifacts = {\n        modelTopology: modelJSON.modelTopology,\n        format: modelJSON.format,\n        generatedBy: modelJSON.generatedBy,\n        convertedBy: modelJSON.convertedBy\n    };\n    if (modelJSON.trainingConfig != null) {\n        modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n    }\n    if (modelJSON.weightsManifest != null) {\n        const [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);\n        modelArtifacts.weightSpecs = weightSpecs;\n        modelArtifacts.weightData = weightData;\n    }\n    if (modelJSON.signature != null) {\n        modelArtifacts.signature = modelJSON.signature;\n    }\n    if (modelJSON.userDefinedMetadata != null) {\n        modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n    }\n    if (modelJSON.modelInitializer != null) {\n        modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n    }\n    return modelArtifacts;\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('Expected JSON model topology, received ArrayBuffer.');\n    }\n    return {\n        dateSaved: new Date(),\n        modelTopologyType: 'JSON',\n        modelTopologyBytes: modelArtifacts.modelTopology == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n        weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n        weightDataBytes: modelArtifacts.weightData == null ?\n            0 :\n            modelArtifacts.weightData.byteLength,\n    };\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable() {\n    const convertMantissa = (i) => {\n        let m = i << 13;\n        let e = 0;\n        while ((m & 0x00800000) === 0) {\n            e -= 0x00800000;\n            m <<= 1;\n        }\n        m &= ~0x00800000;\n        e += 0x38800000;\n        return m | e;\n    };\n    const mantisaTable = new Uint32Array(2048);\n    mantisaTable[0] = 0;\n    for (let i = 1; i < 1024; i++) {\n        mantisaTable[i] = convertMantissa(i);\n    }\n    for (let i = 1024; i < 2048; i++) {\n        mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n    }\n    return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable() {\n    const exponentTable = new Uint32Array(64);\n    exponentTable[0] = 0;\n    exponentTable[31] = 0x47800000;\n    exponentTable[32] = 0x80000000;\n    exponentTable[63] = 0xc7800000;\n    for (let i = 1; i < 31; i++) {\n        exponentTable[i] = i << 23;\n    }\n    for (let i = 33; i < 63; i++) {\n        exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n    }\n    return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable() {\n    const offsetTable = new Uint32Array(64);\n    for (let i = 0; i < 64; i++) {\n        offsetTable[i] = 1024;\n    }\n    offsetTable[0] = offsetTable[32] = 0;\n    return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder() {\n    // Algorithm is based off of\n    // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n    // Cache lookup tables\n    const mantisaTable = computeFloat16MantisaTable();\n    const exponentTable = computeFloat16ExponentTable();\n    const offsetTable = computeFloat16OffsetTable();\n    return (quantizedArray) => {\n        const buffer = new ArrayBuffer(4 * quantizedArray.length);\n        const bufferUint32View = new Uint32Array(buffer);\n        for (let index = 0; index < quantizedArray.length; index++) {\n            const float16Bits = quantizedArray[index];\n            const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n                exponentTable[float16Bits >> 10];\n            bufferUint32View[index] = float32Bits;\n        }\n        return new Float32Array(buffer);\n    };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class IORouterRegistry {\n    constructor() {\n        this.saveRouters = [];\n        this.loadRouters = [];\n    }\n    static getInstance() {\n        if (IORouterRegistry.instance == null) {\n            IORouterRegistry.instance = new IORouterRegistry();\n        }\n        return IORouterRegistry.instance;\n    }\n    /**\n     * Register a save-handler router.\n     *\n     * @param saveRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `save` method defined or `null`.\n     */\n    static registerSaveRouter(saveRouter) {\n        IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n    }\n    /**\n     * Register a load-handler router.\n     *\n     * @param loadRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `load` method defined or `null`.\n     */\n    static registerLoadRouter(loadRouter) {\n        IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n    }\n    /**\n     * Look up IOHandler for saving, given a URL-like string.\n     *\n     * @param url\n     * @returns If only one match is found, an instance of IOHandler with the\n     * `save` method defined. If no match is found, `null`.\n     * @throws Error, if more than one match is found.\n     */\n    static getSaveHandlers(url) {\n        return IORouterRegistry.getHandlers(url, 'save');\n    }\n    /**\n     * Look up IOHandler for loading, given a URL-like string.\n     *\n     * @param url\n     * @param loadOptions Optional, custom load options.\n     * @returns All valid handlers for `url`, given the currently registered\n     *   handler routers.\n     */\n    static getLoadHandlers(url, loadOptions) {\n        return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n    }\n    static getHandlers(url, handlerType, loadOptions) {\n        const validHandlers = [];\n        const routers = handlerType === 'load' ?\n            IORouterRegistry.getInstance().loadRouters :\n            IORouterRegistry.getInstance().saveRouters;\n        routers.forEach(router => {\n            const handler = router(url, loadOptions);\n            if (handler !== null) {\n                validHandlers.push(handler);\n            }\n        });\n        return validHandlers;\n    }\n}\nexport const registerSaveRouter = (loudRouter) => IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = (loudRouter) => IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = (url) => IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase() {\n    const idbFactory = getIndexedDBFactory();\n    return new Promise((resolve, reject) => {\n        const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n        deleteRequest.onsuccess = () => resolve();\n        deleteRequest.onerror = error => reject(error);\n    });\n}\nfunction getIndexedDBFactory() {\n    if (!env().getBool('IS_BROWSER')) {\n        // TODO(cais): Add more info about what IOHandler subtypes are available.\n        //   Maybe point to a doc page on the web and/or automatically determine\n        //   the available IOHandlers and print them in the error message.\n        throw new Error('Failed to obtain IndexedDB factory because the current environment' +\n            'is not a web browser.');\n    }\n    // tslint:disable-next-line:no-any\n    const theWindow = typeof window === 'undefined' ? self : window;\n    const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n        theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n        theWindow.shimIndexedDB;\n    if (factory == null) {\n        throw new Error('The current browser does not appear to support IndexedDB.');\n    }\n    return factory;\n}\nfunction setUpDatabase(openRequest) {\n    const db = openRequest.result;\n    db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });\n    db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });\n}\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB {\n    constructor(modelPath) {\n        this.indexedDB = getIndexedDBFactory();\n        if (modelPath == null || !modelPath) {\n            throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n    }\n    async save(modelArtifacts) {\n        // TODO(cais): Support saving GraphDef models.\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        return this.databaseAction(this.modelPath, modelArtifacts);\n    }\n    async load() {\n        return this.databaseAction(this.modelPath);\n    }\n    /**\n     * Perform database action to put model artifacts into or read model artifacts\n     * from IndexedDB object store.\n     *\n     * Whether the action is put or get depends on whether `modelArtifacts` is\n     * specified. If it is specified, the action will be put; otherwise the action\n     * will be get.\n     *\n     * @param modelPath A unique string path for the model.\n     * @param modelArtifacts If specified, it will be the model artifacts to be\n     *   stored in IndexedDB.\n     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n     *   of `ModelArtifacts`, if the action is get.\n     */\n    databaseAction(modelPath, modelArtifacts) {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                if (modelArtifacts == null) {\n                    // Read model out from object store.\n                    const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n                    const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                    const getRequest = modelStore.get(this.modelPath);\n                    getRequest.onsuccess = () => {\n                        if (getRequest.result == null) {\n                            db.close();\n                            return reject(new Error(`Cannot find model with path '${this.modelPath}' ` +\n                                `in IndexedDB.`));\n                        }\n                        else {\n                            resolve(getRequest.result.modelArtifacts);\n                        }\n                    };\n                    getRequest.onerror = error => {\n                        db.close();\n                        return reject(getRequest.error);\n                    };\n                    modelTx.oncomplete = () => db.close();\n                }\n                else {\n                    // Put model into object store.\n                    const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n                    // First, put ModelArtifactsInfo into info store.\n                    const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                    let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                    const putInfoRequest = infoStore.put({ modelPath: this.modelPath, modelArtifactsInfo });\n                    let modelTx;\n                    putInfoRequest.onsuccess = () => {\n                        // Second, put model data into model store.\n                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                        const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                        const putModelRequest = modelStore.put({\n                            modelPath: this.modelPath,\n                            modelArtifacts,\n                            modelArtifactsInfo\n                        });\n                        putModelRequest.onsuccess = () => resolve({ modelArtifactsInfo });\n                        putModelRequest.onerror = error => {\n                            // If the put-model request fails, roll back the info entry as\n                            // well.\n                            infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                            const deleteInfoRequest = infoStore.delete(this.modelPath);\n                            deleteInfoRequest.onsuccess = () => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                            deleteInfoRequest.onerror = error => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                        };\n                    };\n                    putInfoRequest.onerror = error => {\n                        db.close();\n                        return reject(putInfoRequest.error);\n                    };\n                    infoTx.oncomplete = () => {\n                        if (modelTx == null) {\n                            db.close();\n                        }\n                        else {\n                            modelTx.oncomplete = () => db.close();\n                        }\n                    };\n                }\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport const indexedDBRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n            return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath) {\n    return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n        key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n        key;\n}\nexport class BrowserIndexedDBManager {\n    constructor() {\n        this.indexedDB = getIndexedDBFactory();\n    }\n    async listModels() {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n                const store = tx.objectStore(INFO_STORE_NAME);\n                // tslint:disable:max-line-length\n                // Need to cast `store` as `any` here because TypeScript's DOM\n                // library does not have the `getAll()` method even though the\n                // method is supported in the latest version of most mainstream\n                // browsers:\n                // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n                // tslint:enable:max-line-length\n                // tslint:disable-next-line:no-any\n                const getAllInfoRequest = store.getAll();\n                getAllInfoRequest.onsuccess = () => {\n                    const out = {};\n                    for (const item of getAllInfoRequest.result) {\n                        out[item.modelPath] = item.modelArtifactsInfo;\n                    }\n                    resolve(out);\n                };\n                getAllInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getAllInfoRequest.error);\n                };\n                tx.oncomplete = () => db.close();\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                const getInfoRequest = infoStore.get(path);\n                let modelTx;\n                getInfoRequest.onsuccess = () => {\n                    if (getInfoRequest.result == null) {\n                        db.close();\n                        return reject(new Error(`Cannot find model with path '${path}' ` +\n                            `in IndexedDB.`));\n                    }\n                    else {\n                        // First, delete the entry in the info store.\n                        const deleteInfoRequest = infoStore.delete(path);\n                        const deleteModelData = () => {\n                            // Second, delete the entry in the model store.\n                            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                            const deleteModelRequest = modelStore.delete(path);\n                            deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n                            deleteModelRequest.onerror = error => reject(getInfoRequest.error);\n                        };\n                        // Proceed with deleting model data regardless of whether deletion\n                        // of info data succeeds or not.\n                        deleteInfoRequest.onsuccess = deleteModelData;\n                        deleteInfoRequest.onerror = error => {\n                            deleteModelData();\n                            db.close();\n                            return reject(getInfoRequest.error);\n                        };\n                    }\n                };\n                getInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getInfoRequest.error);\n                };\n                infoTx.oncomplete = () => {\n                    if (modelTx == null) {\n                        db.close();\n                    }\n                    else {\n                        modelTx.oncomplete = () => db.close();\n                    }\n                };\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts() {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n        throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' +\n            'unavailable in the current environment.');\n    }\n    const LS = window.localStorage;\n    const purgedModelPaths = [];\n    for (let i = 0; i < LS.length; ++i) {\n        const key = LS.key(i);\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        if (key.startsWith(prefix) && key.length > prefix.length) {\n            LS.removeItem(key);\n            const modelName = getModelPathFromKey(key);\n            if (purgedModelPaths.indexOf(modelName) === -1) {\n                purgedModelPaths.push(modelName);\n            }\n        }\n    }\n    return purgedModelPaths;\n}\nfunction getModelKeys(path) {\n    return {\n        info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n        topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n        weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n        weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n        modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n    };\n}\nfunction removeItems(keys) {\n    for (const key of Object.values(keys)) {\n        window.localStorage.removeItem(key);\n    }\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key) {\n    const items = key.split(PATH_SEPARATOR);\n    if (items.length < 3) {\n        throw new Error(`Invalid key format: ${key}`);\n    }\n    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n        key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n        key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage {\n    constructor(modelPath) {\n        if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n            typeof window.localStorage === 'undefined') {\n            // TODO(cais): Add more info about what IOHandler subtypes are\n            // available.\n            //   Maybe point to a doc page on the web and/or automatically determine\n            //   the available IOHandlers and print them in the error message.\n            throw new Error('The current environment does not support local storage.');\n        }\n        this.LS = window.localStorage;\n        if (modelPath == null || !modelPath) {\n            throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n        this.keys = getModelKeys(this.modelPath);\n    }\n    /**\n     * Save model artifacts to browser local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @param modelArtifacts The model artifacts to be stored.\n     * @returns An instance of SaveResult.\n     */\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const topology = JSON.stringify(modelArtifacts.modelTopology);\n            const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n            const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n            try {\n                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n                this.LS.setItem(this.keys.topology, topology);\n                this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n                this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\n                // Note that JSON.stringify doesn't write out keys that have undefined\n                // values, so for some keys, we set undefined instead of a null-ish\n                // value.\n                const metadata = {\n                    format: modelArtifacts.format,\n                    generatedBy: modelArtifacts.generatedBy,\n                    convertedBy: modelArtifacts.convertedBy,\n                    signature: modelArtifacts.signature != null ?\n                        modelArtifacts.signature :\n                        undefined,\n                    userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ?\n                        modelArtifacts.userDefinedMetadata :\n                        undefined,\n                    modelInitializer: modelArtifacts.modelInitializer != null ?\n                        modelArtifacts.modelInitializer :\n                        undefined,\n                    trainingConfig: modelArtifacts.trainingConfig != null ?\n                        modelArtifacts.trainingConfig :\n                        undefined\n                };\n                this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n                return { modelArtifactsInfo };\n            }\n            catch (err) {\n                // If saving failed, clean up all items saved so far.\n                removeItems(this.keys);\n                throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` +\n                    `size quota being exceeded is a possible cause of this failure: ` +\n                    `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n                    `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n                    `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n            }\n        }\n    }\n    /**\n     * Load a model from local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model (if loading succeeds).\n     */\n    async load() {\n        const info = JSON.parse(this.LS.getItem(this.keys.info));\n        if (info == null) {\n            throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);\n        }\n        if (info.modelTopologyType !== 'JSON') {\n            throw new Error('BrowserLocalStorage does not support loading non-JSON model ' +\n                'topology yet.');\n        }\n        const out = {};\n        // Load topology.\n        const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n        if (topology == null) {\n            throw new Error(`In local storage, the topology of model '${this.modelPath}' ` +\n                `is missing.`);\n        }\n        out.modelTopology = topology;\n        // Load weight specs.\n        const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n        if (weightSpecs == null) {\n            throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` +\n                `are missing.`);\n        }\n        out.weightSpecs = weightSpecs;\n        // Load meta-data fields.\n        const metadataString = this.LS.getItem(this.keys.modelMetadata);\n        if (metadataString != null) {\n            const metadata = JSON.parse(metadataString);\n            out.format = metadata.format;\n            out.generatedBy = metadata.generatedBy;\n            out.convertedBy = metadata.convertedBy;\n            if (metadata.signature != null) {\n                out.signature = metadata.signature;\n            }\n            if (metadata.userDefinedMetadata != null) {\n                out.userDefinedMetadata = metadata.userDefinedMetadata;\n            }\n            if (metadata.modelInitializer != null) {\n                out.modelInitializer = metadata.modelInitializer;\n            }\n            if (metadata.trainingConfig != null) {\n                out.trainingConfig = metadata.trainingConfig;\n            }\n        }\n        // Load weight data.\n        const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n        if (weightDataBase64 == null) {\n            throw new Error(`In local storage, the binary weight values of model ` +\n                `'${this.modelPath}' are missing.`);\n        }\n        out.weightData = base64StringToArrayBuffer(weightDataBase64);\n        return out;\n    }\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport const localStorageRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n            return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath) {\n    return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n    constructor() {\n        assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n        assert(typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n        this.LS = window.localStorage;\n    }\n    async listModels() {\n        const out = {};\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n        for (let i = 0; i < this.LS.length; ++i) {\n            const key = this.LS.key(i);\n            if (key.startsWith(prefix) && key.endsWith(suffix)) {\n                const modelPath = getModelPathFromKey(key);\n                out[modelPath] = JSON.parse(this.LS.getItem(key));\n            }\n        }\n        return out;\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        const keys = getModelKeys(path);\n        if (this.LS.getItem(keys.info) == null) {\n            throw new Error(`Cannot find model at path '${path}'`);\n        }\n        const info = JSON.parse(this.LS.getItem(keys.info));\n        removeItems(keys);\n        return info;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\nimport { assert } from '../util';\nimport { IORouterRegistry } from './router_registry';\nconst URL_SCHEME_SUFFIX = '://';\nexport class ModelStoreManagerRegistry {\n    constructor() {\n        this.managers = {};\n    }\n    static getInstance() {\n        if (ModelStoreManagerRegistry.instance == null) {\n            ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n        }\n        return ModelStoreManagerRegistry.instance;\n    }\n    /**\n     * Register a save-handler router.\n     *\n     * @param saveRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `save` method defined or `null`.\n     */\n    static registerManager(scheme, manager) {\n        assert(scheme != null, () => 'scheme must not be undefined or null.');\n        if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n            scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n        }\n        assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n        const registry = ModelStoreManagerRegistry.getInstance();\n        assert(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);\n        registry.managers[scheme] = manager;\n    }\n    static getManager(scheme) {\n        const manager = this.getInstance().managers[scheme];\n        if (manager == null) {\n            throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n        }\n        return manager;\n    }\n    static getSchemes() {\n        return Object.keys(this.getInstance().managers);\n    }\n}\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url) {\n    if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n        throw new Error(`The url string provided does not contain a scheme. ` +\n            `Supported schemes are: ` +\n            `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n    }\n    return {\n        scheme: url.split(URL_SCHEME_SUFFIX)[0],\n        path: url.split(URL_SCHEME_SUFFIX)[1],\n    };\n}\nasync function cloneModelInternal(sourceURL, destURL, deleteSource = false) {\n    assert(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);\n    const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n    assert(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);\n    assert(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +\n        `load handlers for source URL ${sourceURL}.`);\n    const loadHandler = loadHandlers[0];\n    const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n    assert(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` +\n        `URL ${destURL}.`);\n    assert(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +\n        `save handlers for destination URL ${destURL}.`);\n    const saveHandler = saveHandlers[0];\n    const sourceScheme = parseURL(sourceURL).scheme;\n    const sourcePath = parseURL(sourceURL).path;\n    const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n    const modelArtifacts = await loadHandler.load();\n    // If moving within the same storage medium, remove the old model as soon as\n    // the loading is done. Without doing this, it is possible that the combined\n    // size of the two models will cause the cloning to fail.\n    if (deleteSource && sameMedium) {\n        await ModelStoreManagerRegistry.getManager(sourceScheme)\n            .removeModel(sourcePath);\n    }\n    const saveResult = await saveHandler.save(modelArtifacts);\n    // If moving between mediums, the deletion is done after the save succeeds.\n    // This guards against the case in which saving to the destination medium\n    // fails.\n    if (deleteSource && !sameMedium) {\n        await ModelStoreManagerRegistry.getManager(sourceScheme)\n            .removeModel(sourcePath);\n    }\n    return saveResult.modelArtifactsInfo;\n}\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels() {\n    const schemes = ModelStoreManagerRegistry.getSchemes();\n    const out = {};\n    for (const scheme of schemes) {\n        const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();\n        for (const path in schemeOut) {\n            const url = scheme + URL_SCHEME_SUFFIX + path;\n            out[url] = schemeOut[path];\n        }\n    }\n    return out;\n}\n/**\n * Remove a model specified by URL from a reigstered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url) {\n    const schemeAndPath = parseURL(url);\n    const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n    return manager.removeModel(schemeAndPath.path);\n}\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(sourceURL, destURL) {\n    const deleteSource = false;\n    return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(sourceURL, destURL) {\n    const deleteSource = true;\n    return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\nexport { moveModel, copyModel, removeModel, listModels };\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { BrowserIndexedDB, BrowserIndexedDBManager } from '../io/indexed_db';\nimport { BrowserLocalStorage, BrowserLocalStorageManager } from '../io/local_storage';\nimport { ModelStoreManagerRegistry } from '../io/model_management';\nexport class PlatformBrowser {\n    fetch(path, init) {\n        return fetch(path, init);\n    }\n    now() {\n        return performance.now();\n    }\n    encode(text, encoding) {\n        if (encoding !== 'utf-8' && encoding !== 'utf8') {\n            throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);\n        }\n        if (this.textEncoder == null) {\n            this.textEncoder = new TextEncoder();\n        }\n        return this.textEncoder.encode(text);\n    }\n    decode(bytes, encoding) {\n        return new TextDecoder(encoding).decode(bytes);\n    }\n}\nif (env().get('IS_BROWSER')) {\n    env().setPlatform('browser', new PlatformBrowser());\n    // Register LocalStorage IOHandler\n    try {\n        ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n    }\n    catch (err) {\n    }\n    // Register IndexedDB IOHandler\n    try {\n        ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n    }\n    catch (err) {\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n    // tslint:disable-next-line:no-require-imports\n    importFetch: () => require('node-fetch')\n};\nlet systemFetch;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n    systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n    systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n    return systemFetch;\n}\nexport class PlatformNode {\n    constructor() {\n        // tslint:disable-next-line:no-require-imports\n        this.util = require('util');\n        // According to the spec, the built-in encoder can do only UTF-8 encoding.\n        // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n        this.textEncoder = new this.util.TextEncoder();\n    }\n    fetch(path, requestInits) {\n        if (env().global.fetch != null) {\n            return env().global.fetch(path, requestInits);\n        }\n        if (systemFetch == null) {\n            systemFetch = getNodeFetch.importFetch();\n        }\n        return systemFetch(path, requestInits);\n    }\n    now() {\n        const time = process.hrtime();\n        return time[0] * 1000 + time[1] / 1000000;\n    }\n    encode(text, encoding) {\n        if (encoding !== 'utf-8' && encoding !== 'utf8') {\n            throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);\n        }\n        return this.textEncoder.encode(text);\n    }\n    decode(bytes, encoding) {\n        if (bytes.length === 0) {\n            return '';\n        }\n        return new this.util.TextDecoder(encoding).decode(bytes);\n    }\n}\nif (env().get('IS_NODE')) {\n    env().setPlatform('node', new PlatformNode());\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer } from '../tensor';\nimport * as util from '../util';\n/**\n * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\n *\n * The values are stored in CPU as `TypedArray`. Fill the buffer using\n * `buffer.set()`, or by modifying directly `buffer.values`.\n *\n * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\n * those values.\n *\n * ```js\n * // Create a buffer and set values at particular indices.\n * const buffer = tf.buffer([2, 2]);\n * buffer.set(3, 0, 0);\n * buffer.set(5, 1, 0);\n *\n * // Convert the buffer back to a tensor.\n * buffer.toTensor().print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The dtype of the buffer. Defaults to 'float32'.\n * @param values The values of the buffer as `TypedArray`. Defaults to\n * zeros.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function buffer(shape, dtype = 'float32', values) {\n    dtype = dtype || 'float32';\n    util.assertNonNegativeIntegerDimensions(shape);\n    return new TensorBuffer(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { env } from './environment';\nimport { Tensor } from './tensor';\nimport { assert, flatten, inferDtype, isTypedArray, toTypedArray } from './util';\nexport function inferShape(val, dtype) {\n    let firstElem = val;\n    if (isTypedArray(val)) {\n        return dtype === 'string' ? [] : [val.length];\n    }\n    if (!Array.isArray(val)) {\n        return []; // Scalar.\n    }\n    const shape = [];\n    while (Array.isArray(firstElem) ||\n        isTypedArray(firstElem) && dtype !== 'string') {\n        shape.push(firstElem.length);\n        firstElem = firstElem[0];\n    }\n    if (Array.isArray(val) &&\n        env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n        deepAssertShapeConsistency(val, shape, []);\n    }\n    return shape;\n}\nfunction deepAssertShapeConsistency(val, shape, indices) {\n    indices = indices || [];\n    if (!(Array.isArray(val)) && !isTypedArray(val)) {\n        assert(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` +\n            `but should be an array/TypedArray of ${shape[0]} elements`);\n        return;\n    }\n    assert(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` +\n        `but is an array of ${val.length} elements`);\n    assert(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +\n        `elements, but has ${val.length} elements`);\n    const subShape = shape.slice(1);\n    for (let i = 0; i < val.length; ++i) {\n        deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n    }\n}\nfunction assertDtype(expectedDtype, actualDType, argName, functionName) {\n    if (expectedDtype === 'string_or_numeric') {\n        return;\n    }\n    if (expectedDtype == null) {\n        throw new Error(`Expected dtype cannot be null.`);\n    }\n    if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||\n        expectedDtype === 'numeric' && actualDType === 'string') {\n        throw new Error(`Argument '${argName}' passed to '${functionName}' must ` +\n            `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n    }\n}\nexport function convertToTensor(x, argName, functionName, parseAsDtype = 'numeric') {\n    if (x instanceof Tensor) {\n        assertDtype(parseAsDtype, x.dtype, argName, functionName);\n        return x;\n    }\n    let inferredDtype = inferDtype(x);\n    // If the user expects a bool/int/float, use that info to update the\n    // inferredDtype when it is not a string.\n    if (inferredDtype !== 'string' &&\n        ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n        inferredDtype = parseAsDtype;\n    }\n    assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n    if ((x == null) ||\n        (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&\n            typeof x !== 'boolean' && typeof x !== 'string')) {\n        const type = x == null ? 'null' : x.constructor.name;\n        throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` +\n            `Tensor or TensorLike, but got '${type}'`);\n    }\n    const inferredShape = inferShape(x, inferredDtype);\n    if (!isTypedArray(x) && !Array.isArray(x)) {\n        x = [x];\n    }\n    const skipTypedArray = true;\n    const values = inferredDtype !== 'string' ?\n        toTypedArray(x, inferredDtype) :\n        flatten(x, [], skipTypedArray);\n    return ENGINE.makeTensor(values, inferredShape, inferredDtype);\n}\nexport function convertToTensorArray(arg, argName, functionName, parseAsDtype = 'numeric') {\n    if (!Array.isArray(arg)) {\n        throw new Error(`Argument ${argName} passed to ${functionName} must be a ` +\n            '`Tensor[]` or `TensorLike[]`');\n    }\n    const tensors = arg;\n    return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { isPromise } from '../util';\nexport const OP_SCOPE_SUFFIX = '__op';\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op(f) {\n    const keys = Object.keys(f);\n    if (keys.length !== 1) {\n        throw new Error(`Please provide an object with a single key ` +\n            `(operation name) mapping to a function. Got an object with ` +\n            `${keys.length} keys.`);\n    }\n    let opName = keys[0];\n    const fn = f[opName];\n    // Strip the underscore from the end of the function name.\n    if (opName.endsWith('_')) {\n        opName = opName.substring(0, opName.length - 1);\n    }\n    // add an __op suffix to distinguish ops from kernels in tf.profile\n    opName = opName + OP_SCOPE_SUFFIX;\n    // tslint:disable-next-line:no-any\n    const f2 = (...args) => {\n        ENGINE.startScope(opName);\n        try {\n            const result = fn(...args);\n            if (isPromise(result)) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            ENGINE.endScope(result);\n            return result;\n        }\n        catch (ex) {\n            ENGINE.endScope(null);\n            throw ex;\n        }\n    };\n    Object.defineProperty(f2, 'name', { value: opName, configurable: true });\n    // tslint:disable-next-line:no-any\n    return f2;\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cast } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Casts a `tf.Tensor` to a new dtype.\n *\n * ```js\n * const x = tf.tensor1d([1.5, 2.5, 3]);\n * tf.cast(x, 'int32').print();\n * ```\n * @param x The input tensor to be casted.\n * @param dtype The dtype to cast the input tensor to.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction cast_(x, dtype) {\n    const $x = convertToTensor(x, 'x', 'cast');\n    // Sanity checks.\n    if (!util.isValidDtype(dtype)) {\n        throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n    }\n    if (dtype === 'string' && $x.dtype !== 'string' ||\n        dtype !== 'string' && $x.dtype === 'string') {\n        throw new Error('Only strings can be casted to strings');\n    }\n    const inputs = { x: $x };\n    const attrs = { dtype };\n    return ENGINE.runKernel(Cast, inputs, attrs);\n}\nexport const cast = op({ cast_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Identity } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Creates a new tensor with the same values and shape as the specified\n * tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n *\n * x.clone().print();\n * ```\n *\n * @param x The tensor to clone.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction clone_(x) {\n    const $x = convertToTensor(x, 'x', 'clone', 'string_or_numeric');\n    const inputs = { x: $x };\n    // Note this op is called tf.identity in python. Hence the kernel name used\n    // here.\n    return ENGINE.runKernel(Identity, inputs);\n}\nexport const clone = op({ clone_ });\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Prints information about the `tf.Tensor` including its data.\n *\n * ```js\n * const verbose = true;\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);\n * ```\n * @param x The tensor to be printed.\n * @param verbose Whether to print verbose information about the ` Tensor`,\n * including dtype and size.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function print(x, verbose = false) {\n    console.log(x.toString(verbose));\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Required side effectful code for tfjs-core\n// Set up Engine and ENV\nimport { getOrMakeEngine } from './engine';\ngetOrMakeEngine();\n// Register backend-agnostic flags.\nimport './flags';\n// Register platforms\nimport './platforms/platform_browser';\nimport './platforms/platform_node';\n// Set up OpHandler\nimport { buffer } from './ops/buffer';\nimport { cast } from './ops/cast';\nimport { clone } from './ops/clone';\nimport { print } from './ops/print';\nimport { setOpHandler } from './tensor';\nconst opHandler = {\n    buffer,\n    cast,\n    clone,\n    print\n};\nsetOpHandler(opHandler);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n    return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nexport class BrowserDownloads {\n    constructor(fileNamePrefix) {\n        if (!env().getBool('IS_BROWSER')) {\n            // TODO(cais): Provide info on what IOHandlers are available under the\n            //   current environment.\n            throw new Error('browserDownloads() cannot proceed because the current environment ' +\n                'is not a browser.');\n        }\n        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n        }\n        if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n        }\n        this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n        this.weightDataFileName =\n            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n    }\n    async save(modelArtifacts) {\n        if (typeof (document) === 'undefined') {\n            throw new Error('Browser downloads are not supported in ' +\n                'this environment since `document` is not present');\n        }\n        const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserDownloads.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const weightsManifest = [{\n                    paths: ['./' + this.weightDataFileName],\n                    weights: modelArtifacts.weightSpecs\n                }];\n            const modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n            const modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], { type: 'application/json' }));\n            // If anchor elements are not provided, create them without attaching them\n            // to parents, so that the downloaded file names can be controlled.\n            const jsonAnchor = this.modelJsonAnchor == null ?\n                document.createElement('a') :\n                this.modelJsonAnchor;\n            jsonAnchor.download = this.modelJsonFileName;\n            jsonAnchor.href = modelJsonURL;\n            // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n            if (modelArtifacts.weightData != null) {\n                const weightDataAnchor = this.weightDataAnchor == null ?\n                    document.createElement('a') :\n                    this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n            }\n            return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };\n        }\n    }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nclass BrowserFiles {\n    constructor(files) {\n        if (files == null || files.length < 1) {\n            throw new Error(`When calling browserFiles, at least 1 file is required, ` +\n                `but received ${files}`);\n        }\n        this.jsonFile = files[0];\n        this.weightsFiles = files.slice(1);\n    }\n    async load() {\n        return new Promise((resolve, reject) => {\n            const jsonReader = new FileReader();\n            jsonReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const modelJSON = JSON.parse(event.target.result);\n                const modelTopology = modelJSON.modelTopology;\n                if (modelTopology == null) {\n                    reject(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));\n                    return;\n                }\n                const weightsManifest = modelJSON.weightsManifest;\n                if (weightsManifest == null) {\n                    reject(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));\n                    return;\n                }\n                if (this.weightsFiles.length === 0) {\n                    resolve({ modelTopology });\n                    return;\n                }\n                const modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n                resolve(modelArtifactsPromise);\n            };\n            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +\n                `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +\n                `Keras-style tf.Model artifacts only.`);\n            jsonReader.readAsText(this.jsonFile);\n        });\n    }\n    loadWeights(weightsManifest) {\n        const weightSpecs = [];\n        const paths = [];\n        for (const entry of weightsManifest) {\n            weightSpecs.push(...entry.weights);\n            paths.push(...entry.paths);\n        }\n        const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);\n        const promises = paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n        return Promise.all(promises).then(buffers => [weightSpecs, concatenateArrayBuffers(buffers)]);\n    }\n    loadWeightsFile(path, file) {\n        return new Promise((resolve, reject) => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const weightData = event.target.result;\n                resolve(weightData);\n            };\n            weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(file);\n        });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n    checkManifestAndWeightFiles(manifest) {\n        const basenames = [];\n        const fileNames = this.weightsFiles.map(file => basename(file.name));\n        const pathToFile = {};\n        for (const group of manifest) {\n            group.paths.forEach(path => {\n                const pathBasename = basename(path);\n                if (basenames.indexOf(pathBasename) !== -1) {\n                    throw new Error(`Duplicate file basename found in weights manifest: ` +\n                        `'${pathBasename}'`);\n                }\n                basenames.push(pathBasename);\n                if (fileNames.indexOf(pathBasename) === -1) {\n                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n                }\n                else {\n                    pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n                }\n            });\n        }\n        if (basenames.length !== this.weightsFiles.length) {\n            throw new Error(`Mismatch in the number of files in weights manifest ` +\n                `(${basenames.length}) and the number of weight files provided ` +\n                `(${this.weightsFiles.length}).`);\n        }\n        return pathToFile;\n    }\n}\nexport const browserDownloadsRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n    return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n    return new BrowserFiles(files);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util';\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n    checkPromises(promises);\n    startFraction = startFraction == null ? 0 : startFraction;\n    endFraction = endFraction == null ? 1 : endFraction;\n    checkFraction(startFraction, endFraction);\n    let resolvedPromise = 0;\n    const registerMonitor = (promise) => {\n        promise.then(value => {\n            const fraction = startFraction +\n                ++resolvedPromise / promises.length * (endFraction - startFraction);\n            // pass fraction as parameter to callback function.\n            onProgress(fraction);\n            return value;\n        });\n        return promise;\n    };\n    function checkPromises(promises) {\n        assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');\n    }\n    function checkFraction(startFraction, endFraction) {\n        assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n        assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n        assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n    }\n    return Promise.all(promises.map(registerMonitor));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {\n    if (loadOptions == null) {\n        loadOptions = {};\n    }\n    const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n        loadOptions.fetchFunc;\n    // Create the requests for all of the weights in parallel.\n    const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));\n    const fetchStartFraction = 0;\n    const fetchEndFraction = 0.5;\n    const responses = loadOptions.onProgress == null ?\n        await Promise.all(requests) :\n        await monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n    const bufferPromises = responses.map(response => response.arrayBuffer());\n    const bufferStartFraction = 0.5;\n    const bufferEndFraction = 1;\n    const buffers = loadOptions.onProgress == null ?\n        await Promise.all(bufferPromises) :\n        await monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n    return buffers;\n}\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {\n    // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n    // single weight from a group, the whole group will be fetched. At a future\n    // date, we should support fetching only the individual shards within a\n    // group that are needed to reconstruct the requested weight.\n    // TODO(cais): Use `decodeWeights` for implementation.\n    const fetchWeights = (fetchUrls) => loadWeightsAsArrayBuffer(fetchUrls, { requestInit });\n    const loadWeights = weightsLoaderFactory(fetchWeights);\n    return loadWeights(manifest, filePathPrefix, weightNames);\n}\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n    return async (manifest, filePathPrefix = '', weightNames) => {\n        // Collect all the groups, weights, and their relative offsets to be\n        // fetched.\n        const groupIndicesToFetchMap = manifest.map(() => false);\n        const groupWeightsToFetch = {};\n        const weightsFound = weightNames != null ? weightNames.map(() => false) : [];\n        const allManifestWeightNames = [];\n        manifest.forEach((manifestGroupConfig, groupIndex) => {\n            let groupOffset = 0;\n            manifestGroupConfig.weights.forEach(weightsEntry => {\n                const rawDtype = ('quantization' in weightsEntry) ?\n                    weightsEntry.quantization.dtype :\n                    weightsEntry.dtype;\n                const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n                    util.sizeFromShape(weightsEntry.shape);\n                const enqueueWeightsForFetchingFn = () => {\n                    groupIndicesToFetchMap[groupIndex] = true;\n                    if (groupWeightsToFetch[groupIndex] == null) {\n                        groupWeightsToFetch[groupIndex] = [];\n                    }\n                    groupWeightsToFetch[groupIndex].push({\n                        manifestEntry: weightsEntry,\n                        groupOffset,\n                        sizeBytes: weightsBytes\n                    });\n                };\n                if (weightNames != null) {\n                    weightNames.forEach((weightName, weightIndex) => {\n                        if (weightName === weightsEntry.name) {\n                            enqueueWeightsForFetchingFn();\n                            weightsFound[weightIndex] = true;\n                        }\n                    });\n                }\n                else {\n                    enqueueWeightsForFetchingFn();\n                }\n                allManifestWeightNames.push(weightsEntry.name);\n                groupOffset += weightsBytes;\n            });\n        });\n        if (!weightsFound.every(found => found)) {\n            const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n            throw new Error(`Could not find weights in manifest with names: ` +\n                `${weightsNotFound.join(', ')}. \\n` +\n                `Manifest JSON has weights with names: ` +\n                `${allManifestWeightNames.join(', ')}.`);\n        }\n        // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n        // IDs.\n        const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n            if (shouldFetch) {\n                accumulator.push(i);\n            }\n            return accumulator;\n        }, []);\n        const fetchUrls = [];\n        groupIndicesToFetch.forEach(i => {\n            manifest[i].paths.forEach(filepath => {\n                const fetchUrl = filePathPrefix +\n                    (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                fetchUrls.push(fetchUrl);\n            });\n        });\n        const buffers = await fetchWeightsFunction(fetchUrls);\n        const weightsTensorMap = {};\n        let bufferIndexOffset = 0;\n        groupIndicesToFetch.forEach(i => {\n            const numBuffers = manifest[i].paths.length;\n            let groupBytes = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                groupBytes += buffers[bufferIndexOffset + i].byteLength;\n            }\n            // Create a buffer for the whole group.\n            const groupBuffer = new ArrayBuffer(groupBytes);\n            const groupByteBuffer = new Uint8Array(groupBuffer);\n            let groupBufferOffset = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n                groupByteBuffer.set(buffer, groupBufferOffset);\n                groupBufferOffset += buffer.byteLength;\n            }\n            const weightsEntries = groupWeightsToFetch[i];\n            weightsEntries.forEach(weightsEntry => {\n                const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n                for (const name in nameToTensorMap) {\n                    weightsTensorMap[name] = nameToTensorMap[name];\n                }\n            });\n            bufferIndexOffset += numBuffers;\n        });\n        return weightsTensorMap;\n    };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest {\n    constructor(path, loadOptions) {\n        this.DEFAULT_METHOD = 'POST';\n        if (loadOptions == null) {\n            loadOptions = {};\n        }\n        this.weightPathPrefix = loadOptions.weightPathPrefix;\n        this.onProgress = loadOptions.onProgress;\n        this.weightUrlConverter = loadOptions.weightUrlConverter;\n        if (loadOptions.fetchFunc != null) {\n            assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' +\n                '`fetch` (see ' +\n                'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n            this.fetch = loadOptions.fetchFunc;\n        }\n        else {\n            this.fetch = env().platform.fetch;\n        }\n        assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n        if (Array.isArray(path)) {\n            assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' +\n                `(actual length is ${path.length}).`);\n        }\n        this.path = path;\n        if (loadOptions.requestInit != null &&\n            loadOptions.requestInit.body != null) {\n            throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n        }\n        this.requestInit = loadOptions.requestInit || {};\n    }\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        const init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);\n        init.body = new FormData();\n        const weightsManifest = [{\n                paths: ['./model.weights.bin'],\n                weights: modelArtifacts.weightSpecs,\n            }];\n        const modelTopologyAndWeightManifest = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');\n        if (modelArtifacts.weightData != null) {\n            init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');\n        }\n        const response = await this.fetch(this.path, init);\n        if (response.ok) {\n            return {\n                modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n                responses: [response],\n            };\n        }\n        else {\n            throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` +\n                `${response.status}.`);\n        }\n    }\n    /**\n     * Load model artifacts via HTTP request(s).\n     *\n     * See the documentation to `tf.io.http` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model artifacts (if loading succeeds).\n     */\n    async load() {\n        const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n        if (!modelConfigRequest.ok) {\n            throw new Error(`Request to ${this.path} failed with status code ` +\n                `${modelConfigRequest.status}. Please verify this URL points to ` +\n                `the model JSON of the model to load.`);\n        }\n        let modelJSON;\n        try {\n            modelJSON = await modelConfigRequest.json();\n        }\n        catch (e) {\n            let message = `Failed to parse model JSON of response from ${this.path}.`;\n            // TODO(nsthorat): Remove this after some time when we're comfortable that\n            // .pb files are mostly gone.\n            if (this.path.endsWith('.pb')) {\n                message += ' Your path contains a .pb file extension. ' +\n                    'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n                    'in favor of .json models. You can re-convert your Python ' +\n                    'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n                    'or you can convert your.pb models with the \\'pb2json\\'' +\n                    'NPM script in the tensorflow/tfjs-converter repository.';\n            }\n            else {\n                message += ' Please make sure the server is serving valid ' +\n                    'JSON for this request.';\n            }\n            throw new Error(message);\n        }\n        // We do not allow both modelTopology and weightsManifest to be missing.\n        const modelTopology = modelJSON.modelTopology;\n        const weightsManifest = modelJSON.weightsManifest;\n        if (modelTopology == null && weightsManifest == null) {\n            throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` +\n                `topology or manifest for weights.`);\n        }\n        return getModelArtifactsForJSON(modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n    }\n    async loadWeights(weightsManifest) {\n        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n        const [prefix, suffix] = parseUrl(weightPath);\n        const pathPrefix = this.weightPathPrefix || prefix;\n        const weightSpecs = [];\n        for (const entry of weightsManifest) {\n            weightSpecs.push(...entry.weights);\n        }\n        const fetchURLs = [];\n        const urlPromises = [];\n        for (const weightsGroup of weightsManifest) {\n            for (const path of weightsGroup.paths) {\n                if (this.weightUrlConverter != null) {\n                    urlPromises.push(this.weightUrlConverter(path));\n                }\n                else {\n                    fetchURLs.push(pathPrefix + path + suffix);\n                }\n            }\n        }\n        if (this.weightUrlConverter) {\n            fetchURLs.push(...await Promise.all(urlPromises));\n        }\n        const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n            requestInit: this.requestInit,\n            fetchFunc: this.fetch,\n            onProgress: this.onProgress\n        });\n        return [weightSpecs, concatenateArrayBuffers(buffers)];\n    }\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url) {\n    const lastSlash = url.lastIndexOf('/');\n    const lastSearchParam = url.lastIndexOf('?');\n    const prefix = url.substring(0, lastSlash);\n    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n    return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n    if (typeof fetch === 'undefined' &&\n        (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n    }\n    else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n            isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        }\n        else {\n            isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n            return http(url, loadOptions);\n        }\n    }\n    return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path, loadOptions) {\n    return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(path, loadOptions) {\n    return http(path, loadOptions);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass PassthroughLoader {\n    constructor(modelArtifacts) {\n        this.modelArtifacts = modelArtifacts;\n    }\n    async load() {\n        return this.modelArtifacts;\n    }\n}\nclass PassthroughSaver {\n    constructor(saveHandler) {\n        this.saveHandler = saveHandler;\n    }\n    async save(modelArtifacts) {\n        return this.saveHandler(modelArtifacts);\n    }\n}\n/**\n * Creates an IOHandler that loads model artifacts from memory.\n *\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\n *     modelTopology, weightSpecs, weightData));\n * ```\n *\n * @param modelArtifacts a object containing model topology (i.e., parsed from\n *   the JSON format).\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\n *   names, shapes, types, and quantization of the weight data.\n * @param weightData A single `ArrayBuffer` containing the weight data,\n *   concatenated in the order described by the weightSpecs.\n * @param trainingConfig Model training configuration. Optional.\n *\n * @returns A passthrough `IOHandler` that simply loads the provided data.\n */\nexport function fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {\n    if (arguments.length === 1) {\n        const isModelArtifacts = modelArtifacts.modelTopology != null ||\n            modelArtifacts.weightSpecs != null;\n        if (isModelArtifacts) {\n            return new PassthroughLoader(modelArtifacts);\n        }\n        else {\n            // Legacy support: with only modelTopology.\n            // TODO(cais): Remove this deprecated API.\n            console.warn('Please call tf.io.fromMemory() with only one argument. ' +\n                'The argument should be of type ModelArtifacts. ' +\n                'The multi-argument signature of tf.io.fromMemory() has been ' +\n                'deprecated and will be removed in a future release.');\n            return new PassthroughLoader({ modelTopology: modelArtifacts });\n        }\n    }\n    else {\n        // Legacy support.\n        // TODO(cais): Remove this deprecated API.\n        console.warn('Please call tf.io.fromMemory() with only one argument. ' +\n            'The argument should be of type ModelArtifacts. ' +\n            'The multi-argument signature of tf.io.fromMemory() has been ' +\n            'deprecated and will be removed in a future release.');\n        return new PassthroughLoader({\n            modelTopology: modelArtifacts,\n            weightSpecs,\n            weightData,\n            trainingConfig\n        });\n    }\n}\n/**\n * Creates an IOHandler that passes saved model artifacts to a callback.\n *\n * ```js\n * function handleSave(artifacts) {\n *   // ... do something with the artifacts ...\n *   return {modelArtifactsInfo: {...}, ...};\n * }\n *\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\n * ```\n *\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\n *     `SaveResult`.\n */\nexport function withSaveHandler(saveHandler) {\n    return new PassthroughSaver(saveHandler);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Importing local_storage and indexed_db is necessary for the routers to be\n// registered.\nimport './indexed_db';\nimport './local_storage';\nimport { browserFiles } from './browser_files';\nimport { browserHTTPRequest, http, isHTTPScheme } from './http';\nimport { concatenateArrayBuffers, decodeWeights, encodeWeights, getModelArtifactsForJSON, getModelArtifactsInfoForJSON } from './io_utils';\nimport { fromMemory, withSaveHandler } from './passthrough';\nimport { getLoadHandlers, getSaveHandlers, registerLoadRouter, registerSaveRouter } from './router_registry';\nimport { loadWeights, weightsLoaderFactory } from './weights_loader';\nexport { copyModel, listModels, moveModel, removeModel } from './model_management';\nexport { browserFiles, browserHTTPRequest, concatenateArrayBuffers, decodeWeights, encodeWeights, fromMemory, getLoadHandlers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getSaveHandlers, http, isHTTPScheme, loadWeights, registerLoadRouter, registerSaveRouter, weightsLoaderFactory, withSaveHandler };\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(inShape, outShape) {\n    const inRank = inShape.length;\n    const dims = [];\n    for (let i = 0; i < inRank; i++) {\n        const dim = inRank - 1 - i;\n        const a = inShape[dim] || 1;\n        const b = outShape[outShape.length - 1 - i] || 1;\n        if (b > 1 && a === 1) {\n            dims.unshift(dim);\n        }\n    }\n    return dims;\n}\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\nexport function getReductionAxes(inShape, outShape) {\n    const result = [];\n    for (let i = 0; i < outShape.length; i++) {\n        const inDim = inShape[inShape.length - i - 1];\n        const outAxis = outShape.length - i - 1;\n        const outDim = outShape[outAxis];\n        if (inDim == null || (inDim === 1 && outDim > 1)) {\n            result.unshift(outAxis);\n        }\n    }\n    return result;\n}\nexport function assertAndGetBroadcastShape(shapeA, shapeB) {\n    const result = [];\n    const l = Math.max(shapeA.length, shapeB.length);\n    for (let i = 0; i < l; i++) {\n        let a = shapeA[shapeA.length - i - 1];\n        if (a == null) {\n            a = 1;\n        }\n        let b = shapeB[shapeB.length - i - 1];\n        if (b == null) {\n            b = 1;\n        }\n        if (a === 1) {\n            result.unshift(b);\n        }\n        else if (b === 1) {\n            result.unshift(a);\n        }\n        else if (a !== b) {\n            const errMsg = `Operands could not be broadcast together with shapes ` +\n                `${shapeA} and ${shapeB}.`;\n            throw Error(errMsg);\n        }\n        else {\n            result.unshift(a);\n        }\n    }\n    return result;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nconst NEW_AXIS = -2;\nconst SHRINK_AXIS = -1;\nexport function assertParamsValid(input, begin, size) {\n    const inputRank = input.shape.length;\n    util.assert(inputRank === begin.length, () => `Error in slice${inputRank}D: Length of begin ${begin} must ` +\n        `match the rank of the array (${inputRank}).`);\n    util.assert(inputRank === size.length, () => `Error in slice${inputRank}D: Length of size ${size} must ` +\n        `match the rank of the array (${inputRank}).`);\n    for (let i = 0; i < inputRank; ++i) {\n        util.assert(begin[i] + size[i] <= input.shape[i], () => `Error in slice${inputRank}D: begin[${i}] + size[${i}] ` +\n            `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${input.shape[i]})`);\n    }\n}\n/** Converts a binary mask to an array of axes. Used in stridedSlice(). */\nexport function maskToAxes(mask) {\n    const axes = [];\n    let axis = 0;\n    while (mask > 0) {\n        if (mask & 1) {\n            axes.push(axis);\n        }\n        mask /= 2;\n        axis++;\n    }\n    return axes;\n}\n/** Computes the output shape given the strided slice params. */\nexport function computeOutShape(begin, end, strides) {\n    const size = [];\n    for (let axis = 0; axis < begin.length; axis++) {\n        size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);\n    }\n    return size;\n}\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stride value. Otherwise, insert.\nexport function stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {\n    const newStrides = [...strides];\n    for (let i = newStrides.length; i < inputShape.length; i++) {\n        newStrides.push(1);\n    }\n    for (let i = 0; i < numElidedAxes; i++) {\n        if (i === 0) {\n            newStrides[ellipsisInsertionIndex] = 1;\n        }\n        else {\n            newStrides.splice(ellipsisInsertionIndex, 0 /* num elements to delete */, 1 /* element to add */);\n            newStrides.pop();\n        }\n    }\n    return newStrides;\n}\nfunction unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {\n    if (normalizedAxis <= ellipsisInsertionIndex) {\n        return normalizedAxis;\n    }\n    return normalizedAxis - (numElidedAxes - 1);\n}\nfunction getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {\n    const elidedAxes = [];\n    for (let i = 0; i < numElidedAxes; i++) {\n        elidedAxes.push(ellipsisInsertionIndex + i);\n    }\n    return elidedAxes;\n}\n// Normalize the start, end and strides.\nexport function getNormalizedAxes(inputShape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask) {\n    const inputRank = inputShape.length;\n    let normalizedBegin = new Array(inputRank), normalizedEnd = new Array(inputRank), normalizedStrides = new Array(inputRank);\n    if (ellipsisAxes.length && numInterpolatedAxes > 0) {\n        const fullIndex = ellipsisAxes[0];\n        // The ellipsis applies to the masked index as well as any dimensions\n        // that are interpolated.\n        const numElidedAxes = numInterpolatedAxes + 1;\n        normalizedBegin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, inputShape);\n        normalizedEnd = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, inputShape);\n        normalizedStrides =\n            stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);\n    }\n    else {\n        for (let axis = 0; axis < inputRank; axis++) {\n            normalizedBegin[axis] = startForAxis(beginMask, begin, strides, inputShape, axis, ellipsisMask);\n            normalizedEnd[axis] =\n                stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);\n            normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);\n        }\n    }\n    return {\n        begin: normalizedBegin,\n        end: normalizedEnd,\n        strides: normalizedStrides\n    };\n}\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current start value. Otherwise, insert.\nexport function startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {\n    const newIndices = [...inputShape];\n    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n    for (let axis = 0; axis < newIndices.length; axis++) {\n        if (elidedAxes.indexOf(axis) > -1) {\n            newIndices[axis] = 0;\n        }\n        else {\n            const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n            let originalValue = originalBegin[originalAxis];\n            if (beginMask & 1 << originalAxis) {\n                originalValue = 0;\n            }\n            newIndices[axis] = originalValue;\n        }\n    }\n    return newIndices;\n}\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stop value. Otherwise, insert.\nexport function stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {\n    const newIndices = [...inputShape];\n    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n    for (let axis = 0; axis < newIndices.length; axis++) {\n        if (elidedAxes.indexOf(axis) > -1) {\n            newIndices[axis] = Number.MAX_SAFE_INTEGER;\n        }\n        else {\n            const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n            let originalValue = originalEnd[originalAxis];\n            if (endMask & 1 << originalAxis) {\n                originalValue = Number.MAX_SAFE_INTEGER;\n            }\n            newIndices[axis] = originalValue;\n        }\n    }\n    for (let i = 0; i < newIndices.length; i++) {\n        // Handle negative indices\n        const axisSize = inputShape[i];\n        if (newIndices[i] < 0) {\n            newIndices[i] += axisSize;\n        }\n        newIndices[i] = util.clamp(0, newIndices[i], inputShape[i]);\n    }\n    return newIndices;\n}\nexport function stridesForAxis(strides, axis, ellipsisMask) {\n    let stride = strides[axis];\n    if (ellipsisMask & (1 << axis) || stride == null) {\n        stride = 1;\n    }\n    return stride;\n}\nexport function startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {\n    // Begin with the specified index\n    let start = startIndices[axis];\n    const stride = strides[axis] || 1;\n    // Check the axis bit from right of masked axes, or the begin index is not set\n    // for the axis.\n    if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {\n        if (stride > 0) {\n            // Forward iteration - use the first element. These values will get\n            // clamped below (Note: We could have set them to 0 and axis_size-1, but\n            // use lowest() and max() to maintain symmetry with StopForAxis())\n            start = Number.MIN_SAFE_INTEGER;\n        }\n        else {\n            // Backward iteration - use the last element.\n            start = Number.MAX_SAFE_INTEGER;\n        }\n    }\n    // Handle negative indices\n    const axisSize = inputShape[axis];\n    if (start < 0) {\n        start += axisSize;\n    }\n    // Clamping\n    start = util.clamp(0, start, axisSize - 1);\n    return start;\n}\nexport function stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {\n    // Begin with the specified index\n    let stop = stopIndices[axis];\n    const stride = strides[axis] || 1;\n    // Check the axis bit from right of masked axes, or if the stop index is not\n    // set for this axis.\n    if (endMask & (1 << axis) || ellipsisMask & (1 << axis) || stop == null) {\n        if (stride > 0) {\n            // Forward iteration - use the last element. These values will get\n            // clamped below\n            stop = Number.MAX_SAFE_INTEGER;\n        }\n        else {\n            // Backward iteration - use the first element.\n            stop = Number.MIN_SAFE_INTEGER;\n        }\n    }\n    // Handle negative indices\n    const axisSize = inputShape[axis];\n    if (stop < 0) {\n        stop += axisSize;\n    }\n    // Clamping\n    // Because the end index points one past the last element, we need slightly\n    // different clamping ranges depending on the direction.\n    if (stride > 0) {\n        // Forward iteration\n        stop = util.clamp(0, stop, axisSize);\n    }\n    else {\n        // Backward iteration\n        stop = util.clamp(-1, stop, axisSize - 1);\n    }\n    return stop;\n}\n/**\n * Returns true if the slice occupies a continous set of elements in the\n * 'flat' space.\n */\nexport function isSliceContinous(shape, begin, size) {\n    // Index of the first axis that has size > 1.\n    let firstNonOneAxis = size.length;\n    for (let i = 0; i < size.length; i++) {\n        if (size[i] > 1) {\n            firstNonOneAxis = i;\n            break;\n        }\n    }\n    for (let i = firstNonOneAxis + 1; i < size.length; i++) {\n        if (begin[i] > 0 || size[i] !== shape[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function computeFlatOffset(begin, strides) {\n    let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;\n    for (let i = 0; i < begin.length - 1; i++) {\n        flatOffset += begin[i] * strides[i];\n    }\n    return flatOffset;\n}\nexport function parseSliceParams(x, begin, size) {\n    // The following logic allows for more ergonomic calls.\n    let begin_;\n    const xRank = x.shape.length;\n    if (typeof begin === 'number') {\n        begin_ = [begin, ...new Array(xRank - 1).fill(0)];\n    }\n    else if (begin.length < xRank) {\n        begin_ = begin.concat(new Array(xRank - begin.length).fill(0));\n    }\n    else {\n        begin_ = begin.slice();\n    }\n    begin_.forEach(d => {\n        util.assert(d !== -1, () => 'slice() does not support negative begin indexing.');\n    });\n    let size_;\n    if (size == null) {\n        size_ = new Array(xRank).fill(-1);\n    }\n    else if (typeof size === 'number') {\n        size_ = [size, ...new Array(xRank - 1).fill(-1)];\n    }\n    else if (size.length < xRank) {\n        size_ = size.concat(new Array(xRank - size.length).fill(-1));\n    }\n    else {\n        size_ = size;\n    }\n    size_ = size_.map((d, i) => {\n        if (d >= 0) {\n            return d;\n        }\n        else {\n            util.assert(d === -1, () => `Negative size values should be exactly -1 but got ` +\n                `${d} for the slice() size at index ${i}.`);\n            return x.shape[i] - begin_[i];\n        }\n    });\n    return [begin_, size_];\n}\n// Convert the slicing specification from a sparse representation to a dense\n// representation. This means that all ellipses and newaxis are expanded out.\nexport function sliceInfo(xShape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {\n    let stridesNonNull;\n    if (strides == null) {\n        stridesNonNull = new Array(begin.length);\n        stridesNonNull.fill(1);\n    }\n    else {\n        stridesNonNull = strides;\n    }\n    // Only one non-zero bit is allowed in ellipsisMask, which means ellipsisMask\n    // is a power of 2. Use bit compares to ensure ellipsisMask is 0 or a power\n    // of 2. When i is a power of 2, i & (i - 1) is always 0.\n    // Also ref:\n    // https://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2\n    if (ellipsisMask != null && (ellipsisMask & (ellipsisMask - 1)) !== 0) {\n        throw new Error('Multiple ellipses in slice is not allowed.');\n    }\n    // Step 1: Account for ellipsis and new axis.\n    // Check for ellipsis and count how many non-newaxis there are after.\n    let ellipsisSeen = false;\n    const sparseSpec = {\n        dims: stridesNonNull.length,\n        numAddAxisAfterEllipsis: 0,\n        begin: begin.slice(),\n        end: end.slice(),\n        strides: stridesNonNull.slice(),\n        beginMask,\n        endMask,\n        ellipsisMask,\n        newAxisMask,\n        shrinkAxisMask\n    };\n    for (let i = 0; i < sparseSpec.dims; i++) {\n        if (ellipsisSeen && ((1 << i) & newAxisMask) !== 0) {\n            sparseSpec.numAddAxisAfterEllipsis++;\n        }\n        if ((1 << i) & ellipsisMask) {\n            ellipsisSeen = true;\n        }\n    }\n    // If no ellipsis insert one at the end.\n    if (!ellipsisSeen) {\n        sparseSpec.ellipsisMask |= (1 << sparseSpec.dims);\n        sparseSpec.dims++; // this effects loop iteration below\n    }\n    // Step 2: Make a sparse spec into a full index spec.\n    //\n    // The sparse spec deos not correspond to the number of dimensions.\n    // Make a dense spec that cooresponds to the number of dimensions.\n    //\n    // For example suppose foo[...,3:] on foo.shape = [2, 2, 3] then we need to\n    // produce the missing beginMask for the first two dimensions i.e. from\n    // beginMaskSpec = 0, endMaskSpec = 2, we achieve beginMask = 6 (110),\n    // endMask = 7 (111).\n    const denseSpec = {\n        dims: xShape.length,\n        beginMask: 0,\n        endMask: 0,\n        beginValid: false,\n        endValid: false\n    };\n    buildDenseSpec(sparseSpec, denseSpec);\n    // Step 3: Make implicit ranges (non-zero beginMasks and endMasks) explicit\n    // and bounds check.\n    let isIdentity = true;\n    let sliceDim0 = true;\n    let isSimpleSlice = true;\n    const processingShape = [];\n    const finalShape = [];\n    for (let i = 0; i < xShape.length; ++i) {\n        if (denseSpec.strides[i] === 0) {\n            throw Error(`strides[${i}] must be non-zero`);\n        }\n        const shrinkI = !!(denseSpec.shrinkAxisMask & (1 << i));\n        const dimI = xShape[i];\n        if (dimI === -1) {\n            processingShape.push(shrinkI ? 1 : -1);\n            continue;\n        }\n        const masks = [denseSpec.beginMask & (1 << i), denseSpec.endMask & (1 << i)];\n        const validRange = [\n            denseSpec.strides[i] > 0 ? 0 : -1,\n            denseSpec.strides[i] > 0 ? dimI : dimI - 1\n        ];\n        if (shrinkI && denseSpec.strides[i] <= 0) {\n            throw Error('only stride 1 allowed on non-range indexing.');\n        }\n        isSimpleSlice = isSimpleSlice && (denseSpec.strides[i] === 1);\n        const beginAndEndMasked = !!((denseSpec.beginMask & (1 << i)) && (denseSpec.endMask & (1 << i)));\n        if (denseSpec.beginValid && denseSpec.endValid) {\n            if (shrinkI) {\n                // If we are shrinking, the end index is now possibly incorrect. In\n                // particular foo[-1] produces sparseBegin = -1, sparseEnd = 0.\n                // and canonical puts these to n-1 and 0, which implies a degenerate\n                // interval. Fortunately, it is now safe to re-create end as begin + 1.\n                const xFwd = denseSpec.begin[i] < 0 ? dimI + denseSpec.begin[i] :\n                    denseSpec.begin[i];\n                denseSpec.begin[i] = xFwd;\n                denseSpec.end[i] = denseSpec.begin[i] + 1;\n                if (xFwd < 0 || xFwd >= dimI) {\n                    throw Error(`slice index ${denseSpec.begin[i]} of dimension ${i} out of bounds.`);\n                }\n            }\n            else {\n                denseSpec.begin[i] = canonical(denseSpec.begin[i], 0, denseSpec.strides[i], dimI, masks, validRange);\n                denseSpec.end[i] = canonical(denseSpec.end[i], 1, denseSpec.strides[i], dimI, masks, validRange);\n            }\n            // Update optimization values\n            const takeAllInDimension = denseSpec.strides[i] === 1 &&\n                denseSpec.begin[i] === 0 && denseSpec.end[i] === dimI;\n            isIdentity = isIdentity && takeAllInDimension;\n            sliceDim0 = sliceDim0 &&\n                ((i === 0 && denseSpec.strides[i] === 1) || takeAllInDimension);\n        }\n        else {\n            isIdentity =\n                isIdentity && ((denseSpec.strides[i] === 1) && beginAndEndMasked);\n            sliceDim0 = sliceDim0 &&\n                ((i === 0 && denseSpec.strides[i] === 1) || beginAndEndMasked);\n        }\n        // Compute the processing shape (the intermediate Eigen will produce)\n        let intervalLength;\n        let knownInterval = false;\n        if (denseSpec.beginValid && denseSpec.endValid) {\n            intervalLength = denseSpec.end[i] - denseSpec.begin[i];\n            knownInterval = true;\n        }\n        else if (shrinkI) {\n            // The dimension is still known as 1 for the processingShape, but will be\n            // discarded for the final shape.\n            intervalLength = 1;\n            knownInterval = true;\n        }\n        else if (beginAndEndMasked) {\n            // Even if we don't have values for begin or end, we do know that this\n            // dimension covers the whole interval. If we have shape information for\n            // this dimension, that tells us the interval length.\n            if (dimI >= 0) {\n                if (denseSpec.strides[i] < 0) {\n                    intervalLength = -dimI;\n                }\n                else {\n                    intervalLength = dimI;\n                }\n                knownInterval = true;\n            }\n        }\n        if (knownInterval) {\n            let sizeI;\n            // Hold zero if the interval is degenerate, otherwise account for\n            // remainder\n            if (intervalLength === 0 ||\n                ((intervalLength < 0) !== (denseSpec.strides[i] < 0))) {\n                sizeI = 0;\n            }\n            else {\n                sizeI = Math.trunc(intervalLength / denseSpec.strides[i]) +\n                    (intervalLength % denseSpec.strides[i] !== 0 ? 1 : 0);\n            }\n            processingShape.push(sizeI);\n        }\n        else {\n            processingShape.push(-1);\n        }\n    }\n    // Step 4: Compute the final shape\n    //\n    // newAxis will increase dimension by 1 (with a one-size dimension)\n    // slices like foo[3, ...] will reduce dimension by 1.\n    // This cannot be done earlier, because it depends on Step 3.\n    for (let denseDim = 0; denseDim < denseSpec.finalShapeGatherIndices.length; ++denseDim) {\n        const gatherIndex = denseSpec.finalShapeGatherIndices[denseDim];\n        if (gatherIndex >= 0) {\n            finalShape.push(processingShape[gatherIndex]);\n        }\n        else if (gatherIndex === NEW_AXIS) {\n            finalShape.push(1);\n        }\n    }\n    const finalShapeSparse = finalShape.filter((dim, i) => denseSpec.finalShapeGatherIndices[i] !== NEW_AXIS);\n    return {\n        finalShapeSparse,\n        finalShape,\n        isIdentity,\n        sliceDim0,\n        isSimpleSlice,\n        begin: denseSpec.begin,\n        end: denseSpec.end,\n        strides: denseSpec.strides\n    };\n}\nfunction buildDenseSpec(sparse, dense) {\n    dense.beginMask = 0;\n    dense.endMask = 0;\n    dense.shrinkAxisMask = 0;\n    let fullIndex = 0;\n    dense.beginValid = sparse.begin != null;\n    dense.endValid = sparse.end != null;\n    dense.begin = new Array(dense.dims);\n    dense.end = new Array(dense.dims);\n    dense.strides = new Array(dense.dims);\n    dense.finalShapeGatherIndices = [];\n    dense.finalShapeGatherIndicesSparse = [];\n    dense.inputShapeGatherIndicesSparse = new Array(dense.dims);\n    for (let i = 0; i < sparse.dims; i++) {\n        if ((1 << i) & sparse.ellipsisMask) {\n            // Only the bit that has ellipsis will fall in this condition.\n            // Expand the ellipsis into the appropriate indices\n            // Note: this only works because we guaranteed one ellipsis.\n            const nextIndex = Math.min(dense.dims - (sparse.dims - i) + 1 + sparse.numAddAxisAfterEllipsis, dense.dims);\n            for (; fullIndex < nextIndex; fullIndex++) {\n                // newAxis aren't real axis so you have to skip.\n                dense.begin[fullIndex] = 0;\n                dense.end[fullIndex] = 0;\n                dense.strides[fullIndex] = 1;\n                dense.beginMask |= (1 << fullIndex);\n                dense.endMask |= (1 << fullIndex);\n                dense.finalShapeGatherIndices.push(fullIndex);\n                dense.finalShapeGatherIndicesSparse.push(-1);\n                dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n            }\n        }\n        else if ((1 << i) & sparse.newAxisMask) {\n            // Only the bit that has newAxis will fall in this condition.\n            dense.finalShapeGatherIndices.push(NEW_AXIS);\n            dense.finalShapeGatherIndicesSparse.push(-1);\n        }\n        else {\n            if (fullIndex === dense.begin.length) {\n                throw Error(`Index out of range using input dim ${fullIndex}; input ` +\n                    `has only ${dense.dims} dims, ${dense.begin.length}.`);\n            }\n            // Gather slicing spec into appropriate index.\n            if (sparse.begin != null) {\n                dense.begin[fullIndex] = sparse.begin[i];\n            }\n            if (sparse.end != null) {\n                dense.end[fullIndex] = sparse.end[i];\n            }\n            dense.strides[fullIndex] = sparse.strides[i];\n            if (sparse.beginMask & (1 << i)) {\n                dense.beginMask |= (1 << fullIndex);\n            }\n            if (sparse.endMask & (1 << i)) {\n                dense.endMask |= (1 << fullIndex);\n            }\n            // If shrink, record where to get the dimensionality from (i.e. newAxis)\n            // creates a fake 1 size dimension. Also remember shrink axis (now in\n            // dense form) so we can ignore dense.end below.\n            if (sparse.shrinkAxisMask & (1 << i)) {\n                dense.finalShapeGatherIndices.push(SHRINK_AXIS);\n                dense.finalShapeGatherIndicesSparse.push(-1);\n                dense.shrinkAxisMask |= (1 << fullIndex);\n            }\n            else {\n                dense.finalShapeGatherIndices.push(fullIndex);\n                // Remember that where in the sparse shape the dense dim comes from.\n                dense.finalShapeGatherIndicesSparse.push(i);\n            }\n            dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n            fullIndex++;\n        }\n    }\n}\nfunction canonical(x, c, strideI, dimI, masks, validRange) {\n    if (masks[c]) {\n        return strideI > 0 ? validRange[c] : validRange[(c + 1) & 1];\n    }\n    else {\n        const xFwd = x < 0 ? dimI + x : x; // make negative indices positive\n        return xFwd < validRange[0] ? validRange[0] :\n            xFwd > validRange[1] ? validRange[1] : xFwd;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { assert, assertNonNegativeIntegerDimensions, flatten, inferDtype, isTypedArray, sizeFromShape, toTypedArray } from '../util';\n/** This is shared code across all tensor creation methods. */\nexport function makeTensor(values, shape, inferredShape, dtype) {\n    if (dtype == null) {\n        dtype = inferDtype(values);\n    }\n    if (dtype === 'complex64') {\n        throw new Error(`Cannot construct a complex64 tensor directly. ` +\n            `Please use tf.complex(real, imag).`);\n    }\n    if (!isTypedArray(values) && !Array.isArray(values) &&\n        typeof values !== 'number' && typeof values !== 'boolean' &&\n        typeof values !== 'string') {\n        throw new Error('values passed to tensor(values) must be a number/boolean/string or ' +\n            'an array of numbers/booleans/strings, or a TypedArray');\n    }\n    if (shape != null) {\n        assertNonNegativeIntegerDimensions(shape);\n        const providedSize = sizeFromShape(shape);\n        const inferredSize = sizeFromShape(inferredShape);\n        assert(providedSize === inferredSize, () => `Based on the provided shape, [${shape}], the tensor should have ` +\n            `${providedSize} values but has ${inferredSize}`);\n        for (let i = 0; i < inferredShape.length; ++i) {\n            const inferred = inferredShape[i];\n            const flatDimsDontMatch = i === inferredShape.length - 1 ?\n                inferred !== sizeFromShape(shape.slice(i)) :\n                true;\n            assert(inferredShape[i] === shape[i] || !flatDimsDontMatch, () => `Error creating a new Tensor. Inferred shape ` +\n                `(${inferredShape}) does not match the provided ` +\n                `shape (${shape}). `);\n        }\n    }\n    if (!isTypedArray(values) && !Array.isArray(values)) {\n        values = [values];\n    }\n    shape = shape || inferredShape;\n    values = dtype !== 'string' ?\n        toTypedArray(values, dtype) :\n        flatten(values, [], true);\n    return ENGINE.makeTensor(values, shape, dtype);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isTypedArray } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.scalar` as it makes the code more readable.\n *\n * ```js\n * tf.scalar(3.14).print();\n * ```\n *\n * @param value The value of the scalar.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function scalar(value, dtype) {\n    if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&\n        dtype !== 'complex64') {\n        throw new Error('Error creating a new Scalar: value must be a primitive ' +\n            '(number|boolean|string)');\n    }\n    if (dtype === 'string' && isTypedArray(value) &&\n        !(value instanceof Uint8Array)) {\n        throw new Error('When making a scalar from encoded string, ' +\n            'the value must be `Uint8Array`.');\n    }\n    const shape = [];\n    const inferredShape = [];\n    return makeTensor(value, shape, inferredShape, dtype);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Complex } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Converts two real numbers to a complex number.\n *\n * Given a tensor `real` representing the real part of a complex number, and a\n * tensor `imag` representing the imaginary part of a complex number, this\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\n * where r represents the real part and i represents the imag part.\n *\n * The input tensors real and imag must have the same shape.\n *\n * ```js\n * const real = tf.tensor1d([2.25, 3.25]);\n * const imag = tf.tensor1d([4.75, 5.75]);\n * const complex = tf.complex(real, imag);\n *\n * complex.print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction complex_(real, imag) {\n    const $real = convertToTensor(real, 'real', 'complex');\n    const $imag = convertToTensor(imag, 'imag', 'complex');\n    util.assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` +\n        `must match in call to tf.complex().`);\n    const inputs = { real: $real, imag: $imag };\n    return ENGINE.runKernel(Complex, inputs);\n}\nexport const complex = op({ complex_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { makeZerosTypedArray, sizeFromShape } from '../util';\nimport { complex } from './complex';\n/**\n * Creates a `tf.Tensor` with all elements set to 0.\n *\n * ```js\n * tf.zeros([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Can\n *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function zeros(shape, dtype = 'float32') {\n    if (dtype === 'complex64') {\n        const real = zeros(shape, 'float32');\n        const imag = zeros(shape, 'float32');\n        return complex(real, imag);\n    }\n    const values = makeZerosTypedArray(sizeFromShape(shape), dtype);\n    return ENGINE.makeTensor(values, shape, dtype);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Concat } from '../kernel_names';\nimport { convertToTensorArray } from '../tensor_util_env';\nimport { assert } from '../util';\nimport { clone } from './clone';\nimport { op } from './operation';\n/**\n * Concatenates a list of `tf.Tensor`s along a given axis.\n *\n * The tensors ranks and types must match, and their sizes must match in all\n * dimensions except `axis`.\n *\n * Also available are stricter rank-specific methods that assert that\n * `tensors` are of the given rank:\n *   - `tf.concat1d`\n *   - `tf.concat2d`\n *   - `tf.concat3d`\n *   - `tf.concat4d`\n *\n * Except `tf.concat1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * a.concat(b).print();  // or a.concat(b)\n * ```\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.concat([a, b, c]).print();\n * ```\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [10, 20]]);\n * const b = tf.tensor2d([[3, 4], [30, 40]]);\n * const axis = 1;\n * tf.concat([a, b], axis).print();\n * ```\n * @param tensors A list of tensors to concatenate.\n * @param axis The axis to concate along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction concat_(tensors, axis = 0) {\n    assert(tensors.length >= 1, () => 'Pass at least one tensor to concat');\n    const $tensors = convertToTensorArray(tensors, 'tensors', 'concat', 'string_or_numeric');\n    if ($tensors[0].dtype === 'complex64') {\n        $tensors.forEach(tensor => {\n            if (tensor.dtype !== 'complex64') {\n                throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${tensor.dtype}. `);\n            }\n        });\n    }\n    if ($tensors.length === 1) {\n        return clone($tensors[0]);\n    }\n    const inputs = $tensors;\n    const attr = { axis };\n    return ENGINE.runKernel(Concat, inputs, attr);\n}\nexport const concat = op({ concat_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Imag } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns the imaginary part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the imaginary part of each element in input considered as a complex number.\n * If input is real, a tensor of all zeros is returned.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.imag(x).print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction imag_(input) {\n    const $input = convertToTensor(input, 'input', 'imag');\n    const inputs = { input: $input };\n    return ENGINE.runKernel(Imag, inputs);\n}\nexport const imag = op({ imag_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Real } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns the real part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the real part of each element in input considered as a complex number.\n *\n * If the input is real, it simply makes a clone.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.real(x).print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction real_(input) {\n    const $input = convertToTensor(input, 'input', 'real');\n    const inputs = { input: $input };\n    return ENGINE.runKernel(Real, inputs);\n}\nexport const real = op({ real_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Reshape } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Reshapes a `tf.Tensor` to a given shape.\n *\n * Given an input tensor, returns a new tensor with the same values as the\n * input tensor with shape `shape`.\n *\n * If one component of shape is the special value -1, the size of that\n * dimension is computed so that the total size remains constant. In\n * particular, a shape of [-1] flattens into 1-D. At most one component of\n * shape can be -1.\n *\n * If shape is 1-D or higher, then the operation returns a tensor with shape\n * shape filled with the values of tensor. In this case, the number of\n * elements implied by shape must be the same as the number of elements in\n * tensor.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.reshape([2, 2]).print();\n * ```\n *\n * @param x The input tensor to be reshaped.\n * @param shape An array of integers defining the output tensor shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction reshape_(x, shape) {\n    const $x = convertToTensor(x, 'x', 'reshape', 'string_or_numeric');\n    const inputs = { x: $x };\n    const attrs = { shape };\n    return ENGINE.runKernel(Reshape, inputs, attrs);\n}\nexport const reshape = op({ reshape_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Slice } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\n * and is of size `size`.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `x` is of the given rank:\n *   - `tf.slice1d`\n *   - `tf.slice2d`\n *   - `tf.slice3d`\n *   - `tf.slice4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.slice([1], [2]).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * x.slice([1, 0], [1, 2]).print();\n * ```\n * @param x The input `tf.Tensor` to slice from.\n * @param begin The coordinates to start the slice from. The length can be\n *     less than the rank of x - the rest of the axes will have implicit 0 as\n *     start. Can also be a single number, in which case it specifies the\n *     first axis.\n * @param size The size of the slice. The length can be less than the rank of\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\n *     the rest of the dimensions in the axis. Can also be a single number,\n *     in which case it specifies the size of the first axis.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction slice_(x, begin, size) {\n    const $x = convertToTensor(x, 'x', 'slice', 'string_or_numeric');\n    if ($x.rank === 0) {\n        throw new Error('Slicing scalar is not possible');\n    }\n    const inputs = { x: $x };\n    const attrs = { begin, size };\n    return ENGINE.runKernel(Slice, inputs, attrs);\n}\nexport const slice = op({ slice_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SplitV } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Splits a `tf.Tensor` into sub tensors.\n *\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\n * into `numOrSizeSplits` smaller tensors.\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\n *\n * If `numOrSizeSplits` is a number array, splits `x` into\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\n * same size as `x` except along dimension `axis` where the size is\n * `numOrSizeSplits[i]`.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\n * const [a, b] = tf.split(x, 2, 1);\n * a.print();\n * b.print();\n *\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\n * c.print();\n * d.print();\n * e.print();\n * ```\n *\n * @param x The input tensor to split.\n * @param numOrSizeSplits Either an integer indicating the number of\n * splits along the axis or an array of integers containing the sizes of\n * each output tensor along the axis. If a number then it must evenly divide\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\n * Can contain one -1 indicating that dimension is to be inferred.\n * @param axis The dimension along which to split. Defaults to 0 (the first\n * dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction split_(x, numOrSizeSplits, axis = 0) {\n    const $x = convertToTensor(x, 'x', 'split');\n    const inputs = { x: $x };\n    const attr = { numOrSizeSplits, axis };\n    return ENGINE.runKernel(SplitV, inputs, attr);\n}\nexport const split = op({ split_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ZerosLike } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.zerosLike(x).print();\n * ```\n *\n * @param x The tensor of required shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction zerosLike_(x) {\n    const $x = convertToTensor(x, 'x', 'zerosLike');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(ZerosLike, inputs);\n}\nexport const zerosLike = op({ zerosLike_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { FFT } from '../../kernel_names';\nimport { assert } from '../../util';\nimport { op } from '../operation';\n/**\n * Fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\n * dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.fft().print();  // tf.spectral.fft(x).print();\n * ```\n * @param input The complex input to compute an fft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction fft_(input) {\n    assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.fft() must be complex64 ` +\n        `but got ${input.dtype}.`);\n    const inputs = { input };\n    return ENGINE.runKernel(FFT, inputs);\n}\nexport const fft = op({ fft_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../../util';\nimport { complex } from '../complex';\nimport { concat } from '../concat';\nimport { imag } from '../imag';\nimport { op } from '../operation';\nimport { real } from '../real';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { split } from '../split';\nimport { zeros } from '../zeros';\nimport { zerosLike } from '../zeros_like';\nimport { fft } from './fft';\n/**\n * Real value input fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n *\n * real.rfft().print();\n * ```\n * @param input The real value input to compute an rfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction rfft_(input, fftLength) {\n    assert(input.dtype === 'float32', () => `The dtype for rfft() must be real value but got ${input.dtype}`);\n    let innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = input.size / innerDimensionSize;\n    let adjustedInput;\n    if (fftLength != null && fftLength < innerDimensionSize) {\n        // Need to crop\n        const begin = input.shape.map(v => 0);\n        const size = input.shape.map(v => v);\n        size[input.shape.length - 1] = fftLength;\n        adjustedInput = slice(input, begin, size);\n        innerDimensionSize = fftLength;\n    }\n    else if (fftLength != null && fftLength > innerDimensionSize) {\n        // Need to pad with zeros\n        const zerosShape = input.shape.map(v => v);\n        zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;\n        adjustedInput = concat([input, zeros(zerosShape)], input.shape.length - 1);\n        innerDimensionSize = fftLength;\n    }\n    else {\n        adjustedInput = input;\n    }\n    // Complement the input with zero imaginary numbers.\n    const zerosInput = zerosLike(adjustedInput);\n    const complexInput = reshape(complex(adjustedInput, zerosInput), [batch, innerDimensionSize]);\n    const ret = fft(complexInput);\n    // Exclude complex conjugations. These conjugations are put symmetrically.\n    const half = Math.floor(innerDimensionSize / 2) + 1;\n    const realValues = real(ret);\n    const imagValues = imag(ret);\n    const realComplexConjugate = split(realValues, [half, innerDimensionSize - half], realValues.shape.length - 1);\n    const imagComplexConjugate = split(imagValues, [half, innerDimensionSize - half], imagValues.shape.length - 1);\n    const outputShape = adjustedInput.shape.slice();\n    outputShape[adjustedInput.shape.length - 1] = half;\n    return reshape(complex(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);\n}\nexport const rfft = op({ rfft_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { IFFT } from '../../kernel_names';\nimport { assert } from '../../util';\nimport { op } from '../operation';\n/**\n * Inverse fast Fourier transform.\n *\n * Computes the inverse 1-dimensional discrete Fourier transform over the\n * inner-most dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.ifft().print();  // tf.spectral.ifft(x).print();\n * ```\n * @param input The complex input to compute an ifft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction ifft_(input) {\n    assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.ifft() must be complex64 ` +\n        `but got ${input.dtype}.`);\n    const inputs = { input };\n    return ENGINE.runKernel(IFFT, inputs);\n}\nexport const ifft = op({ ifft_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Multiply } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.\n *\n * We also expose `tf.mulStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([2, 3, 4, 5]);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n *\n * ```js\n * // Broadcast mul a with b.\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.scalar(5);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n * @param a The first tensor to multiply.\n * @param b The second tensor to multiply. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction mul_(a, b) {\n    let $a = convertToTensor(a, 'a', 'mul');\n    let $b = convertToTensor(b, 'b', 'mul');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(Multiply, inputs);\n}\nexport const mul = op({ mul_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Reverse } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Reverses a `tf.Tensor` along a specified axis.\n *\n * Also available are stricter rank-specific methods that assert that `x` is\n * of the given rank:\n *   - `tf.reverse1d`\n *   - `tf.reverse2d`\n *   - `tf.reverse3d`\n *   - `tf.reverse4d`\n *\n * Except `tf.reverse1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.reverse().print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.reverse(axis).print();\n * ```\n * @param x The input tensor to be reversed.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction reverse_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'reverse');\n    const inputs = { x: $x };\n    const attrs = { dims: axis };\n    return ENGINE.runKernel(Reverse, inputs, attrs);\n}\nexport const reverse = op({ reverse_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../complex';\nimport { concat } from '../concat';\nimport { imag } from '../imag';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { real } from '../real';\nimport { reshape } from '../reshape';\nimport { reverse } from '../reverse';\nimport { scalar } from '../scalar';\nimport { slice } from '../slice';\nimport { ifft } from './ifft';\n/**\n * Inversed real value input fast Fourier transform.\n *\n * Computes the 1-dimensional inversed discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([0, 0, 0]);\n * const x = tf.complex(real, imag);\n *\n * x.irfft().print();\n * ```\n * @param input The real value input to compute an irfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction irfft_(input) {\n    const innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = input.size / innerDimensionSize;\n    let ret;\n    if (innerDimensionSize <= 2) {\n        const complexInput = reshape(input, [batch, innerDimensionSize]);\n        ret = ifft(complexInput);\n    }\n    else {\n        // The length of unique components of the DFT of a real-valued signal\n        // is 2 * (input_len - 1)\n        const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n        const realInput = reshape(real(input), [batch, innerDimensionSize]);\n        const imagInput = reshape(imag(input), [batch, innerDimensionSize]);\n        const realConjugate = reverse(slice(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);\n        const imagConjugate = mul(reverse(slice(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), scalar(-1));\n        const r = concat([realInput, realConjugate], 1);\n        const i = concat([imagInput, imagConjugate], 1);\n        const complexInput = reshape(complex(r, i), [outputShape[0], outputShape[1]]);\n        ret = ifft(complexInput);\n    }\n    ret = real(ret);\n    // reshape the result if the input is 3D tensor.\n    if (input.rank === 3 && input.shape[0] !== 0) {\n        const temp = ret;\n        const batch = input.shape[0];\n        ret = reshape(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);\n        temp.dispose();\n    }\n    return ret;\n}\nexport const irfft = op({ irfft_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor1d` as it makes the code more readable.\n *\n * ```js\n * tf.tensor1d([1, 2, 3]).print();\n * ```\n *\n * @param values The values of the tensor. Can be array of numbers,\n *     or a `TypedArray`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor1d(values, dtype) {\n    assertNonNull(values);\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 1) {\n        throw new Error('tensor1d() requires values to be a flat/TypedArray');\n    }\n    const shape = null;\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from './tensor1d';\nexport function enclosingPowerOfTwo(value) {\n    // Return 2**N for integer N such that 2**N >= value.\n    return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));\n}\nexport function cosineWindow(windowLength, a, b) {\n    const even = 1 - windowLength % 2;\n    const newValues = new Float32Array(windowLength);\n    for (let i = 0; i < windowLength; ++i) {\n        const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);\n        newValues[i] = a - b * Math.cos(cosArg);\n    }\n    return tensor1d(newValues, 'float32');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { op } from '../operation';\nimport { cosineWindow } from '../signal_ops_util';\n/**\n * Generate a hamming window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hammingWindow(10).print();\n * ```\n * @param The length of window\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hammingWindow_(windowLength) {\n    return cosineWindow(windowLength, 0.54, 0.46);\n}\nexport const hammingWindow = op({ hammingWindow_ });\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { op } from '../operation';\nimport { cosineWindow } from '../signal_ops_util';\n/**\n * Generate a Hann window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hannWindow(10).print();\n * ```\n * @param The length of window\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hannWindow_(windowLength) {\n    return cosineWindow(windowLength, 0.5, 0.5);\n}\nexport const hannWindow = op({ hannWindow_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Fill } from '../kernel_names';\n/**\n * Creates a `tf.Tensor` filled with a scalar value.\n *\n * ```js\n * tf.fill([2, 2], 4).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param value The scalar value to fill the tensor with.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n * 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction fill(shape, value, dtype) {\n    const attrs = { shape, value, dtype };\n    return ENGINE.runKernel(Fill, {}, attrs);\n}\nexport { fill };\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor2d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor2d([[1, 2], [3, 4]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided, it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor2d(values, shape, dtype) {\n    assertNonNull(values);\n    if (shape != null && shape.length !== 2) {\n        throw new Error('tensor2d() requires shape to have two numbers');\n    }\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 2 && inferredShape.length !== 1) {\n        throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');\n    }\n    if (inferredShape.length === 1 && shape == null) {\n        throw new Error('tensor2d() requires shape to be provided when `values` ' +\n            'are a flat/TypedArray');\n    }\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../concat';\nimport { fill } from '../fill';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { tensor2d } from '../tensor2d';\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue An number to use where the input signal does\n *     not exist when padEnd is True.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {\n    let start = 0;\n    const output = [];\n    while (start + frameLength <= signal.size) {\n        output.push(slice(signal, start, frameLength));\n        start += frameStep;\n    }\n    if (padEnd) {\n        while (start < signal.size) {\n            const padLen = (start + frameLength) - signal.size;\n            const pad = concat([\n                slice(signal, start, frameLength - padLen), fill([padLen], padValue)\n            ]);\n            output.push(pad);\n            start += frameStep;\n        }\n    }\n    if (output.length === 0) {\n        return tensor2d([], [0, frameLength]);\n    }\n    return reshape(concat(output), [output.length, frameLength]);\n}\nexport const frame = op({ frame_ });\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { enclosingPowerOfTwo } from '../signal_ops_util';\nimport { rfft } from '../spectral/rfft';\nimport { frame } from './frame';\nimport { hannWindow } from './hann_window';\n/**\n * Computes the Short-time Fourier Transform of signals\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\n *\n * ```js\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\n * tf.signal.stft(input, 3, 1).print();\n * ```\n * @param signal 1-dimensional real value tensor.\n * @param frameLength The window length of samples.\n * @param frameStep The number of samples to step.\n * @param fftLength The size of the FFT to apply.\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction stft_(signal, frameLength, frameStep, fftLength, windowFn = hannWindow) {\n    if (fftLength == null) {\n        fftLength = enclosingPowerOfTwo(frameLength);\n    }\n    const framedSignal = frame(signal, frameLength, frameStep);\n    const windowedSignal = mul(framedSignal, windowFn(frameLength));\n    return rfft(windowedSignal, fftLength);\n}\nexport const stft = op({ stft_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { CropAndResize } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by cropSize.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the boxInd[i]'th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction cropAndResize_(image, boxes, boxInd, cropSize, method = 'bilinear', extrapolationValue = 0) {\n    const $image = convertToTensor(image, 'image', 'cropAndResize');\n    const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n    const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n    const numBoxes = $boxes.shape[0];\n    util.assert($image.rank === 4, () => 'Error in cropAndResize: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    util.assert($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +\n        `but had shape ${$boxes.shape}.`);\n    util.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +\n        `but had shape ${$boxes.shape}.`);\n    util.assert(cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got ` +\n        `length ${cropSize.length}.`);\n    util.assert(cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n    util.assert(method === 'bilinear' || method === 'nearest', () => `method must be bilinear or nearest, but was ${method}`);\n    const inputs = { image: $image, boxes: $boxes, boxInd: $boxInd };\n    const attrs = { method, extrapolationValue, cropSize };\n    const res = ENGINE.runKernel(CropAndResize, inputs, attrs);\n    return res;\n}\nexport const cropAndResize = op({ cropAndResize_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { FlipLeftRight } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Flips the image left to right. Currently available in the CPU, WebGL, and\n * WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction flipLeftRight_(image) {\n    const $image = convertToTensor(image, 'image', 'flipLeftRight', 'float32');\n    util.assert($image.rank === 4, () => 'Error in flipLeftRight: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    const inputs = { image: $image };\n    const res = ENGINE.runKernel(FlipLeftRight, inputs, {});\n    return res;\n}\nexport const flipLeftRight = op({ flipLeftRight_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Tile } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Construct a tensor by repeating it the number of times given by reps.\n *\n * This operation creates a new tensor by replicating `input` `reps`\n * times. The output tensor's i'th dimension has `input.shape[i] *\n * reps[i]` elements, and the values of `input` are replicated\n * `reps[i]` times along the i'th dimension. For example, tiling\n * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n *\n * a.tile([2]).print();    // or a.tile([2])\n * ```\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.tile([1, 2]).print();  // or a.tile([1, 2])\n * ```\n * @param x The tensor to tile.\n * @param reps Determines the number of replications per dimension.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction tile_(x, reps) {\n    const $x = convertToTensor(x, 'x', 'tile', 'string_or_numeric');\n    util.assert($x.rank === reps.length, () => `Error in transpose: rank of input ${$x.rank} ` +\n        `must match length of reps ${reps}.`);\n    const inputs = { x: $x };\n    const attrs = { reps };\n    return ENGINE.runKernel(Tile, inputs, attrs);\n}\nexport const tile = op({ tile_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { tile } from '../tile';\n/**\n * Converts images from grayscale to RGB format.\n *\n * @param image A grayscale tensor to convert. The `image`'s last dimension must\n *     be size 1 with at least a two-dimensional shape.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction grayscaleToRGB_(image) {\n    const $image = convertToTensor(image, 'image', 'grayscaleToRGB');\n    const lastDimsIdx = $image.rank - 1;\n    const lastDims = $image.shape[lastDimsIdx];\n    util.assert($image.rank >= 2, () => 'Error in grayscaleToRGB: images must be at least rank 2, ' +\n        `but got rank ${$image.rank}.`);\n    util.assert(lastDims === 1, () => 'Error in grayscaleToRGB: last dimension of a grayscale image ' +\n        `should be size 1, but got size ${lastDims}.`);\n    const reps = new Array($image.rank);\n    reps.fill(1, 0, lastDimsIdx);\n    reps[lastDimsIdx] = 3;\n    return tile($image, reps);\n}\nexport const grayscaleToRGB = op({ grayscaleToRGB_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { RotateWithOffset } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Rotates the input image tensor counter-clockwise with an optional offset\n * center of rotation. Currently available in the CPU, WebGL, and WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n * @param radians The amount of rotation.\n * @param fillValue The value to fill in the empty space leftover\n *     after rotation. Can be either a single grayscale value (0-255), or an\n *     array of three numbers `[red, green, blue]` specifying the red, green,\n *     and blue channels. Defaults to `0` (black).\n * @param center The center of rotation. Can be either a single value (0-1), or\n *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates\n *     the image around its center).\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction rotateWithOffset_(image, radians, fillValue = 0, center = 0.5) {\n    const $image = convertToTensor(image, 'image', 'rotateWithOffset', 'float32');\n    util.assert($image.rank === 4, () => 'Error in rotateWithOffset: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    const inputs = { image: $image };\n    const attrs = { radians, fillValue, center };\n    const res = ENGINE.runKernel(RotateWithOffset, inputs, attrs);\n    return res;\n}\nexport const rotateWithOffset = op({ rotateWithOffset_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nfunction nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n    if (iouThreshold == null) {\n        iouThreshold = 0.5;\n    }\n    if (scoreThreshold == null) {\n        scoreThreshold = Number.NEGATIVE_INFINITY;\n    }\n    if (softNmsSigma == null) {\n        softNmsSigma = 0.0;\n    }\n    const numBoxes = boxes.shape[0];\n    maxOutputSize = Math.min(maxOutputSize, numBoxes);\n    util.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n    util.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n    util.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n    util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n    util.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n        `but was ${scores.shape[0]}`);\n    util.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n    return { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };\n}\nexport { nonMaxSuppSanityCheck };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { NonMaxSuppressionV3 } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { op } from '../operation';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression', 'float32');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression', 'float32');\n    const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n    maxOutputSize = inputs.maxOutputSize;\n    iouThreshold = inputs.iouThreshold;\n    scoreThreshold = inputs.scoreThreshold;\n    const attrs = { maxOutputSize, iouThreshold, scoreThreshold };\n    return ENGINE.runKernel(NonMaxSuppressionV3, { boxes: $boxes, scores: $scores }, attrs);\n}\nexport const nonMaxSuppression = op({ nonMaxSuppression_ });\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Inserts a value into a sorted array. This method allows duplicate, meaning it\n * allows inserting duplicate value, in which case, the element will be inserted\n * at the lowest index of the value.\n * @param arr The array to modify.\n * @param element The element to insert.\n * @param comparator Optional. If no comparator is specified, elements are\n * compared using array_util.defaultComparator, which is suitable for Strings\n * and Numbers in ascending arrays. If the array contains multiple instances of\n * the target value, the left-most instance will be returned. To provide a\n * comparator, it should take 2 arguments to compare and return a negative,\n * zero, or a positive number.\n */\nexport function binaryInsert(arr, element, comparator) {\n    const index = binarySearch(arr, element, comparator);\n    const insertionPoint = index < 0 ? -(index + 1) : index;\n    arr.splice(insertionPoint, 0, element);\n}\n/**\n * Searches the array for the target using binary search, returns the index\n * of the found element, or position to insert if element not found. If no\n * comparator is specified, elements are compared using array_\n * util.defaultComparator, which is suitable for Strings and Numbers in\n * ascending arrays. If the array contains multiple instances of the target\n * value, the left-most instance will be returned.\n * @param arr The array to be searched in.\n * @param target The target to be searched for.\n * @param comparator Should take 2 arguments to compare and return a negative,\n *    zero, or a positive number.\n * @return Lowest index of the target value if found, otherwise the insertion\n *    point where the target should be inserted, in the form of\n *    (-insertionPoint - 1).\n */\nexport function binarySearch(arr, target, comparator) {\n    return binarySearch_(arr, target, comparator || defaultComparator);\n}\n/**\n * Compares its two arguments for order.\n * @param a The first element to be compared.\n * @param b The second element to be compared.\n * @return A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nfunction defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n}\nfunction binarySearch_(arr, target, comparator) {\n    let left = 0;\n    let right = arr.length;\n    let middle = 0;\n    let found = false;\n    while (left < right) {\n        middle = left + ((right - left) >>> 1);\n        const compareResult = comparator(target, arr[middle]);\n        if (compareResult > 0) {\n            left = middle + 1;\n        }\n        else {\n            right = middle;\n            // If compareResult is 0, the value is found. We record it is found,\n            // and then keep looking because there may be duplicate.\n            found = !compareResult;\n        }\n    }\n    return found ? left : -left - 1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { binaryInsert } from './non_max_suppression_util';\nexport function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */);\n}\nexport function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */, false /* returnScoresTensor */, padToMaxOutputSize /* padToMaxOutputSize */, true\n    /* returnValidOutputs */ );\n}\nexport function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true /* returnScoresTensor */);\n}\nfunction nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {\n    // The list is sorted in ascending order, so that we can always pop the\n    // candidate with the largest score in O(1) time.\n    const candidates = [];\n    for (let i = 0; i < scores.length; i++) {\n        if (scores[i] > scoreThreshold) {\n            candidates.push({ score: scores[i], boxIndex: i, suppressBeginIndex: 0 });\n        }\n    }\n    candidates.sort(ascendingComparator);\n    // If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n    // before.\n    const scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;\n    const selectedIndices = [];\n    const selectedScores = [];\n    while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n        const candidate = candidates.pop();\n        const { score: originalScore, boxIndex, suppressBeginIndex } = candidate;\n        if (originalScore < scoreThreshold) {\n            break;\n        }\n        // Overlapping boxes are likely to have similar scores, therefore we\n        // iterate through the previously selected boxes backwards in order to\n        // see if candidate's score should be suppressed. We use\n        // suppressBeginIndex to track and ensure a candidate can be suppressed\n        // by a selected box no more than once. Also, if the overlap exceeds\n        // iouThreshold, we simply ignore the candidate.\n        let ignoreCandidate = false;\n        for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n            const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n            if (iou >= iouThreshold) {\n                ignoreCandidate = true;\n                break;\n            }\n            candidate.score =\n                candidate.score * suppressWeight(iouThreshold, scale, iou);\n            if (candidate.score <= scoreThreshold) {\n                break;\n            }\n        }\n        // At this point, if `candidate.score` has not dropped below\n        // `scoreThreshold`, then we know that we went through all of the\n        // previous selections and can safely update `suppressBeginIndex` to the\n        // end of the selected array. Then we can re-insert the candidate with\n        // the updated score and suppressBeginIndex back in the candidate list.\n        // If on the other hand, `candidate.score` has dropped below the score\n        // threshold, we will not add it back to the candidates list.\n        candidate.suppressBeginIndex = selectedIndices.length;\n        if (!ignoreCandidate) {\n            // Candidate has passed all the tests, and is not suppressed, so\n            // select the candidate.\n            if (candidate.score === originalScore) {\n                selectedIndices.push(boxIndex);\n                selectedScores.push(candidate.score);\n            }\n            else if (candidate.score > scoreThreshold) {\n                // Candidate's score is suppressed but is still high enough to be\n                // considered, so add back to the candidates list.\n                binaryInsert(candidates, candidate, ascendingComparator);\n            }\n        }\n    }\n    // NonMaxSuppressionV4 feature: padding output to maxOutputSize.\n    const validOutputs = selectedIndices.length;\n    const elemsToPad = maxOutputSize - validOutputs;\n    if (padToMaxOutputSize && elemsToPad > 0) {\n        selectedIndices.push(...new Array(elemsToPad).fill(0));\n        selectedScores.push(...new Array(elemsToPad).fill(0.0));\n    }\n    const result = { selectedIndices };\n    if (returnScoresTensor) {\n        result['selectedScores'] = selectedScores;\n    }\n    if (returnValidOutputs) {\n        result['validOutputs'] = validOutputs;\n    }\n    return result;\n}\nfunction intersectionOverUnion(boxes, i, j) {\n    const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n    const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n    const yminI = Math.min(iCoord[0], iCoord[2]);\n    const xminI = Math.min(iCoord[1], iCoord[3]);\n    const ymaxI = Math.max(iCoord[0], iCoord[2]);\n    const xmaxI = Math.max(iCoord[1], iCoord[3]);\n    const yminJ = Math.min(jCoord[0], jCoord[2]);\n    const xminJ = Math.min(jCoord[1], jCoord[3]);\n    const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n    const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n    const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n    const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n    if (areaI <= 0 || areaJ <= 0) {\n        return 0.0;\n    }\n    const intersectionYmin = Math.max(yminI, yminJ);\n    const intersectionXmin = Math.max(xminI, xminJ);\n    const intersectionYmax = Math.min(ymaxI, ymaxJ);\n    const intersectionXmax = Math.min(xmaxI, xmaxJ);\n    const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *\n        Math.max(intersectionXmax - intersectionXmin, 0.0);\n    return intersectionArea / (areaI + areaJ - intersectionArea);\n}\n// A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\nfunction suppressWeight(iouThreshold, scale, iou) {\n    const weight = Math.exp(scale * iou * iou);\n    return iou <= iouThreshold ? weight : 0.0;\n}\nfunction ascendingComparator(c1, c2) {\n    // For objects with same scores, we make the object with the larger index go\n    // first. In an array that pops from the end, this means that the object with\n    // the smaller index will be popped first. This ensures the same output as\n    // the TensorFlow python version.\n    return (c1.score - c2.score) ||\n        ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV3Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This is the async version of `nonMaxSuppression`\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n    maxOutputSize = inputs.maxOutputSize;\n    iouThreshold = inputs.iouThreshold;\n    scoreThreshold = inputs.scoreThreshold;\n    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n    const boxesVals = boxesAndScores[0];\n    const scoresVals = boxesAndScores[1];\n    // We call a cpu based impl directly with the typedarray data  here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n    const { selectedIndices } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    if ($boxes !== boxes) {\n        $boxes.dispose();\n    }\n    if ($scores !== scores) {\n        $scores.dispose();\n    }\n    return tensor1d(selectedIndices, 'int32');\n}\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { NonMaxSuppressionV5 } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { op } from '../operation';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    maxOutputSize = params.maxOutputSize;\n    iouThreshold = params.iouThreshold;\n    scoreThreshold = params.scoreThreshold;\n    softNmsSigma = params.softNmsSigma;\n    const inputs = { boxes: $boxes, scores: $scores };\n    const attrs = { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const result = ENGINE.runKernel(NonMaxSuppressionV5, inputs, attrs);\n    return { selectedIndices: result[0], selectedScores: result[1] };\n}\nexport const nonMaxSuppressionWithScore = op({ nonMaxSuppressionWithScore_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV5Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    maxOutputSize = params.maxOutputSize;\n    iouThreshold = params.iouThreshold;\n    scoreThreshold = params.scoreThreshold;\n    softNmsSigma = params.softNmsSigma;\n    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n    const boxesVals = boxesAndScores[0];\n    const scoresVals = boxesAndScores[1];\n    // We call a cpu based impl directly with the typedarray data  here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n    const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    if ($boxes !== boxes) {\n        $boxes.dispose();\n    }\n    if ($scores !== scores) {\n        $scores.dispose();\n    }\n    return {\n        selectedIndices: tensor1d(selectedIndices, 'int32'),\n        selectedScores: tensor1d(selectedScores)\n    };\n}\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { NonMaxSuppressionV4 } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { op } from '../operation';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defalts to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionPadded_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);\n    const $maxOutputSize = params.maxOutputSize;\n    const $iouThreshold = params.iouThreshold;\n    const $scoreThreshold = params.scoreThreshold;\n    const inputs = { boxes: $boxes, scores: $scores };\n    const attrs = {\n        maxOutputSize: $maxOutputSize,\n        iouThreshold: $iouThreshold,\n        scoreThreshold: $scoreThreshold,\n        padToMaxOutputSize\n    };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const result = ENGINE.runKernel(NonMaxSuppressionV4, inputs, attrs);\n    return { selectedIndices: result[0], validOutputs: result[1] };\n}\nexport const nonMaxSuppressionPadded = op({ nonMaxSuppressionPadded_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV4Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { scalar } from '../scalar';\nimport { tensor1d } from '../tensor1d';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defalts to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);\n    const $maxOutputSize = params.maxOutputSize;\n    const $iouThreshold = params.iouThreshold;\n    const $scoreThreshold = params.scoreThreshold;\n    const [boxesVals, scoresVals] = await Promise.all([$boxes.data(), $scores.data()]);\n    // We call a cpu based impl directly with the typedarray data here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n    const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);\n    if ($boxes !== boxes) {\n        $boxes.dispose();\n    }\n    if ($scores !== scores) {\n        $scores.dispose();\n    }\n    return {\n        selectedIndices: tensor1d(selectedIndices, 'int32'),\n        validOutputs: scalar(validOutputs, 'int32')\n    };\n}\nexport const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeBilinear } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Bilinear resize a single 3D image or a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to `false`. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assume pixel centers\n *     are at 0.5, which would make the floating point coordinates of the top\n *     left pixel 0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeBilinear_(images, size, alignCorners = false, halfPixelCenters = false) {\n    const $images = convertToTensor(images, 'images', 'resizeBilinear');\n    util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +\n        `rank ${$images.rank}.`);\n    util.assert(size.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ` +\n        `${size}.`);\n    util.assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeBilinear: If halfPixelCenters is true, ` +\n        `alignCorners must be false.`);\n    let batchImages = $images;\n    let reshapedTo4D = false;\n    if ($images.rank === 3) {\n        reshapedTo4D = true;\n        batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n    }\n    const [] = size;\n    const inputs = { images: batchImages };\n    const attrs = { alignCorners, halfPixelCenters, size };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(ResizeBilinear, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const resizeBilinear = op({ resizeBilinear_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeNearestNeighbor } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assumes pixels are of\n *      half the actual dimensions, and yields more accurate resizes. This flag\n *      would also make the floating point coordinates of the top left pixel\n *      0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeNearestNeighbor_(images, size, alignCorners = false, halfPixelCenters = false) {\n    const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n    util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +\n        `rank ${$images.rank}.`);\n    util.assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +\n        `${size}.`);\n    util.assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');\n    util.assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, ` +\n        `alignCorners must be false.`);\n    let batchImages = $images;\n    let reshapedTo4D = false;\n    if ($images.rank === 3) {\n        reshapedTo4D = true;\n        batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n    }\n    const [] = size;\n    const inputs = { images: batchImages };\n    const attrs = { alignCorners, halfPixelCenters, size };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(ResizeNearestNeighbor, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const resizeNearestNeighbor = op({ resizeNearestNeighbor_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Bincount } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction bincount_(x, weights, size) {\n    const $x = convertToTensor(x, 'x', 'bincount');\n    const $weights = convertToTensor(weights, 'weights', 'bincount');\n    util.assert($x.dtype === 'int32', () => `Error in bincount: input ` +\n        `dtype must be int32, but got ${$x.dtype}`);\n    util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n    util.assert($weights.size === $x.size || $weights.size === 0, () => `Error in bincount: weights must have the same size as input or` +\n        `0-length, but got input shape: ${$x.shape}, weights shape: ` +\n        `${$weights.shape}.`);\n    const inputs = { x: $x, weights: $weights };\n    const attrs = { size };\n    return ENGINE.runKernel(Bincount, inputs, attrs);\n}\nexport const bincount = op({ bincount_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LessEqual } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a <= b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.lessEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction lessEqual_(a, b) {\n    let $a = convertToTensor(a, 'a', 'lessEqual', 'string_or_numeric');\n    let $b = convertToTensor(b, 'b', 'lessEqual', 'string_or_numeric');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(LessEqual, inputs);\n}\nexport const lessEqual = op({ lessEqual_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Greater } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a > b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greater(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction greater_(a, b) {\n    let $a = convertToTensor(a, 'a', 'greater', 'string_or_numeric');\n    let $b = convertToTensor(b, 'b', 'greater', 'string_or_numeric');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(Greater, inputs);\n}\nexport const greater = op({ greater_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\n/**\n * Computes the sum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If axes has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.sum().print();  // or tf.sum(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.sum(axis).print();  // or tf.sum(x, axis)\n * ```\n *\n * @param x The input tensor to compute the sum over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction sum_(x, axis = null, keepDims = false) {\n    let $x = convertToTensor(x, 'x', 'sum');\n    if ($x.dtype === 'bool') {\n        $x = cast($x, 'int32');\n    }\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    return ENGINE.runKernel(Sum, inputs, attrs);\n}\nexport const sum = op({ sum_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Add } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n *\n * ```js\n * // Broadcast add a with b.\n * const a = tf.scalar(5);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n * @param a The first `tf.Tensor` to add.\n * @param b The second `tf.Tensor` to add. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction add_(a, b) {\n    let $a = convertToTensor(a, 'a', 'add');\n    let $b = convertToTensor(b, 'b', 'add');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(Add, inputs);\n}\nexport const add = op({ add_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { FloorDiv } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n * The result is rounded with floor function.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.floorDiv(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.floorDiv(b).print();  // or tf.floorDiv(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction floorDiv_(a, b) {\n    let $a = convertToTensor(a, 'a', 'floorDiv');\n    let $b = convertToTensor(b, 'b', 'floorDiv');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(FloorDiv, inputs);\n}\nexport const floorDiv = op({ floorDiv_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { RealDiv } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { floorDiv } from './floorDiv';\nimport { op } from './operation';\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction div_(a, b) {\n    let $a = convertToTensor(a, 'a', 'div');\n    let $b = convertToTensor(b, 'b', 'div');\n    [$a, $b] = makeTypesMatch($a, $b);\n    if ($a.dtype === 'int32' && $b.dtype === 'int32') {\n        return floorDiv($a, $b);\n    }\n    const inputs = { a: $a, b: $b };\n    const attrs = {};\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    return ENGINE.runKernel(RealDiv, inputs, attrs);\n}\nexport const div = op({ div_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sub } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n *\n * ```js\n * // Broadcast subtract a with b.\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.scalar(5);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n * @param a The first `tf.Tensor` to subtract from.\n * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction sub_(a, b) {\n    let $a = convertToTensor(a, 'a', 'sub');\n    let $b = convertToTensor(b, 'b', 'sub');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(Sub, inputs);\n}\nexport const sub = op({ sub_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Round } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes round of input `tf.Tensor` element-wise: `round(x)`.\n * It implements banker's rounding.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.round().print();  // or tf.round(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction round_(x) {\n    const $x = convertToTensor(x, 'x', 'round');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Round, inputs);\n}\nexport const round = op({ round_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Tile } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { clone } from './clone';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Broadcast an array to a compatible shape NumPy-style.\n *\n * The tensor's shape is compared to the broadcast shape from end to beginning.\n * Ones are prepended to the tensor's shape until is has the same length as\n * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is\n * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then\n * the input tensor is tiled N times along that axis (using tf.tile).\n *\n * @param input The tensor that is to be broadcasted.\n * @param shape The input is to be broadcast to this shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction broadcastTo_(x, shape) {\n    let input = convertToTensor(x, 'broadcastTo', 'x');\n    const xShape = input.shape;\n    if (shape.some(d => !(d > 0) || d % 1 !== 0)) {\n        throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);\n    }\n    if (shape.length < input.rank) {\n        throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input.rank}.`);\n    }\n    if (shape.length > input.rank) {\n        const newShape = input.shape.slice();\n        while (newShape.length < shape.length) {\n            newShape.unshift(1);\n        }\n        input = reshape(input, newShape);\n    }\n    const inputShape = input.shape;\n    const reps = Array.from(shape);\n    for (let i = shape.length - 1; i >= 0; i--) {\n        if (inputShape[i] === shape[i]) {\n            reps[i] = 1;\n        }\n        else if (input.shape[i] !== 1) {\n            throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);\n        }\n    }\n    const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);\n    if (axes.length === 0) {\n        return clone(input);\n    }\n    // TODO call broadcastTo kernel directly once backends implement broadcstTo\n    const inputs = { x: input };\n    const attrs = { reps };\n    return ENGINE.runKernel(Tile, inputs, attrs);\n}\nexport const broadcastTo = op({ broadcastTo_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Select } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { broadcastTo } from './broadcast_to';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the elements, either `a` or `b` depending on the `condition`.\n *\n * If the condition is true, select from `a`, otherwise select from `b`.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const a = tf.tensor1d([1 , 2, 3]);\n * const b = tf.tensor1d([-1, -2, -3]);\n *\n * a.where(cond, b).print();\n * ```\n *\n * @param condition The input condition. Must be of dtype bool.\n * @param a If `condition` is rank 1, `a` may have a higher rank but\n *     its first dimension must match the size of `condition`.\n * @param b A tensor with the same dtype as `a` and with shape that is\n *     compatible with `a`.\n * @return A tensor with same dtype as `a` and `b`, and shape that is\n *     broadcastable from `a` and `b`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction where_(condition, a, b) {\n    const $a = convertToTensor(a, 'a', 'where');\n    const $b = convertToTensor(b, 'b', 'where');\n    const $condition = convertToTensor(condition, 'condition', 'where', 'bool');\n    // TODO: move this logic to forward function when the broadcastTo op is\n    // implemented in WASM.\n    // Find the broadcastable shape for $condition, $a, and $b.\n    const broadcastShape = assertAndGetBroadcastShape(assertAndGetBroadcastShape($condition.shape, $a.shape), $b.shape);\n    const $broadcastedCondition = broadcastTo($condition, broadcastShape);\n    const $broadcastedA = broadcastTo($a, broadcastShape);\n    const $broadcastedB = broadcastTo($b, broadcastShape);\n    const inputs = {\n        condition: $broadcastedCondition,\n        t: $broadcastedA,\n        e: $broadcastedB\n    };\n    return ENGINE.runKernel(Select, inputs);\n}\nexport const where = op({ where_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Range } from '../kernel_names';\n/**\n * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.\n *\n * The tensor is a is half-open interval meaning it includes start, but\n * excludes stop. Decrementing ranges and negative step values are also\n * supported.sv\n *\n *\n * ```js\n * tf.range(0, 9, 2).print();\n * ```\n *\n * @param start An integer start value\n * @param stop An integer stop value\n * @param step An integer increment (will default to 1 or -1)\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function range(start, stop, step = 1, dtype = 'float32') {\n    if (step === 0) {\n        throw new Error('Cannot have a step of zero');\n    }\n    const attrs = { start, stop, step, dtype };\n    return ENGINE.runKernel(Range, {} /* inputs */, attrs);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates a `tf.Tensor` with the provided values, shape and dtype.\n *\n * ```js\n * // Pass an array of values to create a vector.\n * tf.tensor([1, 2, 3, 4]).print();\n * ```\n *\n * ```js\n * // Pass a nested array of values to make a matrix or a higher\n * // dimensional tensor.\n * tf.tensor([[1, 2], [3, 4]]).print();\n * ```\n *\n * ```js\n * // Pass a flat array and specify a shape yourself.\n * tf.tensor([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`. If the values are strings,\n *     they will be encoded as utf-8 and kept as `Uint8Array[]`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor(values, shape, dtype) {\n    const inferredShape = inferShape(values, dtype);\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from '../tensor1d';\nimport { op } from '../operation';\nimport { cast } from '../cast';\nimport { split } from '../split';\nimport { bincount } from '../bincount';\nimport { lessEqual } from '../less_equal';\nimport { greater } from '../greater';\nimport { sum } from '../sum';\nimport { add } from '../add';\nimport { mul } from '../mul';\nimport { div } from '../div';\nimport { sub } from '../sub';\nimport { round } from '../round';\nimport { where } from '../where';\nimport { fill } from '../fill';\nimport { slice } from '../slice';\nimport { range } from '../range';\nimport { tensor } from '../tensor';\nimport * as util from '../../util';\nimport { convertToTensor } from '../../tensor_util_env';\n/**\n * Performs image binarization with corresponding threshold\n * (depends on the method)value, which creates a binary image from a grayscale.\n * @param image 3d tensor of shape [imageHeight,imageWidth, depth],\n * where imageHeight and imageWidth must be positive.The image color\n * range should be [0, 255].\n * @param method Optional string from `'binary' | 'otsu'`\n * which specifies the method for thresholding. Defaults to 'binary'.\n * @param inverted Optional boolean whichspecifies\n * if colours should be inverted. Defaults to false.\n * @param threshValue Optional number which defines threshold value from 0 to 1.\n * Defaults to 0.5.\n * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which\n * contains binarized image.\n */\nfunction threshold_(image, method = 'binary', inverted = false, threshValue = 0.5) {\n    const $image = convertToTensor(image, 'image', 'threshold');\n    /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.\n    Reference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */\n    const RED_INTENCITY_COEF = 0.2989;\n    const GREEN_INTENCITY_COEF = 0.5870;\n    const BLUE_INTENCITY_COEF = 0.1140;\n    const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n    let $threshold = mul(tensor1d([threshValue]), 255);\n    let r, g, b, grayscale;\n    util.assert($image.rank === 3, () => 'Error in threshold: image must be rank 3,' +\n        `but got rank ${$image.rank}.`);\n    util.assert($image.shape[2] === 3 || $image.shape[2] === 1, () => 'Error in threshold: ' +\n        'image color channel must be equal to 3 or 1' +\n        `but got ${$image.shape[2]}.`);\n    util.assert($image.dtype === 'int32' || $image.dtype === 'float32', () => 'Error in dtype: image dtype must be int32 or float32,' +\n        `but got dtype ${$image.dtype}.`);\n    util.assert(method === 'otsu' || method === 'binary', () => `Method must be binary or otsu, but was ${method}`);\n    if ($image.shape[2] === 3) {\n        [r, g, b] = split($image, [1, 1, 1], -1);\n        const $r = mul(r, RED_INTENCITY_COEF);\n        const $g = mul(g, GREEN_INTENCITY_COEF);\n        const $b = mul(b, BLUE_INTENCITY_COEF);\n        grayscale = add(add($r, $g), $b);\n    }\n    else {\n        grayscale = image;\n    }\n    if (method === 'otsu') {\n        const $histogram = bincount(cast(round(grayscale), 'int32'), tensor([]), 256);\n        $threshold = otsu($histogram, totalPixelsInImage);\n    }\n    const invCondition = inverted ?\n        lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n    const result = cast(mul(invCondition, 255), 'int32');\n    return result;\n}\nfunction otsu(histogram, total) {\n    let bestThresh = tensor1d([-1]);\n    let bestInBetVar = tensor1d([0]);\n    let cInBetVar = tensor1d([0]);\n    let classFirst, classSecond, meanFirst, meanSec, weightForeground, weightBack;\n    for (let index = 0; index < histogram.size - 1; index++) {\n        classFirst = slice(histogram, 0, index + 1);\n        classSecond = slice(histogram, index + 1);\n        weightForeground = div(sum(classFirst), total);\n        weightBack = div(sum(classSecond), total);\n        const meanFirstDivA = sum(mul(classFirst, range(0, classFirst.size)));\n        meanFirst = div(meanFirstDivA, sum(classFirst));\n        const meanSecFill = fill(classSecond.shape, classFirst.size);\n        const meanSecAdd = add(range(0, classSecond.size), meanSecFill);\n        const meanSecMul = mul(classSecond, (meanSecAdd));\n        meanSec = div(sum(meanSecMul), sum(classSecond));\n        const cInBetVarSubA = sub(meanFirst, meanSec);\n        const cInBetVarSubB = sub(meanFirst, meanSec);\n        const cInBetVarMul = mul(weightForeground, weightBack);\n        cInBetVar = mul(mul(cInBetVarMul, cInBetVarSubA), cInBetVarSubB);\n        const condition = greater(cInBetVar, bestInBetVar);\n        bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n        bestThresh = where(condition, tensor1d([index]), bestThresh);\n    }\n    return bestThresh;\n}\nexport const threshold = op({ threshold_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { Transform } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Applies the given transform(s) to the image(s).\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n * @param transforms Projective transform matrix/matrices. A tensor1d of length\n *     8 or tensor of size N x 8. If one row of transforms is [a0, a1, a2, b0\n *     b1, b2, c0, c1], then it maps the output point (x, y) to a transformed\n *     input point (x', y') = ((a0 x + a1 y + a2) / k, (b0 x + b1 y + b2) / k),\n *     where k = c0 x + c1 y + 1. The transforms are inverted compared to the\n *     transform mapping input points to output points.\n * @param interpolation Interpolation mode.\n *     Supported values: 'nearest', 'bilinear'. Default to 'nearest'.\n * @param fillMode Points outside the boundaries of the input are filled\n *     according to the given mode, one of 'constant', 'reflect', 'wrap',\n *     'nearest'. Default to 'constant'.\n *     'reflect': (d c b a | a b c d | d c b a ) The input is extended by\n *     reflecting about the edge of the last pixel.\n *     'constant': (k k k k | a b c d | k k k k) The input is extended by\n *     filling all values beyond the edge with the same constant value k.\n *     'wrap': (a b c d | a b c d | a b c d) The input is extended by\n *     wrapping around to the opposite edge.\n *     'nearest': (a a a a | a b c d | d d d d) The input is extended by\n *     the nearest pixel.\n * @param fillValue A float represents the value to be filled outside the\n *     boundaries when fillMode is 'constant'.\n * @param Output dimension after the transform, [height, width]. If undefined,\n *     output is the same size as input image.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction transform_(image, transforms, interpolation = 'nearest', fillMode = 'constant', fillValue = 0, outputShape) {\n    const $image = convertToTensor(image, 'image', 'transform', 'float32');\n    const $transforms = convertToTensor(transforms, 'transforms', 'transform', 'float32');\n    util.assert($image.rank === 4, () => 'Error in transform: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    util.assert($transforms.rank === 2 &&\n        ($transforms.shape[0] === $image.shape[0] ||\n            $transforms.shape[0] === 1) &&\n        $transforms.shape[1] === 8, () => `Error in transform: Input transform should be batch x 8 or 1 x 8`);\n    util.assert(outputShape == null || outputShape.length === 2, () => 'Error in transform: outputShape must be [height, width] or null, ' +\n        `but got ${outputShape}.`);\n    const inputs = { image: $image, transforms: $transforms };\n    const attrs = { interpolation, fillMode, fillValue, outputShape };\n    return ENGINE.runKernel(Transform, inputs, attrs);\n}\nexport const transform = op({ transform_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { GreaterEqual } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greaterEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction greaterEqual_(a, b) {\n    let $a = convertToTensor(a, 'a', 'greaterEqual', 'string_or_numeric');\n    let $b = convertToTensor(b, 'b', 'greaterEqual', 'string_or_numeric');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(GreaterEqual, inputs);\n}\nexport const greaterEqual = op({ greaterEqual_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LogicalAnd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalAnd(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalAnd_(a, b) {\n    const $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');\n    const $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(LogicalAnd, inputs);\n}\nexport const logicalAnd = op({ logicalAnd_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Pack } from '../kernel_names';\nimport { convertToTensorArray } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction stack_(tensors, axis = 0) {\n    const $tensors = convertToTensorArray(tensors, 'tensors', 'stack', 'string_or_numeric');\n    util.assert($tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');\n    if ($tensors.length > 0) {\n        util.assert(axis <= $tensors[0].rank, () => 'Axis must be <= rank of the tensor');\n    }\n    const inputs = $tensors;\n    const attrs = { axis };\n    return ENGINE.runKernel(Pack, inputs, attrs);\n}\nexport const stack = op({ stack_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Unpack } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction unstack_(x, axis = 0) {\n    const $x = convertToTensor(x, 'x', 'unstack', 'string_or_numeric');\n    util.assert(axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\n    const inputs = { value: $x };\n    const attrs = { axis };\n    return ENGINE.runKernel(Unpack, inputs, attrs);\n}\nexport const unstack = op({ unstack_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assert } from '../../util';\nimport { greaterEqual } from '../greater_equal';\nimport { lessEqual } from '../less_equal';\nimport { logicalAnd } from '../logical_and';\nimport { op } from '../operation';\nimport { range } from '../range';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\nimport { zeros } from '../zeros';\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction bandPart_(a, numLower, numUpper) {\n    assert(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);\n    assert(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);\n    const $a = convertToTensor(a, 'a', 'bandPart');\n    assert($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n    const shape = $a.shape;\n    const [M, N] = $a.shape.slice(-2);\n    if (!(numLower <= M)) {\n        throw new Error(`bandPart(): numLower (${numLower})` +\n            ` must not be greater than the number of rows (${M}).`);\n    }\n    if (!(numUpper <= N)) {\n        throw new Error(`bandPart(): numUpper (${numUpper})` +\n            ` must not be greater than the number of columns (${N}).`);\n    }\n    if (numLower < 0) {\n        numLower = M;\n    }\n    if (numUpper < 0) {\n        numUpper = N;\n    }\n    const i = reshape(range(0, M, 1, 'int32'), [-1, 1]);\n    const j = range(0, N, 1, 'int32');\n    const ij = sub(i, j);\n    const inBand = logicalAnd(lessEqual(ij, scalar(+numLower, 'int32')), greaterEqual(ij, scalar(-numUpper, 'int32')));\n    const zero = zeros([M, N], $a.dtype);\n    return reshape(stack(unstack(reshape($a, [-1, M, N]))\n        .map(mat => where(inBand, mat, zero))), shape);\n}\nexport const bandPart = op({ bandPart_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Abs, ComplexAbs } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes absolute value element-wise: `abs(x)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.abs().print();  // or tf.abs(x)\n * ```\n * @param x The input `tf.Tensor`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction abs_(x) {\n    const $x = convertToTensor(x, 'x', 'abs');\n    if ($x.dtype === 'complex64') {\n        const inputs = { x: $x };\n        return ENGINE.runKernel(ComplexAbs, inputs);\n    }\n    else {\n        const inputs = { x: $x };\n        return ENGINE.runKernel(Abs, inputs);\n    }\n}\nexport const abs = op({ abs_ });\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\nexport function axesAreInnerMostDims(axes, rank) {\n    for (let i = 0; i < axes.length; ++i) {\n        if (axes[axes.length - i - 1] !== rank - 1 - i) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function combineLocations(outputLoc, reduceLoc, axes) {\n    const rank = outputLoc.length + reduceLoc.length;\n    const loc = [];\n    let outIdx = 0;\n    let reduceIdx = 0;\n    for (let dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            loc.push(outputLoc[outIdx++]);\n        }\n        else {\n            loc.push(reduceLoc[reduceIdx++]);\n        }\n    }\n    return loc;\n}\nexport function computeOutAndReduceShapes(aShape, axes) {\n    const outShape = [];\n    const rank = aShape.length;\n    for (let dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            outShape.push(aShape[dim]);\n        }\n    }\n    const reduceShape = axes.map(dim => aShape[dim]);\n    return [outShape, reduceShape];\n}\nexport function expandShapeToKeepDim(shape, axes) {\n    const reduceSubShape = axes.map(x => 1);\n    return combineLocations(shape, reduceSubShape, axes);\n}\nexport function assertAxesAreInnerMostDims(msg, axes, rank) {\n    util.assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` +\n        `Got axes ${axes} and rank-${rank} input.`);\n}\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\nexport function getAxesPermutation(axes, rank) {\n    if (axesAreInnerMostDims(axes, rank)) {\n        return null;\n    }\n    const result = [];\n    for (let i = 0; i < rank; ++i) {\n        if (axes.indexOf(i) === -1) {\n            result.push(i);\n        }\n    }\n    axes.forEach(axis => result.push(axis));\n    return result;\n}\n/** Returns the axes permutation that undoes the original permutation. */\nexport function getUndoAxesPermutation(axes) {\n    return axes.map((axis, i) => [i, axis])\n        .sort((a, b) => a[1] - b[1])\n        .map(x => x[0]);\n}\nexport function getInnerMostAxes(numAxes, rank) {\n    const res = [];\n    for (let i = rank - numAxes; i < rank; ++i) {\n        res.push(i);\n    }\n    return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Max } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the maximum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.max().print();  // or tf.max(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.max(axis).print();  // or tf.max(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction max_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'max');\n    const inputs = { x: $x };\n    const attrs = { reductionIndices: axis, keepDims };\n    return ENGINE.runKernel(Max, inputs, attrs);\n}\nexport const max = op({ max_ });\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Min } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the minimum value from the input.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axes`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axes` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.min().print();  // or tf.min(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.min(axis).print();  // or tf.min(x, axis)\n * ```\n *\n * @param x The input Tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction min_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'min');\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    return ENGINE.runKernel(Min, inputs, attrs);\n}\nexport const min = op({ min_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Pow } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the power of one `tf.Tensor` to another. Supports broadcasting.\n *\n * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for\n * corresponding elements in x and y. The result's dtype will be the upcasted\n * type of the `base` and `exp` dtypes.\n *\n * ```js\n * const a = tf.tensor([[2, 3], [4, 5]])\n * const b = tf.tensor([[1, 2], [3, 0]]).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n *\n * ```js\n * const a = tf.tensor([[1, 2], [3, 4]])\n * const b = tf.tensor(2).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n * We also expose `powStrict` which has the same signature as this op and\n * asserts that `base` and `exp` are the same shape (does not broadcast).\n *\n * @param base The base `tf.Tensor` to pow element-wise.\n * @param exp The exponent `tf.Tensor` to pow element-wise.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction pow_(base, exp) {\n    let $base = convertToTensor(base, 'base', 'pow');\n    let $exp = convertToTensor(exp, 'exp', 'pow');\n    [$base, $exp] = makeTypesMatch($base, $exp);\n    const inputs = { a: $base, b: $exp };\n    return ENGINE.runKernel(Pow, inputs);\n}\nexport const pow = op({ pow_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sqrt } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.sqrt().print();  // or tf.sqrt(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sqrt_(x) {\n    const $x = convertToTensor(x, 'x', 'sqrt', 'float32');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Sqrt, inputs);\n}\nexport const sqrt = op({ sqrt_ });\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes square of `x` element-wise: `x ^ 2`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\n *\n * x.square().print();  // or tf.square(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction square_(x) {\n    const $x = convertToTensor(x, 'x', 'square');\n    const attrs = {};\n    return ENGINE.runKernel('Square', { x: $x }, attrs);\n}\nexport const square = op({ square_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { abs } from './abs';\nimport * as axis_util from './axis_util';\nimport { max } from './max';\nimport { min } from './min';\nimport { op } from './operation';\nimport { pow } from './pow';\nimport { reshape } from './reshape';\nimport { scalar } from './scalar';\nimport { sqrt } from './sqrt';\nimport { square } from './square';\nimport { sum } from './sum';\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^1/2*\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is a integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm have the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction norm_(x, ord = 'euclidean', axis = null, keepDims = false) {\n    x = convertToTensor(x, 'x', 'norm');\n    const norm = normImpl(x, ord, axis);\n    let keepDimsShape = norm.shape;\n    if (keepDims) {\n        const axes = parseAxisParam(axis, x.shape);\n        keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n    }\n    return reshape(norm, keepDimsShape);\n}\nfunction normImpl(x, p, axis = null) {\n    if (x.rank === 0) {\n        return abs(x);\n    }\n    // consider vector when no axis is specified\n    if (x.rank !== 1 && axis === null) {\n        return normImpl(reshape(x, [-1]), p, axis);\n    }\n    // vector\n    if (x.rank === 1 || typeof axis === 'number' ||\n        Array.isArray(axis) && axis.length === 1) {\n        if (p === 1) {\n            return sum(abs(x), axis);\n        }\n        if (p === Infinity) {\n            return max(abs(x), axis);\n        }\n        if (p === -Infinity) {\n            return min(abs(x), axis);\n        }\n        if (p === 'euclidean' || p === 2) {\n            // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n            return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n        }\n        throw new Error(`Error in norm: invalid ord value: ${p}`);\n    }\n    // matrix (assumption axis[0] < axis[1])\n    if (Array.isArray(axis) && axis.length === 2) {\n        if (p === 1) {\n            return max(sum(abs(x), axis[0]), axis[1] - 1);\n        }\n        if (p === Infinity) {\n            return max(sum(abs(x), axis[1]), axis[0]);\n        }\n        if (p === -Infinity) {\n            return min(sum(abs(x), axis[1]), axis[0]);\n        }\n        if (p === 'fro' || p === 'euclidean') {\n            // norm(x) = sqrt(sum(pow(x, 2)))\n            return sqrt(sum(square(x), axis));\n        }\n        throw new Error(`Error in norm: invalid ord value: ${p}`);\n    }\n    throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\nexport const norm = op({ norm_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { squeezeShape } from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Removes dimensions of size 1 from the shape of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\n * x.squeeze().print();\n * ```\n *\n * @param x The input tensor to be squeezed.\n * @param axis An optional list of numbers. If specified, only\n *     squeezes the dimensions listed. The dimension index starts at 0. It\n * is an error to squeeze a dimension that is not 1.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction squeeze_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'squeeze');\n    return reshape($x, squeezeShape($x.shape, axis).newShape);\n}\nexport const squeeze = op({ squeeze_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { assert } from '../../util';\nimport { div } from '../div';\nimport { mul } from '../mul';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { split } from '../split';\nimport { squeeze } from '../squeeze';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Othogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction gramSchmidt_(xs) {\n    let inputIsTensor2D;\n    if (Array.isArray(xs)) {\n        inputIsTensor2D = false;\n        assert(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' +\n            'empty');\n        const dim = xs[0].shape[0];\n        for (let i = 1; i < xs.length; ++i) {\n            assert(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +\n                `(${xs[i].shape[0]} vs. ${dim})`);\n        }\n    }\n    else {\n        inputIsTensor2D = true;\n        xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n    }\n    assert(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` +\n        `number of dimensions (${xs[0].shape[0]}).`);\n    const ys = [];\n    const xs1d = xs;\n    for (let i = 0; i < xs.length; ++i) {\n        ys.push(ENGINE.tidy(() => {\n            let x = xs1d[i];\n            if (i > 0) {\n                for (let j = 0; j < i; ++j) {\n                    const proj = mul(sum(mul(ys[j], x)), ys[j]);\n                    x = sub(x, proj);\n                }\n            }\n            return div(x, norm(x, 'euclidean'));\n        }));\n    }\n    if (inputIsTensor2D) {\n        return stack(ys, 0);\n    }\n    else {\n        return ys;\n    }\n}\nexport const gramSchmidt = op({ gramSchmidt_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { env } from './environment';\nimport { setDeprecationWarningFn } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\n/**\n * Enables production mode which disables correctness checks in favor of\n * performance.\n *\n * @doc {heading: 'Environment'}\n */\nexport function enableProdMode() {\n    env().set('PROD', true);\n}\n/**\n * Enables debug mode which will log information about all executed kernels:\n * the elapsed time of the kernel execution, as well as the rank, shape, and\n * size of the output tensor.\n *\n * Debug mode will significantly slow down your application as it will\n * download the result of every operation to the CPU. This should not be used in\n * production. Debug mode does not affect the timing information of the kernel\n * execution as we do not measure download time in the kernel execution time.\n *\n * See also: `tf.profile`, `tf.memory`.\n *\n * @doc {heading: 'Environment'}\n */\nexport function enableDebugMode() {\n    env().set('DEBUG', true);\n}\n/** Globally disables deprecation warnings */\nexport function disableDeprecationWarnings() {\n    env().set('DEPRECATION_WARNINGS_ENABLED', false);\n    console.warn(`TensorFlow.js deprecation warnings have been disabled.`);\n}\n/** Warn users about deprecated functionality. */\nexport function deprecationWarn(msg) {\n    if (env().getBool('DEPRECATION_WARNINGS_ENABLED')) {\n        console.warn(msg + ' You can disable deprecation warnings with ' +\n            'tf.disableDeprecationWarnings().');\n    }\n}\nsetDeprecationWarningFn(deprecationWarn);\n/**\n * Dispose all variables kept in backend engine.\n *\n * @doc {heading: 'Environment'}\n */\nexport function disposeVariables() {\n    ENGINE.disposeVariables();\n}\n/**\n * It returns the global engine that keeps track of all tensors and backends.\n *\n * @doc {heading: 'Environment'}\n */\nexport function engine() {\n    return ENGINE;\n}\n/**\n * Returns memory info at the current time in the program. The result is an\n * object with the following properties:\n *\n * - `numBytes`: Number of bytes allocated (undisposed) at this time.\n * - `numTensors`: Number of unique tensors allocated.\n * - `numDataBuffers`: Number of unique data buffers allocated\n *   (undisposed) at this time, which is ≤ the number of tensors\n *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same\n *   data buffer with `a`).\n * - `unreliable`: True if the memory usage is unreliable. See `reasons` when\n *    `unreliable` is true.\n * - `reasons`: `string[]`, reasons why the memory is unreliable, present if\n *    `unreliable` is true.\n *\n * WebGL Properties:\n * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at\n *     this time.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function memory() {\n    return ENGINE.memory();\n}\n/**\n * Executes the provided function `f()` and returns a promise that resolves\n * with information about the function's memory use:\n * - `newBytes`: the number of new bytes allocated\n * - `newTensors`: the number of new tensors created\n * - `peakBytes`: the peak number of bytes allocated\n * - `kernels`: an array of objects for each kernel involved that reports\n * their input and output shapes, number of bytes used, and number of new\n * tensors created.\n * - `kernelNames`: an array of unique strings with just the names of the\n * kernels in the `kernels` array.\n *\n * ```js\n * const profile = await tf.profile(() => {\n *   const x = tf.tensor1d([1, 2, 3]);\n *   let x2 = x.square();\n *   x2.dispose();\n *   x2 = x.square();\n *   x2.dispose();\n *   return x;\n * });\n *\n * console.log(`newBytes: ${profile.newBytes}`);\n * console.log(`newTensors: ${profile.newTensors}`);\n * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>\n * k.totalBytesSnapshot)}`);\n * ```\n *\n *\n * @doc {heading: 'Performance', subheading: 'Profile'}\n */\nexport function profile(f) {\n    return ENGINE.profile(f);\n}\n/**\n * Executes the provided function `fn` and after it is executed, cleans up all\n * intermediate tensors allocated by `fn` except those returned by `fn`.\n * `fn` must not return a Promise (async functions not allowed). The returned\n * result can be a complex object.\n *\n * Using this method helps avoid memory leaks. In general, wrap calls to\n * operations in `tf.tidy` for automatic memory cleanup.\n *\n * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to\n * dispose variables, please use `tf.disposeVariables` or call dispose()\n * directly on variables.\n *\n * ```js\n * // y = 2 ^ 2 + 1\n * const y = tf.tidy(() => {\n *   // a, b, and one will be cleaned up when the tidy ends.\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *   const b = a.square();\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * y.print();\n * ```\n *\n * @param nameOrFn The name of the closure, or the function to execute.\n *     If a name is provided, the 2nd argument should be the function.\n *     If debug mode is on, the timing and the memory usage of the function\n *     will be tracked and displayed on the console using the provided name.\n * @param fn The function to execute.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function tidy(nameOrFn, fn) {\n    return ENGINE.tidy(nameOrFn, fn);\n}\n/**\n * Disposes any `tf.Tensor`s found within the provided object.\n *\n * @param container an object that may be a `tf.Tensor` or may directly\n *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If\n *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing\n *     happens. In general it is safe to pass any object here, except that\n *     `Promise`s are not supported.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function dispose(container) {\n    const tensors = getTensorsInContainer(container);\n    tensors.forEach(tensor => tensor.dispose());\n}\n/**\n * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed\n * automatically.\n *\n * ```js\n * let b;\n * const y = tf.tidy(() => {\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *\n *   // b will not be cleaned up by the tidy. a and one will be cleaned up\n *   // when the tidy ends.\n *   b = tf.keep(a.square());\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * console.log('y:');\n * y.print();\n * console.log('b:');\n * b.print();\n * ```\n *\n * @param result The tensor to keep from being disposed.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function keep(result) {\n    return ENGINE.keep(result);\n}\n/**\n * Executes `f()` and returns a promise that resolves with timing\n * information.\n *\n * The result is an object with the following properties:\n *\n * - `wallMs`: Wall execution time.\n * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the\n * WebGL backend and the query timer extension is not available, this will\n * return an error object.\n * - On `WebGL` The following additional properties exist:\n *   - `uploadWaitMs`: CPU blocking time on texture uploads.\n *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\n *\n * ```js\n * const x = tf.randomNormal([20, 20]);\n * const time = await tf.time(() => x.matMul(x));\n *\n * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\n * ```\n *\n * @param f The function to execute and time.\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nexport function time(f) {\n    return ENGINE.time(f);\n}\n/**\n * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and\n * executing operations on those tensors. Returns a promise that resolves\n * to a boolean if the backend initialization was successful.\n *\n * Note this disposes the current backend, if any, as well as any tensors\n * associated with it. A new backend is initialized, even if it is of the\n * same type as the previous one.\n *\n * @param backendName The name of the backend. Currently supports\n *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js\n *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).\n *\n * @doc {heading: 'Backends'}\n */\nexport function setBackend(backendName) {\n    return ENGINE.setBackend(backendName);\n}\n/**\n * Returns a promise that resolves when the currently selected backend (or the\n * highest priority one) has initialized. Await this promise when you are using\n * a backend that has async initialization.\n *\n * @doc {heading: 'Backends'}\n */\nexport function ready() {\n    return ENGINE.ready();\n}\n/**\n * Returns the current backend name (cpu, webgl, etc). The backend is\n * responsible for creating tensors and executing operations on those tensors.\n *\n * @doc {heading: 'Backends'}\n */\nexport function getBackend() {\n    return ENGINE.backendName;\n}\n/**\n * Removes a backend and the registered factory.\n *\n * @doc {heading: 'Backends'}\n */\nexport function removeBackend(name) {\n    ENGINE.removeBackend(name);\n}\n/**\n * Finds the backend registered under the provided name. Returns null if the\n * name is not in the registry, or the registration hasn't finished yet.\n */\nexport function findBackend(name) {\n    return ENGINE.findBackend(name);\n}\n/**\n * Finds the backend factory registered under the provided name. Returns a\n * function that produces a new backend when called. Returns null if the name\n * is not in the registry.\n */\nexport function findBackendFactory(name) {\n    return ENGINE.findBackendFactory(name);\n}\n/**\n * Registers a global backend. The registration should happen when importing\n * a module file (e.g. when importing `backend_webgl.ts`), and is used for\n * modular builds (e.g. custom tfjs bundle with only webgl support).\n *\n * @param factory The backend factory function. When called, it should\n * return a backend instance, or a promise of an instance.\n * @param priority The priority of the backend (higher = more important).\n *     In case multiple backends are registered, the priority is used to find\n *     the best backend. Defaults to 1.\n * @return False if there is already a registered backend under this name, true\n *     if not.\n *\n * @doc {heading: 'Backends'}\n */\nexport function registerBackend(name, factory, priority = 1) {\n    return ENGINE.registerBackend(name, factory, priority);\n}\n/**\n * Gets the current backend. If no backends have been initialized, this will\n * attempt to initialize the best backend. Will throw an error if the highest\n * priority backend has async initialization, in which case, you should call\n * 'await tf.ready()' before running other code.\n *\n * @doc {heading: 'Backends'}\n */\nexport function backend() {\n    return ENGINE.backend;\n}\n/**\n * Sets the global platform.\n *\n * @param platformName The name of this platform.\n * @param platform A platform implementation.\n */\nexport function setPlatform(platformName, platform) {\n    env().setPlatform(platformName, platform);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ExpandDims } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n * into the tensor's shape.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const axis = 1;\n * x.expandDims(axis).print();\n * ```\n *\n * @param x The input tensor whose dimensions to be expanded.\n * @param axis The dimension index at which to insert shape of `1`. Defaults\n *     to 0 (the first dimension).\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction expandDims_(x, axis = 0) {\n    const $x = convertToTensor(x, 'x', 'expandDims', 'string_or_numeric');\n    util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');\n    const inputs = { input: $x };\n    const attrs = { dim: axis };\n    return ENGINE.runKernel(ExpandDims, inputs, attrs);\n}\nexport const expandDims = op({ expandDims_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { tile } from './tile';\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction eye_(numRows, numColumns, batchShape, dtype = 'float32') {\n    if (numColumns == null) {\n        numColumns = numRows;\n    }\n    const buff = buffer([numRows, numColumns], dtype);\n    const n = numRows <= numColumns ? numRows : numColumns;\n    for (let i = 0; i < n; ++i) {\n        buff.set(1, i, i);\n    }\n    const out = reshape(buff.toTensor(), [numRows, numColumns]);\n    if (batchShape == null) {\n        return out;\n    }\n    else {\n        if (batchShape.length === 1) {\n            return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n        }\n        else if (batchShape.length === 2) {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return tile(expandDims(expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\n        }\n        else if (batchShape.length === 3) {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [\n                batchShape[0], batchShape[1], batchShape[2], 1, 1\n            ]);\n        }\n        else {\n            throw new Error(`eye() currently supports only 1D and 2D ` +\n                // tslint:disable-next-line:no-any\n                `batchShapes, but received ${batchShape.length}D.`);\n        }\n    }\n}\nexport const eye = op({ eye_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BatchMatMul } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction matMul_(a, b, transposeA = false, transposeB = false) {\n    let $a = convertToTensor(a, 'a', 'matMul');\n    let $b = convertToTensor(b, 'b', 'matMul');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const inputs = { a: $a, b: $b };\n    const attrs = { transposeA, transposeB };\n    return ENGINE.runKernel(BatchMatMul, inputs, attrs);\n}\nexport const matMul = op({ matMul_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Neg } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes `-1 * x` element-wise.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);\n *\n * x.neg().print();  // or tf.neg(x)\n * ```\n *\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction neg_(x) {\n    const $x = convertToTensor(x, 'x', 'neg');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Neg, inputs);\n}\nexport const neg = op({ neg_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Transpose } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_(x, perm) {\n    const $x = convertToTensor(x, 'x', 'transpose');\n    if (perm == null) {\n        perm = $x.shape.map((s, i) => i).reverse();\n    }\n    util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` +\n        `must match length of perm ${perm}.`);\n    perm.forEach(axis => {\n        util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n    });\n    if ($x.rank <= 1) {\n        return $x.clone();\n    }\n    const inputs = { x: $x };\n    const attrs = { perm };\n    return ENGINE.runKernel(Transpose, inputs, attrs);\n}\nexport const transpose = op({ transpose_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { dispose } from '../../globals';\nimport { assert } from '../../util';\nimport { clone } from '../clone';\nimport { concat } from '../concat';\nimport { div } from '../div';\nimport { eye } from '../eye';\nimport { greater } from '../greater';\nimport { matMul } from '../mat_mul';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { tensor2d } from '../tensor2d';\nimport { transpose } from '../transpose';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\n/**\n * Compute QR decomposition of m-by-n matrix using Householder transformation.\n *\n * Implementation based on\n *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [3, 4]]);\n * let [q, r] = tf.linalg.qr(a);\n * console.log('Q');\n * q.print();\n * console.log('R');\n * r.print();\n * console.log('Orthogonalized');\n * q.dot(q.transpose()).print()  // should be nearly the identity matrix.\n * console.log('Reconstructed');\n * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n * ```\n *\n * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\n *   it has the shape `[..., M, N]`.\n * @param fullMatrices An optional boolean parameter. Defaults to `false`.\n *   If `true`, compute full-sized `Q`. If `false` (the default),\n *   compute only the leading N columns of `Q` and `R`.\n * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,\n *   i.e., its columns all have unit norm and are mutually orthogonal.\n *   If `M >= N`,\n *     If `fullMatrices` is `false` (default),\n *       - `Q` has a shape of `[..., M, N]`,\n *       - `R` has a shape of `[..., N, N]`.\n *     If `fullMatrices` is `true` (default),\n *       - `Q` has a shape of `[..., M, M]`,\n *       - `R` has a shape of `[..., M, N]`.\n *   If `M < N`,\n *     - `Q` has a shape of `[..., M, M]`,\n *     - `R` has a shape of `[..., M, N]`.\n * @throws If the rank of `x` is less than 2.\n *\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction qr_(x, fullMatrices = false) {\n    assert(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);\n    if (x.rank === 2) {\n        return qr2d(x, fullMatrices);\n    }\n    else {\n        // Rank > 2.\n        // TODO(cais): Below we split the input into individual 2D tensors,\n        //   perform QR decomposition on them and then stack the results back\n        //   together. We should explore whether this can be parallelized.\n        const outerDimsProd = x.shape.slice(0, x.shape.length - 2)\n            .reduce((value, prev) => value * prev);\n        const x2ds = unstack(reshape(x, [\n            outerDimsProd, x.shape[x.shape.length - 2],\n            x.shape[x.shape.length - 1]\n        ]), 0);\n        const q2ds = [];\n        const r2ds = [];\n        x2ds.forEach(x2d => {\n            const [q2d, r2d] = qr2d(x2d, fullMatrices);\n            q2ds.push(q2d);\n            r2ds.push(r2d);\n        });\n        const q = reshape(stack(q2ds, 0), x.shape);\n        const r = reshape(stack(r2ds, 0), x.shape);\n        return [q, r];\n    }\n}\nfunction qr2d(x, fullMatrices = false) {\n    return ENGINE.tidy(() => {\n        assert(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);\n        const m = x.shape[0];\n        const n = x.shape[1];\n        let q = eye(m); // Orthogonal transform so far.\n        let r = clone(x); // Transformed matrix so far.\n        const one2D = tensor2d([[1]], [1, 1]);\n        let w = clone(one2D);\n        const iters = m >= n ? n : m;\n        for (let j = 0; j < iters; ++j) {\n            // This tidy within the for-loop ensures we clean up temporary\n            // tensors as soon as they are no longer needed.\n            const rTemp = r;\n            const wTemp = w;\n            const qTemp = q;\n            [w, r, q] = ENGINE.tidy(() => {\n                // Find H = I - tau * w * w', to put zeros below R(j, j).\n                const rjEnd1 = slice(r, [j, j], [m - j, 1]);\n                const normX = norm(rjEnd1);\n                const rjj = slice(r, [j, j], [1, 1]);\n                // The sign() function returns 0 on 0, which causes division by zero.\n                const s = where(greater(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));\n                const u1 = sub(rjj, mul(s, normX));\n                const wPre = div(rjEnd1, u1);\n                if (wPre.shape[0] === 1) {\n                    w = clone(one2D);\n                }\n                else {\n                    w = concat([\n                        one2D,\n                        slice(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])\n                    ], 0);\n                }\n                const tau = neg(div(matMul(s, u1), normX));\n                // -- R := HR, Q := QH.\n                const rjEndAll = slice(r, [j, 0], [m - j, n]);\n                const tauTimesW = mul(tau, w);\n                const wT = transpose(w);\n                if (j === 0) {\n                    r = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n                }\n                else {\n                    const rTimesTau = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n                    r = concat([slice(r, [0, 0], [j, n]), rTimesTau], 0);\n                }\n                const tawTimesWT = transpose(tauTimesW);\n                const qAllJEnd = slice(q, [0, j], [m, q.shape[1] - j]);\n                if (j === 0) {\n                    q = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n                }\n                else {\n                    const qTimesTau = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n                    q = concat([slice(q, [0, 0], [m, j]), qTimesTau], 1);\n                }\n                return [w, r, q];\n            });\n            dispose([rTemp, wTemp, qTemp]);\n        }\n        if (!fullMatrices && m > n) {\n            q = slice(q, [0, 0], [m, n]);\n            r = slice(r, [0, 0], [n, n]);\n        }\n        return [q, r];\n    });\n}\nexport const qr = op({ qr_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Reduction;\n(function (Reduction) {\n    Reduction[Reduction[\"NONE\"] = 0] = \"NONE\";\n    Reduction[Reduction[\"MEAN\"] = 1] = \"MEAN\";\n    Reduction[Reduction[\"SUM\"] = 2] = \"SUM\";\n    Reduction[Reduction[\"SUM_BY_NONZERO_WEIGHTS\"] = 3] = \"SUM_BY_NONZERO_WEIGHTS\";\n})(Reduction || (Reduction = {}));\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Mean } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the mean of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is\n * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with\n * a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.mean().print();  // or tf.mean(a)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.mean(axis).print();  // or tf.mean(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction mean_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'mean');\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    return ENGINE.runKernel(Mean, inputs, attrs);\n}\nexport const mean = op({ mean_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { NotEqual } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a != b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([0, 2, 3]);\n *\n * a.notEqual(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction notEqual_(a, b) {\n    let $a = convertToTensor(a, 'a', 'notEqual', 'string_or_numeric');\n    let $b = convertToTensor(b, 'b', 'notEqual', 'string_or_numeric');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(NotEqual, inputs);\n}\nexport const notEqual = op({ notEqual_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { makeOnesTypedArray, sizeFromShape } from '../util';\nimport { complex } from './complex';\nimport { zeros } from './zeros';\n/**\n * Creates a `tf.Tensor` with all elements set to 1.\n *\n * ```js\n * tf.ones([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n *     'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function ones(shape, dtype = 'float32') {\n    if (dtype === 'complex64') {\n        const real = ones(shape, 'float32');\n        const imag = zeros(shape, 'float32');\n        return complex(real, imag);\n    }\n    const values = makeOnesTypedArray(sizeFromShape(shape), dtype);\n    return ENGINE.makeTensor(values, shape, dtype);\n}\n","import { convertToTensor } from '../../tensor_util_env';\nimport { cast } from '../cast';\nimport { div } from '../div';\nimport { Reduction } from '../loss_ops_utils';\nimport { mean } from '../mean';\nimport { mul } from '../mul';\nimport { notEqual } from '../not_equal';\nimport { ones } from '../ones';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sum } from '../sum';\n/**\n * Computes the weighted loss between two tensors.\n *\n * @param losses Tensor of shape `[batch_size, d1, ... dN]`.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `losses`, and must be broadcastable to `losses` (i.e., all\n *    dimensions must be either `1`, or the same as the corresponding\n *    `losses` dimension).\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction computeWeightedLoss_(losses, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');\n    }\n    const weightedLoss = ($weights == null) ? $losses : mul($losses, $weights);\n    if (reduction === Reduction.NONE) {\n        return weightedLoss;\n    }\n    if (reduction === Reduction.SUM) {\n        return sum(weightedLoss);\n    }\n    if (reduction === Reduction.MEAN) {\n        if ($weights == null) {\n            return mean(weightedLoss);\n        }\n        else {\n            const broadcastFactor = $losses.size / $weights.size;\n            const result = div(sum(weightedLoss), sum($weights));\n            return broadcastFactor > 1 ? div(result, scalar(broadcastFactor)) :\n                result;\n        }\n    }\n    if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n        if ($weights == null) {\n            return div(sum(weightedLoss), scalar($losses.size));\n        }\n        else {\n            const broadcastedWeights = mul($weights, ones($losses.shape));\n            const numNonZeros = cast(sum(notEqual(broadcastedWeights, scalar(0))), 'float32');\n            return div(sum(weightedLoss), numNonZeros);\n        }\n    }\n    throw Error(`Unknown reduction: ${reduction}`);\n}\nexport const computeWeightedLoss = op({ computeWeightedLoss_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { Reduction } from '../loss_ops_utils';\nimport { op } from '../operation';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the absolute difference loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction absoluteDifference_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'absoluteDifference');\n    const $predictions = convertToTensor(predictions, 'predictions', 'absoluteDifference');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'absoluteDifference');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in absoluteDifference: ');\n    const losses = abs(sub($labels, $predictions));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const absoluteDifference = op({ absoluteDifference_ });\n","import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the cosine distance loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param axis The dimension along which the cosine distance is computed.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction cosineDistance_(labels, predictions, axis, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'cosineDistance');\n    const $predictions = convertToTensor(predictions, 'predictions', 'cosineDistance');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'cosineDistance');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in cosineDistance: ');\n    const one = scalar(1);\n    const losses = sub(one, sum(mul($labels, $predictions), axis, true));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const cosineDistance = op({ cosineDistance_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Relu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes rectified linear element-wise: `max(x, 0)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.relu().print();  // or tf.relu(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32'.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction relu_(x) {\n    const $x = convertToTensor(x, 'x', 'relu');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Relu, inputs);\n}\nexport const relu = op({ relu_ });\n","import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { relu } from '../relu';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the Hinge loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction hingeLoss_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    let $labels = convertToTensor(labels, 'labels', 'hingeLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'hingeLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');\n    const one = scalar(1);\n    // Convert binary labels to (-1, 1)\n    $labels = sub(mul(scalar(2), $labels), one);\n    const losses = relu(sub(one, mul($labels, $predictions)));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const hingeLoss = op({ hingeLoss_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Minimum } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { cast } from './cast';\nimport { op } from './operation';\n/**\n * Returns the min of a and b (`a < b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `minimumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * ```js\n * // Broadcast minimum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction minimum_(a, b) {\n    let $a = convertToTensor(a, 'a', 'minimum');\n    let $b = convertToTensor(b, 'b', 'minimum');\n    [$a, $b] = makeTypesMatch($a, $b);\n    if ($a.dtype === 'bool') {\n        $a = cast($a, 'int32');\n        $b = cast($b, 'int32');\n    }\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(Minimum, inputs);\n}\nexport const minimum = op({ minimum_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { add } from '../add';\nimport { Reduction } from '../loss_ops_utils';\nimport { minimum } from '../minimum';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { square } from '../square';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the huber loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param delta Point where huber loss changes from quadratic to linear.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`.\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction huberLoss_(labels, predictions, weights, delta = 1.0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'huberLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'huberLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'huberLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in huberLoss: ');\n    const deltaScalar = scalar(delta);\n    const error = abs(sub($predictions, $labels));\n    const quadratic = minimum(error, deltaScalar);\n    const linear = sub(error, quadratic);\n    const losses = add(mul(scalar(0.5), square(quadratic)), mul(deltaScalar, linear));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const huberLoss = op({ huberLoss_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Log } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E]);\n *\n * x.log().print();  // or tf.log(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction log_(x) {\n    const $x = convertToTensor(x, 'x', 'log', 'float32');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Log, inputs);\n}\nexport const log = op({ log_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { add } from '../add';\nimport { log } from '../log';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the log loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param epsilon A small increment to avoid taking log of zero\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'logLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'logLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'logLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');\n    const one = scalar(1);\n    const epsilonScalar = scalar(epsilon);\n    const l1 = neg(mul($labels, log(add($predictions, epsilonScalar))));\n    const l2 = mul(sub(one, $labels), log(add(sub(one, $predictions), epsilonScalar)));\n    const losses = sub(l1, l2);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const logLoss = op({ logLoss_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SquaredDifference } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns (a - b) * (a - b) element-wise.\n * Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * ```js\n * // Broadcast squared difference  a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction squaredDifference_(a, b) {\n    let $a = convertToTensor(a, 'a', 'squaredDifference');\n    let $b = convertToTensor(b, 'b', 'squaredDifference');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    const attrs = {};\n    return ENGINE.runKernel(SquaredDifference, inputs, attrs);\n}\nexport const squaredDifference = op({ squaredDifference_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { op } from '../operation';\nimport { squaredDifference } from '../squared_difference';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the mean squared error between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction meanSquaredError_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'meanSquaredError');\n    const $predictions = convertToTensor(predictions, 'predictions', 'meanSquaredError');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'meanSquaredError');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in meanSquaredError: ');\n    const losses = squaredDifference($labels, $predictions);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const meanSquaredError = op({ meanSquaredError_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Exp } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.exp().print();  // or tf.exp(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction exp_(x) {\n    const $x = convertToTensor(x, 'x', 'exp');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Exp, inputs);\n}\nexport const exp = op({ exp_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Log1p } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes natural logarithm of the input `tf.Tensor` plus one\n * element-wise: `ln(1 + x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E - 1]);\n *\n * x.log1p().print();  // or tf.log1p(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction log1p_(x) {\n    const $x = convertToTensor(x, 'x', 'log1p');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Log1p, inputs);\n}\nexport const log1p = op({ log1p_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { add } from '../add';\nimport { exp } from '../exp';\nimport { log1p } from '../log1p';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { relu } from '../relu';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\nfunction sigmoidCrossEntropyWithLogits_(labels, logits) {\n    const $labels = convertToTensor(labels, 'labels', 'sigmoidCrossEntropyWithLogits');\n    const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropyWithLogits');\n    assertShapesMatch($labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');\n    /**\n     * Implementation Details:\n     *\n     * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n     *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n     *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n     *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n     *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n     *   = (1 - z) * x + log(1 + exp(-x))\n     *   = x - x * z + log(1 + exp(-x))\n     *\n     *   For x < 0, to avoid overflow in exp(-x), we reformulate the above\n     *     x - x * z + log(1 + exp(-x))\n     *   = log(exp(x)) - x * z + log(1 + exp(-x))\n     *   = - x * z + log(1 + exp(x))\n     *\n     * Hence, to ensure stability and avoid overflow, the implementation uses\n     * this equivalent formulation:\n     *     max(x, 0) - x * z + log(1 + exp(-abs(x)))\n     */\n    const maxOutput = relu($logits);\n    const outputXTarget = mul($logits, $labels);\n    const sigmoidOutput = log1p(exp(neg(abs($logits))));\n    return add(sub(maxOutput, outputXTarget), sigmoidOutput);\n}\n/**\n * Computes the sigmoid cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\n *                         + 0.5 * labelSmoothing\n *\n * @param multiClassLabels The ground truth output tensor of shape\n * [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    let $multiClassLabels = convertToTensor(multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');\n    const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropy');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'sigmoidCrossEntropy');\n    }\n    assertShapesMatch($multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');\n    if (labelSmoothing > 0) {\n        const labelSmoothingScalar = scalar(labelSmoothing);\n        const one = scalar(1);\n        const half = scalar(0.5);\n        $multiClassLabels =\n            add(mul($multiClassLabels, sub(one, labelSmoothingScalar)), mul(half, labelSmoothingScalar));\n    }\n    const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const sigmoidCrossEntropy = op({ sigmoidCrossEntropy_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { Tensor, Variable } from './tensor';\nimport { convertToTensor, convertToTensorArray } from './tensor_util_env';\nimport * as util from './util';\n/**\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\n * gradient of `f(x)` with respect to `x`.\n *\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.grad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * g(x).print();\n * ```\n *\n * ```js\n * // f(x) = x ^ 3\n * const f = x => x.pow(tf.scalar(3, 'int32'));\n * // f'(x) = 3x ^ 2\n * const g = tf.grad(f);\n * // f''(x) = 6x\n * const gg = tf.grad(g);\n *\n * const x = tf.tensor1d([2, 3]);\n * gg(x).print();\n * ```\n *\n * @param f The function f(x), to compute gradient for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grad(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n    return (x, dy) => {\n        // x can be of any dtype, thus null as the last argument.\n        const $x = convertToTensor(x, 'x', 'tf.grad', 'string_or_numeric');\n        const $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n        return ENGINE.tidy(() => {\n            const { value, grads } = ENGINE.gradients(() => f($x), [$x], $dy);\n            if ($dy != null) {\n                util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' +\n                    'returned by f(x)');\n            }\n            checkGrads(grads);\n            return grads[0];\n        });\n    };\n}\n/**\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\n * which gives an array of gradients of `f()` with respect to each input\n * [`x1`,`x2`,...].\n *\n * If `dy` is passed when calling `g()`, the gradient of\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\n * The provided `f` must take one or more tensors and return a single tensor\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df / da = b, df / db = a\n * const g = tf.grads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const [da, db] = g([a, b]);\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @param f The function `f(x1, x2,...)` to compute gradients for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grads(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n    return (args, dy) => {\n        util.assert(Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' +\n            'of `Tensor`s or `TensorLike`s');\n        // args can be of any dtype, thus null as the last argument.\n        const $args = convertToTensorArray(args, 'args', 'tf.grads', 'string_or_numeric');\n        const $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n        return ENGINE.tidy(() => {\n            const { value, grads } = ENGINE.gradients(() => f(...$args), $args, $dy);\n            if ($dy != null) {\n                util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' +\n                    'match the shape returned by f([x1,...])');\n            }\n            checkGrads(grads);\n            return grads;\n        });\n    };\n}\n/**\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.valueAndGrad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * const {value, grad} = g(x);\n *\n * console.log('value');\n * value.print();\n * console.log('grad');\n * grad.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrad(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in valueAndGrad(f) must be a function');\n    return (x, dy) => {\n        util.assert(x instanceof Tensor, () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n        util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n        const { grads, value } = ENGINE.gradients(() => f(x), [x], dy);\n        checkGrads(grads);\n        return { grad: grads[0], value };\n    };\n}\n/**\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df/da = b, df/db = a\n * const g = tf.valueAndGrads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const {value, grads} = g([a, b]);\n *\n * const [da, db] = grads;\n *\n * console.log('value');\n * value.print();\n *\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrads(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in valueAndGrads(f) must be a function');\n    return (args, dy) => {\n        util.assert(Array.isArray(args) && args.every(arg => arg instanceof Tensor), () => 'The args passed in valueAndGrads(f)(args) must be array of ' +\n            'tensors');\n        util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n        const res = ENGINE.gradients(() => f(...args), args, dy);\n        if (dy != null) {\n            util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +\n                'match the shape returned by f([x1,...])');\n        }\n        checkGrads(res.grads);\n        return res;\n    };\n}\n/**\n * Computes and returns the gradient of f(x) with respect to the list of\n * trainable variables provided by `varList`. If no list is provided, it\n * defaults to all trainable variables.\n *\n * ```js\n * const a = tf.variable(tf.tensor1d([3, 4]));\n * const b = tf.variable(tf.tensor1d([5, 6]));\n * const x = tf.tensor1d([1, 2]);\n *\n * // f(a, b) = a * x ^ 2 + b * x\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\n * // df/da = x ^ 2, df/db = x\n * const {value, grads} = tf.variableGrads(f);\n *\n * Object.keys(grads).forEach(varName => grads[varName].print());\n * ```\n *\n * @param f The function to execute. f() should return a scalar.\n * @param varList The list of variables to compute the gradients with respect\n *     to. Defaults to all trainable variables.\n * @returns An object with the following keys and values:\n *   - `value`: The value of the function `f`.\n *   - `grads`: A map from the names of the variables to the gradients.\n *     If the `varList` argument is provided explicitly and contains a subset of\n *     non-trainable variables, this map in the return value will contain keys\n *     that map the names of the non-trainable variables to `null`.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction variableGrads(f, varList) {\n    util.assert(util.isFunction(f), () => 'The f passed in variableGrads(f) must be a function');\n    util.assert(varList == null ||\n        Array.isArray(varList) && varList.every(v => v instanceof Variable), () => 'The varList passed in variableGrads(f, varList) must be an array ' +\n        'of variables');\n    const specifiedVarList = varList != null;\n    if (!specifiedVarList) {\n        // Get all of the trainable variables.\n        varList = [];\n        for (const varName in ENGINE.registeredVariables) {\n            varList.push(ENGINE.registeredVariables[varName]);\n        }\n    }\n    const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null;\n    // Prune non-trainable variables.\n    const originalVarCount = varList.length;\n    varList = varList.filter(variable => variable.trainable);\n    util.assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` +\n        `be trainable, but none of the ${originalVarCount} variables is ` +\n        `trainable.`);\n    const allowNoGradients = true;\n    const { value, grads } = ENGINE.gradients(f, varList, null, allowNoGradients);\n    util.assert(grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' +\n        'the loss function y=f(x). Please make sure the operations that ' +\n        'use variables are inside the function f passed to minimize().');\n    util.assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` +\n        `returned a rank-${value.rank} tensor`);\n    const namedGrads = {};\n    varList.forEach((v, i) => {\n        if (grads[i] != null) {\n            namedGrads[v.name] = grads[i];\n        }\n    });\n    if (specifiedNonTrainable != null) {\n        // If varList is explicitly provided and contains non-trainable values,\n        // add them to the returned gradients with `null` values.\n        specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n    }\n    return { value, grads: namedGrads };\n}\n/**\n * Overrides the gradient computation of a function `f`.\n *\n * Takes a function\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\n * and returns another function `g(...inputs)` which takes the same inputs as\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\n * with respect to each input of `f` are computed using `f().gradFunc`.\n *\n * The `save` function passsed to `f` should be used for saving tensors needed\n * in the gradient. And the `saved` passed to the `gradFunc` is a\n * `NamedTensorMap`, which contains those saved tensor.\n *\n * ```js\n * const customOp = tf.customGrad((x, save) => {\n *   // Save x to make sure it's available later for the gradient.\n *   save([x]);\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n *   return {\n *     value: x.square(),\n *     // Note `saved.x` which points to the `x` we saved earlier.\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\n *   };\n * });\n *\n * const x = tf.tensor1d([-1, -2, 3]);\n * const dx = tf.grad(x => customOp(x));\n *\n * console.log(`f(x):`);\n * customOp(x).print();\n * console.log(`f'(x):`);\n * dx(x).print();\n * ```\n *\n * @param f The function to evaluate in forward mode, which should return\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\n *     returns the custom gradients of `f` with respect to its inputs.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction customGrad(f) {\n    return ENGINE.customGrad(f);\n}\nfunction checkGrads(grads) {\n    const numNullGradients = grads.filter(g => g == null).length;\n    if (numNullGradients > 0) {\n        throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n    }\n}\nexport { customGrad, variableGrads, valueAndGrad, valueAndGrads, grad, grads, };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { add } from './add';\nimport { expandShapeToKeepDim } from './axis_util';\nimport { exp } from './exp';\nimport { log } from './log';\nimport { max } from './max';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { sub } from './sub';\nimport { sum } from './sum';\n/**\n * Computes the log(sum(exp(elements across the reduction dimensions)).\n *\n * Reduces the input along the dimensions given in `axis`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.logSumExp().print();  // or tf.logSumExp(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n * ```\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. If null (the default),\n *     reduces all dimensions.\n * @param keepDims If true, retains reduced dimensions with length\n *     of 1. Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction logSumExp_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'logSumExp');\n    const axes = parseAxisParam(axis, $x.shape);\n    const xMax = max($x, axes, true /* keepDims */);\n    const a = sub($x, xMax);\n    const b = exp(a);\n    const c = sum(b, axes);\n    const d = log(c);\n    const res = add(reshape(xMax, d.shape), d);\n    if (keepDims) {\n        const newShape = expandShapeToKeepDim(res.shape, axes);\n        return reshape(res, newShape);\n    }\n    return res;\n}\nexport const logSumExp = op({ logSumExp_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { customGrad } from '../../gradients';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { add } from '../add';\nimport { expandShapeToKeepDim } from '../axis_util';\nimport { cast } from '../cast';\nimport { div } from '../div';\nimport { exp } from '../exp';\nimport { logSumExp } from '../log_sum_exp';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes softmax cross entropy between logits and labels.\n *\n * Measures the probability error in discrete classification tasks in which\n * the classes are mutually exclusive (each entry is in exactly one class).\n * For example, each CIFAR-10 image is labeled with one and only one label: an\n * image can be a dog or a truck, but not both.\n *\n * `NOTE`: While the classes are mutually exclusive, their probabilities need\n * not be. All that is required is that each row of labels is a valid\n * probability distribution. If they are not, the computation of the gradient\n * will be incorrect.\n *\n * `WARNING`: This op expects unscaled logits, since it performs a softmax on\n * logits internally for efficiency. Do not call this op with the output of\n * softmax, as it will produce incorrect results.\n *\n * logits and labels must have the same shape, e.g. [batch_size, num_classes]\n * and the same dtype.\n * @param labels The labels array.\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\nfunction softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {\n    if (dim === -1) {\n        dim = logits.rank - 1;\n    }\n    if (dim !== logits.rank - 1) {\n        throw Error(`Softmax cross entropy along a non-last dimension is not yet ` +\n            `supported. Labels / logits was rank ${logits.rank} ` +\n            `and dim was ${dim}`);\n    }\n    // Use a custom gradient for numerical stability.\n    const customOp = customGrad((labels, logits, save) => {\n        // Reference:\n        //   1. http://cs231n.github.io/linear-classify/#softmax\n        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/\n        const keepDims = true;\n        const lse = logSumExp(logits, [dim], keepDims);\n        const logResult = sub(cast(logits, 'float32'), lse);\n        save([labels, logResult]);\n        const costVector = neg(mul(logResult, labels));\n        const value = sum(costVector, [dim]);\n        const gradFunc = (dy, saved) => {\n            const [labels, logResult] = saved;\n            const dyShape = expandShapeToKeepDim(dy.shape, [dim]);\n            return [\n                mul(reshape(dy, dyShape), sub(cast(labels, 'float32'), exp(logResult))),\n                mul(reshape(dy, dyShape), sub(exp(logResult), cast(labels, 'float32'))),\n            ];\n        };\n        return { value, gradFunc };\n    });\n    return customOp(labels, logits);\n}\n/**\n * Computes the softmax cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\n *                         + labelSmoothing / numClasses\n *\n * @param onehotLabels One hot encoded labels\n *    [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or 1, and must be\n *    broadcastable to `loss`  of shape [batch_size]\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    let $onehotLabels = convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');\n    const $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');\n    }\n    assertShapesMatch($onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');\n    if (labelSmoothing > 0) {\n        const labelSmoothingScalar = scalar(labelSmoothing);\n        const one = scalar(1);\n        const numClasses = scalar($onehotLabels.shape[1]);\n        $onehotLabels =\n            add(mul($onehotLabels, sub(one, labelSmoothingScalar)), div(labelSmoothingScalar, numClasses));\n    }\n    const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const softmaxCrossEntropy = op({ softmaxCrossEntropy_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { SparseFillEmptyRows } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * The input SparseTensor is represented via the map of inputs {`indices`,\n * `values`, `denseShape`}. The output SparseTensor has the same `denseShape`\n * but with indices `outputIndices` and values `outputValues`. This op inserts a\n * single entry for every row that doesn't have any values. The index is created\n * as `[row, 0, ..., 0]` and the inserted value is `defaultValue`.\n *\n * For example, suppose `spInput` has shape [5, 6] and non-empty values:\n * [0, 1]: a\n * [0, 3]: b\n * [2, 0]: c\n * [3, 1]: d\n *\n * Rows 1 and 4 are empty, so the output will be of shape [5, 6] with values:\n * [0, 1]: a\n * [0, 3]: b\n * [1, 0]: `defaultValue`\n * [2, 0]: c\n * [3, 1]: d\n * [4, 0]: `defaultValue`\n *\n * The output SparseTensor will be in row-major order and will have the same\n * shape as the input.\n *\n * This op also returns an indicator vector shaped [dense_shape[0]] such that\n * emptyRowIndicator[i] = True iff row i was an empty row.\n *\n * And a reverse index map vector shaped [indices.shape[0]] that is used during\n * backpropagation, reverseIndexMap[i] = outi s.t. indices[i, j] ==\n * outputIndices[outi, j] for all j\n *\n * ```js\n * const result = tf.sparse.sparseFillEmptyRows(\n *   [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]],\n *   [0, 10, 13, 14, 32, 33], [5, 6], -1);\n * console.log(result);\n * result['outputIndices'].print(); // [[0, 0], [1, 0], [1, 3], [1, 4],\n *                                  //  [2, 0], [3, 2], [3, 3], [4, 0]]\n * result['outputValues'].print(); // [0, 10, 13, 14,-1, 32, 33, -1]\n * result['emptyRowIndicator'].print(); // [false, false, true, false, true]\n * result['reverseIndexMap'].print(); // [0, 1, 2, 3, 5, 6]\n * ```\n * @param indices: 2-D. the indices of the sparse tensor.\n * @param values: 1-D. the values of the sparse tensor.\n * @param denseShape: 1-D. the shape of the sparse tensor.\n * @param defaultValue: 0-D. default value to insert into location [row, 0, ...,\n *     0] for rows missing from the input sparse tensor.\n * @return A map with the following properties:\n *     - outputIndices\n *     - outputValues: 1-D. the values of the filled sparse tensor.\n *     - emptyRowIndicator: 1-D. whether the dense row was missing in the input\n * sparse tensor.\n *     - reverseIndexMap: 1-D. a map from the input indices to the output\n * indices.\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseFillEmptyRows_(indices, values, denseShape, defaultValue) {\n    const $indices = convertToTensor(indices, 'indices', 'sparseFillEmptyRows', 'int32');\n    const $values = convertToTensor(values, 'values', 'sparseFillEmptyRows');\n    const $denseShape = convertToTensor(denseShape, 'denseShape', 'sparseFillEmptyRows', 'int32');\n    const $defaultValue = convertToTensor(defaultValue, 'defaultValue', 'sparseFillEmptyRows', $values.dtype);\n    if ($indices.rank !== 2) {\n        throw new Error(`Indices should be Tensor2D but received shape\n        ${$indices.shape}`);\n    }\n    if ($values.rank !== 1) {\n        throw new Error(`Values should be Tensor1D but received shape ${$values.shape}`);\n    }\n    if ($denseShape.rank !== 1) {\n        throw new Error(`Dense shape should be Tensor1D but received shape ${$denseShape.shape}`);\n    }\n    if ($defaultValue.rank !== 0) {\n        throw new Error(`Default value should be a scalar but received shape ${$defaultValue.shape}`);\n    }\n    const inputs = {\n        indices: $indices,\n        values: $values,\n        denseShape: $denseShape,\n        defaultValue: $defaultValue\n    };\n    const result = ENGINE.runKernel(SparseFillEmptyRows, inputs);\n    return {\n        outputIndices: result[0],\n        outputValues: result[1],\n        emptyRowIndicator: result[2],\n        reverseIndexMap: result[3]\n    };\n}\nexport const sparseFillEmptyRows = op({ sparseFillEmptyRows_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { SparseReshape } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * This operation has the same semantics as reshape on the represented dense\n * tensor. The `inputIndices` are recomputed based on the requested `newShape`.\n * If one component of `newShape` is the special value -1, the size of that\n * dimension is computed so that the total dense size remains constant. At most\n * one component of `newShape` can be -1. The number of dense elements implied\n * by `newShape` must be the same as the number of dense elements originally\n * implied by `inputShape`. Reshaping does not affect the order of values in the\n * SparseTensor. If the input tensor has rank R_in and N non-empty values, and\n * `newShape` has length R_out, then `inputIndices` has shape [N, R_in],\n * `inputShape` has length R_in, `outputIndices` has shape [N, R_out], and\n * `outputShape` has length R_out.\n *\n * ```js\n * const result = tf.sparse.sparseReshape(\n *   [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 2, 3]],\n *   [2, 3, 6], [9, -1]);\n * console.log(result);\n * result['outputIndices'].print(); //[[0, 0], [0, 1], [1, 2], [4, 2], [8, 1]]\n * result['outputShape'].print(); // [9, 4]\n * ```\n * @param inputIndices: 2-D. N x R_in matrix with the indices of non-empty\n * values in a SparseTensor.\n * @param inputShape: 1-D. R_in Tensor1D with the input SparseTensor's dense\n * shape.\n * @param newShape: 1-D. R_out Tensor1D with the requested new dense shape.\n * @return A map with the following properties:\n *     - outputIndices: 2-D. N x R_out matrix with the updated indices of\n *       non-empty values in the output SparseTensor.\n *     - outputShape: 1-D. R_out vector with the full dense shape of the output\n *       SparseTensor. This is the same as newShape but with any -1 dimensions\n *        filled in.\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseReshape_(inputIndices, inputShape, newShape) {\n    const $inputIndices = convertToTensor(inputIndices, 'inputIndices', 'sparseReshape', 'int32');\n    const $inputShape = convertToTensor(inputShape, 'inputShape', 'sparseReshape', 'int32');\n    const $newShape = convertToTensor(newShape, 'newShape', 'sparseReshape', 'int32');\n    if ($inputIndices.rank !== 2) {\n        throw new Error(`Input indices should be Tensor2D but received shape\n        ${$inputIndices.shape}`);\n    }\n    if ($inputShape.rank !== 1) {\n        throw new Error(`Input shape should be Tensor1D but received shape ${$inputShape.shape}`);\n    }\n    if ($newShape.rank !== 1) {\n        throw new Error(`New shape should be Tensor1D but received shape ${$newShape.shape}`);\n    }\n    const inputs = {\n        inputIndices: $inputIndices,\n        inputShape: $inputShape,\n        newShape: $newShape\n    };\n    const result = ENGINE.runKernel(SparseReshape, inputs);\n    return { outputIndices: result[0], outputShape: result[1] };\n}\nexport const sparseReshape = op({ sparseReshape_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { SparseSegmentMean } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Computes the mean along sparse segments of a tensor.\n *\n * ```js\n * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [6,7,8,9]]);\n * // Select two rows, one segment.\n * const result1 = tf.sparse.sparseSegmentMean(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 0], 'int32'));\n * result1.print(); // [[0, 0, 0, 0]]\n *\n * // Select two rows, two segments.\n * const result2 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1], 'int32'),\n *                                             tf.tensor1d([0, 1], 'int32'));\n * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]\n *\n * // Select all rows, two segments.\n * const result3 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1, 2], 'int32'),\n *                                             tf.tensor1d([0, 1, 1], 'int32'));\n * result3.print(); // [[1.0, 2.0, 3.0, 4.0], [2.5, 2.5, 2.5, 2.5]]\n * ```\n * @param data: A Tensor of at least one dimension with data that will be\n *     assembled in the output.\n * @param indices: A 1-D Tensor with indices into data. Has same rank as\n *     segmentIds.\n * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values\n *     should be sorted and can be repeated.\n * @return Has same shape as data, except for dimension 0 which has equal to\n *         the number of segments.\n *\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseSegmentMean_(data, indices, segmentIds) {\n    const $data = convertToTensor(data, 'data', 'sparseSegmentMean');\n    const $indices = convertToTensor(indices, 'indices', 'sparseSegmentMean', 'int32');\n    const $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentMean', 'int32');\n    if ($data.rank < 1) {\n        throw new Error(`Data should be at least 1 dimensional but received scalar`);\n    }\n    if ($indices.rank !== 1) {\n        throw new Error(`Indices should be Tensor1D but received shape\n          ${$indices.shape}`);\n    }\n    if ($segmentIds.rank !== 1) {\n        throw new Error(`Segment ids should be Tensor1D but received shape\n          ${$segmentIds.shape}`);\n    }\n    const inputs = {\n        data: $data,\n        indices: $indices,\n        segmentIds: $segmentIds\n    };\n    return ENGINE.runKernel(SparseSegmentMean, inputs);\n}\nexport const sparseSegmentMean = op({ sparseSegmentMean_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { SparseSegmentSum } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Computes the sum along sparse segments of a tensor.\n *\n * ```js\n * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]]);\n * // Select two rows, one segment.\n * const result1 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 0], 'int32'));\n * result1.print(); // [[0, 0, 0, 0]]\n *\n * // Select two rows, two segment.\n * const result2 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 1], 'int32'));\n * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]\n *\n * // Select all rows, two segments.\n * const result3 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1, 2], 'int32'),\n *                                           tf.tensor1d([0, 0, 1], 'int32'));\n * result3.print(); // [[0, 0, 0, 0], [5, 6, 7, 8]]\n * ```\n * @param data: A Tensor of at least one dimension with data that will be\n *     assembled in the output.\n * @param indices: A 1-D Tensor with indices into data. Has same rank as\n *     segmentIds.\n * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values\n *     should be sorted and can be repeated.\n * @return Has same shape as data, except for dimension 0 which has equal to\n *         the number of segments.\n *\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseSegmentSum_(data, indices, segmentIds) {\n    const $data = convertToTensor(data, 'data', 'sparseSegmentSum');\n    const $indices = convertToTensor(indices, 'indices', 'sparseSegmentSum', 'int32');\n    const $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentSum', 'int32');\n    if ($data.rank < 1) {\n        throw new Error(`Data should be at least 1 dimensional but received scalar`);\n    }\n    if ($indices.rank !== 1) {\n        throw new Error(`Indices should be Tensor1D but received shape\n         ${$indices.shape}`);\n    }\n    if ($segmentIds.rank !== 1) {\n        throw new Error(`Segment ids should be Tensor1D but received shape\n         ${$segmentIds.shape}`);\n    }\n    const inputs = {\n        data: $data,\n        indices: $indices,\n        segmentIds: $segmentIds\n    };\n    return ENGINE.runKernel(SparseSegmentSum, inputs);\n}\nexport const sparseSegmentSum = op({ sparseSegmentSum_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { StringNGrams } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Creates ngrams from ragged string data.\n *\n * This op accepts a ragged tensor with 1 ragged dimension containing only\n * strings and outputs a ragged tensor with 1 ragged dimension containing ngrams\n * of that string, joined along the innermost axis.\n *\n * ```js\n * const result = tf.string.stringNGrams(\n *   ['a', 'b', 'c', 'd'], tf.tensor1d([0, 2, 4], 'int32'),\n *   '|', [1, 2], 'LP', 'RP', -1, false);\n * result['nGrams'].print(); // ['a', 'b', 'LP|a', 'a|b', 'b|RP',\n *                           //  'c', 'd', 'LP|c', 'c|d', 'd|RP']\n * result['nGramsSplits'].print(); // [0, 5, 10]\n * ```\n * @param data: The values tensor of the ragged string tensor to make ngrams out\n *     of. Must be a 1D string tensor.\n * @param dataSplits: The splits tensor of the ragged string tensor to make\n *     ngrams out of.\n * @param separator: The string to append between elements of the token. Use \"\"\n *     for no separator.\n * @param nGramWidths: The sizes of the ngrams to create.\n * @param leftPad: The string to use to pad the left side of the ngram sequence.\n *     Only used if pad_width !== 0.\n * @param rightPad: The string to use to pad the right side of the ngram\n *     sequence. Only used if pad_width !== 0.\n * @param padWidth: The number of padding elements to add to each side of each\n *     sequence. Note that padding will never be greater than `nGramWidths`-1\n *     regardless of this value. If `padWidth`=-1 , then add max(`nGramWidths)-1\n *     elements.\n * @param preserveShortSequences: If true, then ensure that at least one ngram\n *     is generated for each input sequence. In particular, if an input sequence\n *     is shorter than min(ngramWidth) + 2*padWidth, then generate a single\n *     ngram containing the entire sequence. If false, then no ngrams are\n *     generated for these short input sequences.\n * @return A map with the following properties:\n *     - nGrams: The values tensor of the output ngrams ragged tensor.\n *     - nGramsSplits: The splits tensor of the output ngrams ragged tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringNGrams_(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    const $data = convertToTensor(data, 'data', 'stringNGrams', 'string');\n    if ($data.dtype !== 'string') {\n        throw new Error('Data must be of datatype string');\n    }\n    if ($data.shape.length !== 1) {\n        throw new Error(`Data must be a vector, saw: ${$data.shape}`);\n    }\n    const $dataSplits = convertToTensor(dataSplits, 'dataSplits', 'stringNGrams');\n    if ($dataSplits.dtype !== 'int32') {\n        throw new Error('Data splits must be of datatype int32');\n    }\n    const attrs = {\n        separator,\n        nGramWidths,\n        leftPad,\n        rightPad,\n        padWidth,\n        preserveShortSequences\n    };\n    const inputs = { data: $data, dataSplits: $dataSplits };\n    const result = ENGINE.runKernel(StringNGrams, inputs, attrs);\n    return { nGrams: result[0], nGramsSplits: result[1] };\n}\nexport const stringNGrams = op({ stringNGrams_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { StringSplit } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Split elements of `input` based on `delimiter` into a SparseTensor .\n *\n * Let N be the size of source (typically N will be the batch size). Split each\n * element of `input` based on `delimiter` and return a SparseTensor containing\n * the splitted tokens. Empty tokens are ignored if `skipEmpty` is set to True.\n *\n * `delimiter` can be empty, or a string of split characters. If `delimiter` is\n * an empty string, each element of `input` is split into individual\n * character strings. Otherwise every character of `delimiter` is a potential\n * split point.\n *\n * ```js\n * const result = tf.string.stringSplit(['hello world',  'a b c'], ' ');\n * result['indices'].print(); // [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]]\n * result['values'].print(); // ['hello', 'world', 'a', 'b', 'c']\n * result['shape'].print(); // [2, 3]\n * ```\n * @param input: 1-D. Strings to split.\n * @param delimiter: 0-D. Delimiter characters, or empty string.\n * @param skipEmpty: Optional. If true, skip the empty strings from the result.\n *     Defaults to true.\n * @return A map with the following properties:\n *     - indices: A dense matrix of int32 representing the indices of the sparse\n *       tensor.\n *     - values: A vector of strings corresponding to the splited values.\n *     - shape: a length-2 vector of int32 representing the shape of the sparse\n * tensor, where the first value is N and the second value is the maximum number\n * of tokens in a single input entry.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringSplit_(input, delimiter, skipEmpty = true) {\n    const $input = convertToTensor(input, 'input', 'stringSplit', 'string');\n    const $delimiter = convertToTensor(delimiter, 'delimiter', 'stringSplit', 'string');\n    if ($input.rank !== 1) {\n        throw new Error(`Input should be Tensor1D but received shape ${$input.shape}`);\n    }\n    if ($delimiter.rank !== 0) {\n        throw new Error(`Delimiter should be a scalar but received shape ${$delimiter.shape}`);\n    }\n    const attrs = { skipEmpty };\n    const inputs = { input: $input, delimiter: $delimiter };\n    const result = ENGINE.runKernel(StringSplit, inputs, attrs);\n    return { indices: result[0], values: result[1], shape: result[2] };\n}\nexport const stringSplit = op({ stringSplit_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { StringToHashBucketFast } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Converts each string in the input Tensor to its hash mod by a number of\n * buckets.\n *\n * The hash function is deterministic on the content of the string within the\n * process and will never change. However, it is not suitable for cryptography.\n * This function may be used when CPU time is scarce and inputs are trusted or\n * unimportant. There is a risk of adversaries constructing inputs that all hash\n * to the same bucket.\n *\n * ```js\n * const result = tf.string.stringToHashBucketFast(\n *   ['Hello', 'TensorFlow', '2.x'], 3);\n * result.print(); // [0, 2, 2]\n * ```\n * @param input: The strings to assign a hash bucket.\n * @param numBuckets: The number of buckets.\n * @return A Tensor of the same shape as the input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringToHashBucketFast_(input, numBuckets) {\n    const $input = convertToTensor(input, 'input', 'stringToHashBucketFast', 'string');\n    const attrs = { numBuckets };\n    if (numBuckets <= 0) {\n        throw new Error(`Number of buckets must be at least 1`);\n    }\n    const inputs = { input: $input };\n    return ENGINE.runKernel(StringToHashBucketFast, inputs, attrs);\n}\nexport const stringToHashBucketFast = op({ stringToHashBucketFast_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Modularized ops.\nexport { abs } from './abs';\nexport { acos } from './acos';\nexport { acosh } from './acosh';\nexport { add } from './add';\nexport { addN } from './add_n';\nexport { all } from './all';\nexport { any } from './any';\nexport { argMax } from './arg_max';\nexport { argMin } from './arg_min';\nexport { asin } from './asin';\nexport { asinh } from './asinh';\nexport { atan } from './atan';\nexport { atan2 } from './atan2';\nexport { atanh } from './atanh';\nexport { avgPool } from './avg_pool';\nexport { avgPool3d } from './avg_pool_3d';\nexport { basicLSTMCell } from './basic_lstm_cell';\nexport { batchToSpaceND } from './batch_to_space_nd';\nexport { batchNorm } from './batchnorm';\nexport { batchNorm2d } from './batchnorm2d';\nexport { batchNorm3d } from './batchnorm3d';\nexport { batchNorm4d } from './batchnorm4d';\nexport { bincount } from './bincount';\nexport { broadcastArgs } from './broadcast_args';\nexport { broadcastTo } from './broadcast_to';\nexport { buffer } from './buffer';\nexport { cast } from './cast';\nexport { ceil } from './ceil';\nexport { clipByValue } from './clip_by_value';\nexport { clone } from './clone';\nexport { complex } from './complex';\nexport { concat } from './concat';\nexport { concat1d } from './concat_1d';\nexport { concat2d } from './concat_2d';\nexport { concat3d } from './concat_3d';\nexport { concat4d } from './concat_4d';\nexport { conv1d } from './conv1d';\nexport { conv2d } from './conv2d';\nexport { conv2dTranspose } from './conv2d_transpose';\nexport { conv3d } from './conv3d';\nexport { conv3dTranspose } from './conv3d_transpose';\nexport { cos } from './cos';\nexport { cosh } from './cosh';\nexport { cumsum } from './cumsum';\nexport { denseBincount } from './dense_bincount';\nexport { depthToSpace } from './depth_to_space';\nexport { depthwiseConv2d } from './depthwise_conv2d';\nexport { diag } from './diag';\nexport { dilation2d } from './dilation2d';\nexport { div } from './div';\nexport { divNoNan } from './div_no_nan';\nexport { dot } from './dot';\nexport { einsum } from './einsum';\nexport { elu } from './elu';\nexport { equal } from './equal';\nexport { erf } from './erf';\nexport { exp } from './exp';\nexport { expandDims } from './expand_dims';\nexport { expm1 } from './expm1';\nexport { eye } from './eye';\nexport { fill } from './fill';\nexport { floor } from './floor';\nexport { floorDiv } from './floorDiv';\nexport { gather } from './gather';\nexport { greater } from './greater';\nexport { greaterEqual } from './greater_equal';\nexport { imag } from './imag';\nexport { isFinite } from './is_finite';\nexport { isInf } from './is_inf';\nexport { isNaN } from './is_nan';\nexport { leakyRelu } from './leaky_relu';\nexport { less } from './less';\nexport { lessEqual } from './less_equal';\nexport { linspace } from './linspace';\nexport { localResponseNormalization } from './local_response_normalization';\nexport { log } from './log';\nexport { log1p } from './log1p';\nexport { logSigmoid } from './log_sigmoid';\nexport { logSoftmax } from './log_softmax';\nexport { logSumExp } from './log_sum_exp';\nexport { logicalAnd } from './logical_and';\nexport { logicalNot } from './logical_not';\nexport { logicalOr } from './logical_or';\nexport { logicalXor } from './logical_xor';\nexport { matMul } from './mat_mul';\nexport { max } from './max';\nexport { maxPool } from './max_pool';\nexport { maxPool3d } from './max_pool_3d';\nexport { maxPoolWithArgmax } from './max_pool_with_argmax';\nexport { maximum } from './maximum';\nexport { mean } from './mean';\nexport { meshgrid } from './meshgrid';\nexport { min } from './min';\nexport { minimum } from './minimum';\nexport { mirrorPad } from './mirror_pad';\nexport { mod } from './mod';\nexport { moments } from './moments';\nexport { mul } from './mul';\nexport { multiRNNCell } from './multi_rnn_cell';\nexport { multinomial } from './multinomial';\nexport { neg } from './neg';\nexport { notEqual } from './not_equal';\nexport { oneHot } from './one_hot';\nexport { ones } from './ones';\nexport { onesLike } from './ones_like';\nexport { outerProduct } from './outer_product';\nexport { pad } from './pad';\nexport { pad1d } from './pad1d';\nexport { pad2d } from './pad2d';\nexport { pad3d } from './pad3d';\nexport { pad4d } from './pad4d';\nexport { pool } from './pool';\nexport { pow } from './pow';\nexport { prelu } from './prelu';\nexport { print } from './print';\nexport { prod } from './prod';\nexport { rand } from './rand';\nexport { randomGamma } from './random_gamma';\nexport { randomNormal } from './random_normal';\nexport { randomUniform } from './random_uniform';\nexport { range } from './range';\nexport { real } from './real';\nexport { reciprocal } from './reciprocal';\nexport { relu } from './relu';\nexport { relu6 } from './relu6';\nexport { reshape } from './reshape';\nexport { reverse } from './reverse';\nexport { reverse1d } from './reverse_1d';\nexport { reverse2d } from './reverse_2d';\nexport { reverse3d } from './reverse_3d';\nexport { reverse4d } from './reverse_4d';\nexport { round } from './round';\nexport { rsqrt } from './rsqrt';\nexport { scalar } from './scalar';\nexport { selu } from './selu';\nexport { separableConv2d } from './separable_conv2d';\nexport { setdiff1dAsync } from './setdiff1d_async';\nexport { sigmoid } from './sigmoid';\nexport { sign } from './sign';\nexport { sin } from './sin';\nexport { sinh } from './sinh';\nexport { slice } from './slice';\nexport { slice1d } from './slice1d';\nexport { slice2d } from './slice2d';\nexport { slice3d } from './slice3d';\nexport { slice4d } from './slice4d';\nexport { softmax } from './softmax';\nexport { softplus } from './softplus';\nexport { spaceToBatchND } from './space_to_batch_nd';\nexport { fft } from './spectral/fft';\nexport { ifft } from './spectral/ifft';\nexport { irfft } from './spectral/irfft';\nexport { rfft } from './spectral/rfft';\nexport { split } from './split';\nexport { sqrt } from './sqrt';\nexport { square } from './square';\nexport { squaredDifference } from './squared_difference';\nexport { squeeze } from './squeeze';\nexport { stack } from './stack';\nexport { step } from './step';\nexport { stridedSlice } from './strided_slice';\nexport { sub } from './sub';\nexport { sum } from './sum';\nexport { tan } from './tan';\nexport { tanh } from './tanh';\nexport { tensor } from './tensor';\nexport { tensor1d } from './tensor1d';\nexport { tensor2d } from './tensor2d';\nexport { tensor3d } from './tensor3d';\nexport { tensor4d } from './tensor4d';\nexport { tensor5d } from './tensor5d';\nexport { tensor6d } from './tensor6d';\nexport { tile } from './tile';\nexport { topk } from './topk';\nexport { truncatedNormal } from './truncated_normal';\nexport { unique } from './unique';\nexport { unsortedSegmentSum } from './unsorted_segment_sum';\nexport { unstack } from './unstack';\nexport { variable } from './variable';\nexport { where } from './where';\nexport { whereAsync } from './where_async';\nexport { zeros } from './zeros';\nexport { zerosLike } from './zeros_like';\nexport * from './boolean_mask';\nexport * from './transpose';\nexport * from './norm';\nexport * from './moving_average';\nexport * from './scatter_nd';\nexport * from './sparse_to_dense';\nexport * from './gather_nd';\nexport * from './dropout';\nexport * from './signal_ops_util';\nexport * from './in_top_k';\nexport { op, OP_SCOPE_SUFFIX } from './operation';\nimport { rfft } from './spectral/rfft';\nimport { fft } from './spectral/fft';\nimport { ifft } from './spectral/ifft';\nimport { irfft } from './spectral/irfft';\nconst spectral = {\n    fft,\n    ifft,\n    rfft,\n    irfft\n};\nimport * as fused from './fused_ops';\nimport { hammingWindow } from './signal/hamming_window';\nimport { hannWindow } from './signal/hann_window';\nimport { frame } from './signal/frame';\nimport { stft } from './signal/stft';\nconst signal = {\n    hammingWindow,\n    hannWindow,\n    frame,\n    stft,\n};\n// Image Ops namespace\nimport { cropAndResize } from './image/crop_and_resize';\nimport { flipLeftRight } from './image/flip_left_right';\nimport { grayscaleToRGB } from './image/grayscale_to_rgb';\nimport { rotateWithOffset } from './image/rotate_with_offset';\nimport { nonMaxSuppression } from './image/non_max_suppression';\nimport { nonMaxSuppressionAsync } from './image/non_max_suppression_async';\nimport { nonMaxSuppressionWithScore } from './image/non_max_suppression_with_score';\nimport { nonMaxSuppressionWithScoreAsync } from './image/non_max_suppression_with_score_async';\nimport { nonMaxSuppressionPadded } from './image/non_max_suppression_padded';\nimport { nonMaxSuppressionPaddedAsync } from './image/non_max_suppression_padded_async';\nimport { resizeBilinear } from './image/resize_bilinear';\nimport { resizeNearestNeighbor } from './image/resize_nearest_neighbor';\nimport { threshold } from './image/threshold';\nimport { transform } from './image/transform';\nconst image = {\n    flipLeftRight,\n    grayscaleToRGB,\n    resizeNearestNeighbor,\n    resizeBilinear,\n    rotateWithOffset,\n    cropAndResize,\n    nonMaxSuppression,\n    nonMaxSuppressionAsync,\n    nonMaxSuppressionWithScore,\n    nonMaxSuppressionWithScoreAsync,\n    nonMaxSuppressionPadded,\n    nonMaxSuppressionPaddedAsync,\n    threshold,\n    transform\n};\n// linalg namespace\nimport { bandPart } from './linalg/band_part';\nimport { gramSchmidt } from './linalg/gram_schmidt';\nimport { qr } from './linalg/qr';\nconst linalg = {\n    bandPart,\n    gramSchmidt,\n    qr\n};\n// losses namespace;\nimport { absoluteDifference } from './losses/absolute_difference';\nimport { computeWeightedLoss } from './losses/compute_weighted_loss';\nimport { cosineDistance } from './losses/cosine_distance';\nimport { hingeLoss } from './losses/hinge_loss';\nimport { huberLoss } from './losses/huber_loss';\nimport { logLoss } from './losses/log_loss';\nimport { meanSquaredError } from './losses/mean_squared_error';\nimport { sigmoidCrossEntropy } from './losses/sigmoid_cross_entropy';\nimport { softmaxCrossEntropy } from './losses/softmax_cross_entropy';\nconst losses = {\n    absoluteDifference,\n    computeWeightedLoss,\n    cosineDistance,\n    hingeLoss,\n    huberLoss,\n    logLoss,\n    meanSquaredError,\n    sigmoidCrossEntropy,\n    softmaxCrossEntropy\n};\nimport { sparseFillEmptyRows } from './sparse/sparse_fill_empty_rows';\nimport { sparseReshape } from './sparse/sparse_reshape';\nimport { sparseSegmentMean } from './sparse/sparse_segment_mean';\nimport { sparseSegmentSum } from './sparse/sparse_segment_sum';\nconst sparse = {\n    sparseFillEmptyRows,\n    sparseReshape,\n    sparseSegmentMean,\n    sparseSegmentSum\n};\nimport { stringNGrams } from './string/string_n_grams';\nimport { stringSplit } from './string/string_split';\nimport { stringToHashBucketFast } from './string/string_to_hash_bucket_fast';\n// tslint:disable-next-line:variable-name\nconst string = {\n    stringNGrams,\n    stringSplit,\n    stringToHashBucketFast\n};\n// Second level exports.\nexport { image, linalg, losses, spectral, fused, signal, sparse, string };\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nexport function assertParamsConsistent(shapes, axis) {\n    const rank = shapes[0].length;\n    shapes.forEach((shape, i) => {\n        util.assert(shape.length === rank, () => `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +\n            `as the rank of the rest (${rank})`);\n    });\n    util.assert(axis >= 0 && axis < rank, () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);\n    const firstShape = shapes[0];\n    shapes.forEach((shape, i) => {\n        for (let r = 0; r < rank; r++) {\n            util.assert((r === axis) || (shape[r] === firstShape[r]), () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +\n                `does not match the shape of the rest (${firstShape}) ` +\n                `along the non-concatenated axis ${i}.`);\n        }\n    });\n}\nexport function computeOutShape(shapes, axis) {\n    const outputShape = shapes[0].slice();\n    for (let i = 1; i < shapes.length; i++) {\n        outputShape[axis] += shapes[i][axis];\n    }\n    return outputShape;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n *\n * @param inputShape Input tensor shape is of the following dimensions:\n *     `[batch, height, width, inChannels]`.\n * @param filterShape The filter shape is of the following dimensions:\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat The data format of the input and output data.\n *     Defaults to 'NHWC'.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.\n *     Defaults to `[1, 1]`. If `dilations` is a single number, then\n *     `dilationHeight == dilationWidth`.\n */\nexport function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = 'NHWC', dilations) {\n    // `computerConv2DInfo` require filterShape to be in the dimension of:\n    // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have\n    // outDepth, it should have the same depth as the input.\n    // Input shape: [batch, height, width, inChannels]\n    const inputChannels = inputShape[3];\n    const $filterShape = [...filterShape, inputChannels];\n    const $dataFormat = convertConv2DDataFormat(dataFormat);\n    return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null /* roundingMode */, null /* depthWise */, $dataFormat);\n}\nexport function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'channelsLast') {\n    const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n    let filterShape;\n    if (dataFormat === 'channelsLast') {\n        filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n    }\n    else if (dataFormat === 'channelsFirst') {\n        filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);\n}\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\nexport function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'NDHWC') {\n    const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n    let filterShape;\n    let $dataFormat;\n    if (dataFormat === 'NDHWC') {\n        $dataFormat = 'channelsLast';\n        filterShape =\n            [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n    }\n    else if (dataFormat === 'NCDHW') {\n        $dataFormat = 'channelsFirst';\n        filterShape =\n            [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);\n}\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\nexport function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = 'channelsLast') {\n    let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n    if (dataFormat === 'channelsLast') {\n        [batchSize, inHeight, inWidth, inChannels] = inShape;\n    }\n    else if (dataFormat === 'channelsFirst') {\n        [batchSize, inChannels, inHeight, inWidth] = inShape;\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    const [filterHeight, filterWidth, , filterChannels] = filterShape;\n    const [strideHeight, strideWidth] = parseTupleParam(strides);\n    const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n    const { padInfo, outHeight, outWidth } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);\n    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n    let outShape;\n    if (dataFormat === 'channelsFirst') {\n        outShape = [batchSize, outChannels, outHeight, outWidth];\n    }\n    else if (dataFormat === 'channelsLast') {\n        outShape = [batchSize, outHeight, outWidth, outChannels];\n    }\n    return {\n        batchSize,\n        dataFormat,\n        inHeight,\n        inWidth,\n        inChannels,\n        outHeight,\n        outWidth,\n        outChannels,\n        padInfo,\n        strideHeight,\n        strideWidth,\n        filterHeight,\n        filterWidth,\n        effectiveFilterHeight,\n        effectiveFilterWidth,\n        dilationHeight,\n        dilationWidth,\n        inShape,\n        outShape,\n        filterShape\n    };\n}\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\nexport function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = 'channelsLast', roundingMode) {\n    let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];\n    if (dataFormat === 'channelsLast') {\n        [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n    }\n    else if (dataFormat === 'channelsFirst') {\n        [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    const [filterDepth, filterHeight, filterWidth, , filterChannels] = filterShape;\n    const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n    const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);\n    const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);\n    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n    const { padInfo, outDepth, outHeight, outWidth } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);\n    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n    let outShape;\n    if (dataFormat === 'channelsFirst') {\n        outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n    }\n    else if (dataFormat === 'channelsLast') {\n        outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n    }\n    return {\n        batchSize,\n        dataFormat,\n        inDepth,\n        inHeight,\n        inWidth,\n        inChannels,\n        outDepth,\n        outHeight,\n        outWidth,\n        outChannels,\n        padInfo,\n        strideDepth,\n        strideHeight,\n        strideWidth,\n        filterDepth,\n        filterHeight,\n        filterWidth,\n        effectiveFilterDepth,\n        effectiveFilterHeight,\n        effectiveFilterWidth,\n        dilationDepth,\n        dilationHeight,\n        dilationWidth,\n        inShape,\n        outShape,\n        filterShape\n    };\n}\nfunction computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {\n    if (zeroPad == null) {\n        zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n    }\n    const inputRows = inShape[0];\n    const inputCols = inShape[1];\n    const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    return [outputRows, outputCols];\n}\nfunction computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {\n    if (zeroPad == null) {\n        zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n    }\n    const inputDepth = inShape[0];\n    const inputRows = inShape[1];\n    const inputCols = inShape[2];\n    const outputDepths = round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    return [outputDepths, outputRows, outputCols, outChannels];\n}\nexport function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {\n    const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\nfunction parseTupleParam(param) {\n    if (typeof param === 'number') {\n        return [param, param, param];\n    }\n    if (param.length === 2) {\n        return [param[0], param[1], 1];\n    }\n    return param;\n}\nfunction parse3TupleParam(param) {\n    return typeof param === 'number' ? [param, param, param] : param;\n}\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\nfunction getEffectiveFilterSize(filterSize, dilation) {\n    if (dilation <= 1) {\n        return filterSize;\n    }\n    return filterSize + (filterSize - 1) * (dilation - 1);\n}\nfunction getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {\n    let padInfo;\n    let outHeight;\n    let outWidth;\n    if (typeof pad === 'number') {\n        const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n        padInfo = { top: pad, bottom: pad, left: pad, right: pad, type: padType };\n        const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n        outHeight = outShape[0];\n        outWidth = outShape[1];\n    }\n    else if (pad === 'same') {\n        outHeight = Math.ceil(inHeight / strideHeight);\n        outWidth = Math.ceil(inWidth / strideWidth);\n        const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n        const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n        const top = Math.floor(padAlongHeight / 2);\n        const bottom = padAlongHeight - top;\n        const left = Math.floor(padAlongWidth / 2);\n        const right = padAlongWidth - left;\n        padInfo = { top, bottom, left, right, type: 'SAME' };\n    }\n    else if (pad === 'valid') {\n        padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' };\n        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n    }\n    else if (typeof pad === 'object') {\n        const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];\n        const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];\n        const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];\n        const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];\n        const padType = (top === 0 && bottom === 0 && left === 0 && right === 0) ?\n            'VALID' :\n            'EXPLICIT';\n        padInfo = { top, bottom, left, right, type: padType };\n        outHeight = round((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);\n        outWidth = round((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n    }\n    else {\n        throw Error(`Unknown padding parameter: ${pad}`);\n    }\n    return { padInfo, outHeight, outWidth };\n}\nfunction get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {\n    let padInfo;\n    let outDepth;\n    let outHeight;\n    let outWidth;\n    if (typeof pad === 'number') {\n        const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n        padInfo = {\n            top: pad,\n            bottom: pad,\n            left: pad,\n            right: pad,\n            front: pad,\n            back: pad,\n            type: padType\n        };\n        const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);\n        outDepth = outShape[0];\n        outHeight = outShape[1];\n        outWidth = outShape[2];\n    }\n    else if (pad === 'same') {\n        outDepth = Math.ceil(inDepth / strideDepth);\n        outHeight = Math.ceil(inHeight / strideHeight);\n        outWidth = Math.ceil(inWidth / strideWidth);\n        const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n        const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\n        const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n        const front = Math.floor(padAlongDepth / 2);\n        const back = padAlongDepth - front;\n        const top = Math.floor(padAlongHeight / 2);\n        const bottom = padAlongHeight - top;\n        const left = Math.floor(padAlongWidth / 2);\n        const right = padAlongWidth - left;\n        padInfo = { top, bottom, left, right, front, back, type: 'SAME' };\n    }\n    else if (pad === 'valid') {\n        padInfo = {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            front: 0,\n            back: 0,\n            type: 'VALID'\n        };\n        outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n    }\n    else {\n        throw Error(`Unknown padding parameter: ${pad}`);\n    }\n    return { padInfo, outDepth, outHeight, outWidth };\n}\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction round(value, roundingMode) {\n    if (!roundingMode) {\n        return Math.trunc(value);\n    }\n    switch (roundingMode) {\n        case 'round':\n            // used for Caffe Conv\n            return Math.round(value);\n        case 'ceil':\n            // used for Caffe Pool\n            return Math.ceil(value);\n        case 'floor':\n            return Math.floor(value);\n        default:\n            throw new Error(`Unknown roundingMode ${roundingMode}`);\n    }\n}\nexport function tupleValuesAreOne(param) {\n    const [dimA, dimB, dimC] = parseTupleParam(param);\n    return dimA === 1 && dimB === 1 && dimC === 1;\n}\nexport function eitherStridesOrDilationsAreOne(strides, dilations) {\n    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\nexport function convertConv2DDataFormat(dataFormat) {\n    if (dataFormat === 'NHWC') {\n        return 'channelsLast';\n    }\n    else if (dataFormat === 'NCHW') {\n        return 'channelsFirst';\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n}\n/**\n * Check validity of pad when using dimRoundingMode.\n * @param opDesc A string of op description\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @throws unknown padding parameter\n */\nexport function checkPadOnDimRoundingMode(opDesc, pad, dimRoundingMode) {\n    if (dimRoundingMode != null) {\n        if (typeof pad === 'string') {\n            throw Error(`Error in ${opDesc}: pad must be an integer when using ` +\n                `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n        }\n        else if (typeof pad === 'number') {\n            util.assert(util.isInt(pad), () => `Error in ${opDesc}: pad must be an integer when using ` +\n                `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n        }\n        else if (typeof pad === 'object') {\n            pad.forEach(p => {\n                p.forEach(v => {\n                    util.assert(util.isInt(v), () => `Error in ${opDesc}: pad must be an integer when using ` +\n                        `dimRoundingMode ${dimRoundingMode} but got pad ${v}.`);\n                });\n            });\n        }\n        else {\n            throw Error(`Error in ${opDesc}: Unknown padding parameter: ${pad}`);\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Elu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes exponential linear element-wise: `x > 0 ? x : (e ^ x) - 1`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 1, -3, 2]);\n *\n * x.elu().print();  // or tf.elu(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction elu_(x) {\n    const $x = convertToTensor(x, 'x', 'elu', 'float32');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Elu, inputs);\n}\nexport const elu = op({ elu_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LeakyRelu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes leaky rectified linear element-wise.\n *\n * See\n * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\n *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\n * ```\n * @param x The input tensor.\n * @param alpha The scaling factor for negative values, defaults to 0.2.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction leakyRelu_(x, alpha = 0.2) {\n    const $x = convertToTensor(x, 'x', 'leakyRelu');\n    const inputs = { x: $x };\n    const attrs = { alpha };\n    return ENGINE.runKernel(LeakyRelu, inputs, attrs);\n}\nexport const leakyRelu = op({ leakyRelu_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Prelu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes leaky rectified linear element-wise with parametric alphas.\n *\n * `x < 0 ? alpha * x : f(x) = x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n * const alpha = tf.scalar(0.1);\n *\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\n * ```\n * @param x The input tensor.\n * @param alpha Scaling factor for negative values.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction prelu_(x, alpha) {\n    const $x = convertToTensor(x, 'x', 'prelu');\n    const $alpha = convertToTensor(alpha, 'alpha', 'prelu');\n    const inputs = { x: $x, alpha: $alpha };\n    return ENGINE.runKernel(Prelu, inputs);\n}\nexport const prelu = op({ prelu_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Relu6 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 8]);\n *\n * x.relu6().print();  // or tf.relu6(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32'.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction relu6_(x) {\n    const $x = convertToTensor(x, 'x', 'relu6');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Relu6, inputs);\n}\nexport const relu6 = op({ relu6_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sigmoid } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes sigmoid element-wise, `1 / (1 + exp(-x))`\n *\n * ```js\n * const x = tf.tensor1d([0, -1, 2, -3]);\n *\n * x.sigmoid().print();  // or tf.sigmoid(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sigmoid_(x) {\n    const $x = convertToTensor(x, 'x', 'sigmoid', 'float32');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Sigmoid, inputs);\n}\nexport const sigmoid = op({ sigmoid_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Step } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`\n *\n * ```js\n * const x = tf.tensor1d([0, 2, -1, -3]);\n *\n * x.step(.5).print();  // or tf.step(x, .5)\n * ```\n * @param x The input tensor.\n * @param alpha The gradient when input is negative.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction step_(x, alpha = 0.0) {\n    const $x = convertToTensor(x, 'x', 'step');\n    const inputs = { x: $x };\n    const attrs = { alpha };\n    return ENGINE.runKernel(Step, inputs, attrs);\n}\nexport const step = op({ step_ });\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as broadcast_util from './broadcast_util';\nimport { elu } from './elu';\nimport { leakyRelu } from './leaky_relu';\nimport { mul } from './mul';\nimport { prelu } from './prelu';\nimport { relu } from './relu';\nimport { relu6 } from './relu6';\nimport { reshape } from './reshape';\nimport { sigmoid } from './sigmoid';\nimport { step } from './step';\nimport { sum } from './sum';\n// Returns gradient for fused activation.\nexport function getFusedDyActivation(dy, y, activation) {\n    if (activation == null || activation === 'linear') {\n        return dy;\n    }\n    if (activation === 'relu') {\n        return mul(dy, step(y));\n    }\n    throw new Error(`Cannot compute gradient for fused activation ${activation}.`);\n}\n// Returns gradient for fused bias.\nexport function getFusedBiasGradient(bias, dyActivation) {\n    let res = dyActivation;\n    const reduceAxes = broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n    if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n    }\n    return reshape(res, bias.shape);\n}\nexport function applyActivation(x, activation, preluActivationWeights, leakyreluAlpha) {\n    if (activation === 'linear') {\n        return x;\n    }\n    else if (activation === 'relu') {\n        return relu(x);\n    }\n    else if (activation === 'elu') {\n        return elu(x);\n    }\n    else if (activation === 'relu6') {\n        return relu6(x);\n    }\n    else if (activation === 'prelu') {\n        return prelu(x, preluActivationWeights);\n    }\n    else if (activation === 'leakyrelu') {\n        return leakyRelu(x, leakyreluAlpha);\n    }\n    else if (activation === 'sigmoid') {\n        return sigmoid(x);\n    }\n    throw new Error(`Unknown fused activation ${activation}.`);\n}\n// Whether we should call fused ops.\nexport const shouldFuse = (gradientDepth, activation) => {\n    const gradientMode = gradientDepth > 0;\n    return !gradientMode || activation === 'linear';\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Inputs of size above this threshold will be parallelized by calling multiple\n * shader programs.\n */\nimport { nearestDivisor } from '../util';\nexport const PARALLELIZE_THRESHOLD = 30;\nexport function computeOptimalWindowSize(inSize) {\n    if (inSize <= PARALLELIZE_THRESHOLD) {\n        return inSize;\n    }\n    return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Returns the image center in pixels.\nexport function getImageCenter(center, imageHeight, imageWidth) {\n    const centerX = imageWidth * (typeof center === 'number' ? center : center[0]);\n    const centerY = imageHeight * (typeof center === 'number' ? center : center[1]);\n    return [centerX, centerY];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Gets the new shape of the input Tensor after it's been reshaped\n * to:\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\n * inputShape[1], ..., inputShape[N-1]]\n *\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {\n    let reshaped = [];\n    if (batchToSpace) {\n        reshaped = reshaped.concat(blockShape.slice(0));\n        reshaped.push(inputShape[0] / prod);\n        reshaped = reshaped.concat(inputShape.slice(1));\n    }\n    else {\n        reshaped = reshaped.concat(inputShape[0]);\n        const spatialLength = blockShape.length;\n        for (let i = 0; i < spatialLength; ++i) {\n            reshaped =\n                reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n        }\n        reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n    }\n    return reshaped;\n}\n/**\n * Gets the permutation that will transpose the dimensions of the\n * reshaped tensor to shape:\n *\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {\n    const permuted = [];\n    if (batchToSpace) {\n        permuted.push(blockShapeRank);\n        for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n            if (i <= 2 * blockShapeRank) {\n                permuted.push(i);\n                permuted.push(i - (blockShapeRank + 1));\n            }\n            else {\n                permuted.push(i);\n            }\n        }\n    }\n    else {\n        const permutedBeforeBatch = [];\n        const permutedAfterBatch = [];\n        for (let i = 1; i < reshapedRank; ++i) {\n            if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n                permutedAfterBatch.push(i);\n            }\n            else {\n                permutedBeforeBatch.push(i);\n            }\n        }\n        permuted.push(...permutedBeforeBatch);\n        permuted.push(0);\n        permuted.push(...permutedAfterBatch);\n    }\n    return permuted;\n}\n/**\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\n * is applied.  The new shape will be:\n *\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {\n    const reshapedPermuted = [];\n    if (batchToSpace) {\n        reshapedPermuted.push(inputShape[0] / prod);\n    }\n    else {\n        reshapedPermuted.push(inputShape[0] * prod);\n    }\n    for (let i = 1; i < inputShape.length; ++i) {\n        if (i <= blockShape.length) {\n            if (batchToSpace) {\n                reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n            }\n            else {\n                reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n            }\n        }\n        else {\n            reshapedPermuted.push(inputShape[i]);\n        }\n    }\n    return reshapedPermuted;\n}\n/**\n * Converts the crops argument into the beginning coordinates of a slice\n * operation.\n */\nexport function getSliceBeginCoords(crops, blockShape) {\n    const sliceBeginCoords = [0];\n    for (let i = 0; i < blockShape; ++i) {\n        sliceBeginCoords.push(crops[i][0]);\n    }\n    return sliceBeginCoords;\n}\n/**\n * Converts the crops argument into the size of a slice operation.  When\n * combined with getSliceBeginCoords this function allows the reshaped and\n * permuted Tensor to be cropped to its final output shape of:\n *\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getSliceSize(uncroppedShape, crops, blockShape) {\n    const sliceSize = uncroppedShape.slice(0, 1);\n    for (let i = 0; i < blockShape; ++i) {\n        sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n    }\n    return sliceSize;\n}\n","import { computeStrides, sizeFromShape } from '../util';\n/**\n * Validate gather nd inputs.\n *\n * @param tensor The tensor contains the source values.\n * @param indices The tensor contains the indices to slice the source.\n *\n * @returns [resultShape, numUpdates, sliceSize, strides]\n */\nexport function prepareAndValidate(tensor, indices) {\n    const tensorRank = tensor.shape.length;\n    const indicesRank = indices.shape.length;\n    if (tensorRank < 1) {\n        throw new Error('tf.gatherND() expects the input to be rank 1 or higher,' +\n            ` but the rank was ${tensorRank}.`);\n    }\n    if (indicesRank < 1) {\n        throw new Error('tf.gatherND() expects the indices to be rank 1 or higher,' +\n            ` but the rank was ${indicesRank}.`);\n    }\n    if (indices.dtype !== 'int32') {\n        throw new Error('tf.gatherND() expects the indices to be int32 type,' +\n            ` but the dtype was ${indices.dtype}.`);\n    }\n    if (indices.shape[indicesRank - 1] > tensorRank) {\n        throw new Error('index innermost dimension length must be <= tensor rank; saw: ' +\n            `${indices.shape[indicesRank - 1]} vs. ${tensorRank}`);\n    }\n    if (sizeFromShape(tensor.shape) === 0) {\n        throw new Error('Requested more than 0 entries, but input is empty.' +\n            ` Input shape: ${tensor.shape}.`);\n    }\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    // The result shape is\n    //   indices.shape[:-1] + params.shape[indices.shape[-1]:]\n    let nResult = 1;\n    for (let i = 0; i < indicesShape.length - 1; ++i) {\n        nResult *= indicesShape[i];\n    }\n    const inputShape = tensor.shape;\n    const resultShape = indicesShape.slice();\n    resultShape.pop();\n    let sliceSize = 1;\n    for (let i = sliceRank; i < tensorRank; ++i) {\n        sliceSize *= inputShape[i];\n        resultShape.push(inputShape[i]);\n    }\n    const strides = [...computeStrides(tensor.shape).map(stride => stride / sliceSize),\n        1].slice(0, sliceRank);\n    return [resultShape, nResult, sliceSize, strides];\n}\n","import { computeStrides, sizeFromShape } from '../util';\n/**\n * Check whether updates.shape = indices.shape[:batchDim] +\n * shape[sliceDim:]\n *\n * @param x The input tensor.\n */\nexport function validateUpdateShape(shape, indices, updates) {\n    const sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;\n    const batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;\n    const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +\n        `shape[sliceDim:], got updates.shape: ${updates.shape}` +\n        `, indices.shape: ${indices.shape}, shape: ${shape}` +\n        `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;\n    if (updates.rank < batchDim) {\n        throw new Error(shapeError + ` update.rank < ${batchDim}. `);\n    }\n    if (shape.length < sliceDim + (updates.rank - batchDim)) {\n        throw new Error(shapeError +\n            ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);\n    }\n    if (updates.rank !== batchDim + shape.length - sliceDim) {\n        throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);\n    }\n    for (let d = 0; d < batchDim; ++d) {\n        if (updates.shape[d] !== indices.shape[d]) {\n            throw new Error(shapeError +\n                ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);\n        }\n    }\n    for (let d = 0; d < updates.rank - batchDim; ++d) {\n        if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {\n            throw new Error(shapeError +\n                ` updates.shape[${d + batchDim}] (${updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${shape[d + batchDim]})`);\n        }\n    }\n}\n/**\n * Validate scatter nd inputs.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n */\nexport function validateInput(updates, indices, shape) {\n    if (indices.rank < 1) {\n        throw new Error('tf.scatterND() expects the indices to be rank 1 or higher,' +\n            ` but the rank was ${indices.rank}.`);\n    }\n    if (updates.rank < 1) {\n        throw new Error('tf.scatterND() expects the updates to be rank 1 or higher,' +\n            ` but the rank was ${updates.rank}.`);\n    }\n    if (indices.dtype !== 'int32') {\n        throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);\n    }\n    if (shape.length < 1) {\n        throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);\n    }\n    if (shape.length === 0) {\n        if (indices.size === 0) {\n            throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);\n        }\n        if (updates.size === 0) {\n            throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);\n        }\n    }\n    validateUpdateShape(shape, indices, updates);\n}\n/**\n * Calculate the shape information for the output.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n *\n * @returns ScatterShapeInfo\n */\nexport function calculateShapes(updates, indices, shape) {\n    // Calculate the number of dimensions in indices\n    const indicesRank = indices.shape.length;\n    const sliceRank = (indicesRank > 1) ? indices.shape[indicesRank - 1] : 1;\n    // Calculate the number of elements that make up each slice of our updated\n    // tensor. This allows us to work with flattened tensors and copy over whole\n    // slices at a time.\n    const totalNd = shape.length;\n    let sliceSize = 1;\n    for (let i = sliceRank; i < totalNd; ++i) {\n        sliceSize *= shape[i];\n    }\n    const safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;\n    const numUpdates = sizeFromShape(indices.shape) / safeSliceDim;\n    const strides = [...computeStrides(shape.slice(0, sliceRank)), 1];\n    const outputSize = sizeFromShape(shape);\n    return { sliceRank, numUpdates, sliceSize, strides, outputSize };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const SELU_SCALEALPHA = 1.7580993408473768599402175208123;\nexport const SELU_SCALE = 1.0507009873554804934193349852946;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const ERF_P = 0.3275911;\nexport const ERF_A1 = 0.254829592;\nexport const ERF_A2 = -0.284496736;\nexport const ERF_A3 = 1.421413741;\nexport const ERF_A4 = -1.453152027;\nexport const ERF_A5 = 1.061405429;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Merges real and imaginary Float32Arrays into a single complex Float32Array.\n *\n * The memory layout is interleaved as follows:\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n * complex: [r0, i0, r1, i1, r2, i2]\n *\n * This is the inverse of splitRealAndImagArrays.\n *\n * @param real The real values of the complex tensor values.\n * @param imag The imag values of the complex tensor values.\n * @returns A complex tensor as a Float32Array with merged values.\n */\nexport function mergeRealAndImagArrays(real, imag) {\n    if (real.length !== imag.length) {\n        throw new Error(`Cannot merge real and imag arrays of different lengths. real:` +\n            `${real.length}, imag: ${imag.length}.`);\n    }\n    const result = new Float32Array(real.length * 2);\n    for (let i = 0; i < result.length; i += 2) {\n        result[i] = real[i / 2];\n        result[i + 1] = imag[i / 2];\n    }\n    return result;\n}\n/**\n * Splits a complex Float32Array into real and imag parts.\n *\n * The memory layout is interleaved as follows:\n * complex: [r0, i0, r1, i1, r2, i2]\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n *\n * This is the inverse of mergeRealAndImagArrays.\n *\n * @param complex The complex tensor values.\n * @returns An object with real and imag Float32Array components of the complex\n *     tensor.\n */\nexport function splitRealAndImagArrays(complex) {\n    const real = new Float32Array(complex.length / 2);\n    const imag = new Float32Array(complex.length / 2);\n    for (let i = 0; i < complex.length; i += 2) {\n        real[i / 2] = complex[i];\n        imag[i / 2] = complex[i + 1];\n    }\n    return { real, imag };\n}\n/**\n * Extracts even indexed complex values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithEvenIndex(complex) {\n    const len = Math.ceil(complex.length / 4);\n    const real = new Float32Array(len);\n    const imag = new Float32Array(len);\n    for (let i = 0; i < complex.length; i += 4) {\n        real[Math.floor(i / 4)] = complex[i];\n        imag[Math.floor(i / 4)] = complex[i + 1];\n    }\n    return { real, imag };\n}\n/**\n * Extracts odd indexed comple values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithOddIndex(complex) {\n    const len = Math.floor(complex.length / 4);\n    const real = new Float32Array(len);\n    const imag = new Float32Array(len);\n    for (let i = 2; i < complex.length; i += 4) {\n        real[Math.floor(i / 4)] = complex[i];\n        imag[Math.floor(i / 4)] = complex[i + 1];\n    }\n    return { real, imag };\n}\n/**\n * Get the map representing a complex value in the given array.\n * @param complex The complex tensor values.\n * @param index An index of the target complex value.\n */\nexport function getComplexWithIndex(complex, index) {\n    const real = complex[index * 2];\n    const imag = complex[index * 2 + 1];\n    return { real, imag };\n}\n/**\n * Insert a given complex value into the TypedArray.\n * @param data The array in which the complex value is inserted.\n * @param c The complex value to be inserted.\n * @param index An index of the target complex value.\n */\nexport function assignToTypedArray(data, real, imag, index) {\n    data[index * 2] = real;\n    data[index * 2 + 1] = imag;\n}\n/**\n * Make the list of exponent terms used by FFT.\n */\nexport function exponents(n, inverse) {\n    const real = new Float32Array(n / 2);\n    const imag = new Float32Array(n / 2);\n    for (let i = 0; i < Math.ceil(n / 2); i++) {\n        const x = (inverse ? 2 : -2) * Math.PI * (i / n);\n        real[i] = Math.cos(x);\n        imag[i] = Math.sin(x);\n    }\n    return { real, imag };\n}\n/**\n * Make the exponent term used by FFT.\n */\nexport function exponent(k, n, inverse) {\n    const x = (inverse ? 2 : -2) * Math.PI * (k / n);\n    const real = Math.cos(x);\n    const imag = Math.sin(x);\n    return { real, imag };\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util_base';\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation, numTensors) {\n    equation = equation.replace(/\\s/g, ''); // Remove witespace in equation.\n    const numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) /\n        ARROW.length;\n    if (numArrows < 1) {\n        throw new Error('Equations without an arrow are not supported.');\n    }\n    else if (numArrows > 1) {\n        throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n    }\n    const [inputString, outputString] = equation.split(ARROW);\n    assert(inputString.indexOf(ELLIPSIS) === -1, () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n    const inputTerms = inputString.split(COMMA);\n    const numInputs = inputTerms.length;\n    if (numTensors !== numInputs) {\n        throw new Error(`Expected ${numInputs} input tensors, received ${numTensors}`);\n    }\n    if (numInputs > 2) {\n        throw new Error('Support for more than 2 input tensors is not implemented yet.');\n    }\n    const allDims = [];\n    for (let i = 0; i < outputString.length; ++i) {\n        const dimName = outputString[i];\n        if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n            throw new Error(`Output subscripts contain the label ${dimName} ` +\n                `not present in the input subscripts.`);\n        }\n        if (allDims.indexOf(dimName) === -1) {\n            allDims.push(dimName);\n        }\n    }\n    for (let i = 0; i < inputString.length; ++i) {\n        const dimName = inputString[i];\n        if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n            allDims.push(dimName);\n        }\n    }\n    const idDims = new Array(inputTerms.length);\n    for (let i = 0; i < numInputs; ++i) {\n        if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n            throw new Error(`Found duplicate axes in input component ${inputTerms[i]}. ` +\n                `Support for duplicate axes in input is not implemented yet.`);\n        }\n        idDims[i] = [];\n        for (let j = 0; j < inputTerms[i].length; ++j) {\n            idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n        }\n    }\n    const numDims = allDims.length; // Number of unique dimensions.\n    const numOutDims = outputString.length; // Number of output dimensions.\n    const summedDims = []; // Dimensions being summed over.\n    for (let i = numOutDims; i < numDims; ++i) {\n        summedDims.push(i);\n    }\n    return { allDims, summedDims, idDims };\n}\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims, idDims) {\n    let permutationIndices = new Array(nDims);\n    permutationIndices.fill(-1);\n    for (let i = 0; i < idDims.length; ++i) {\n        permutationIndices[idDims[i]] = i;\n    }\n    const expandDims = [];\n    for (let i = 0; i < nDims; ++i) {\n        if (permutationIndices[i] === -1) {\n            expandDims.push(i);\n        }\n    }\n    permutationIndices = permutationIndices.filter(d => d !== -1);\n    return { permutationIndices, expandDims };\n}\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(nDims, idDims, tensors) {\n    const dimSizes = new Array(nDims);\n    for (let i = 0; i < tensors.length; ++i) {\n        const shape = tensors[i].shape;\n        for (let j = 0; j < idDims[i].length; ++j) {\n            if (dimSizes[idDims[i][j]] === undefined) {\n                dimSizes[idDims[i][j]] = shape[j];\n            }\n            else {\n                assert(dimSizes[idDims[i][j]] === shape[j], () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` +\n                    `of input shaped ${JSON.stringify(shape)}, ` +\n                    `but got dimension ${shape[j]}`);\n            }\n        }\n    }\n}\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims, idDims) {\n    const path = summedDims;\n    const steps = [];\n    let nSteps = 0;\n    if (summedDims.length === 0) {\n        // Einsum that involes no summing: e.g., transpose and outer product.\n        path.push(-1);\n    }\n    nSteps = summedDims.length + 1;\n    for (let i = 0; i < nSteps; ++i) {\n        steps.push([]);\n    }\n    const computedTermIndices = [];\n    for (let i = 0; i < path.length; ++i) {\n        const summedDim = path[i];\n        const termIndices = findTermsWithDim(idDims, summedDim);\n        for (const termIndex of termIndices) {\n            if (computedTermIndices.indexOf(termIndex) === -1) {\n                steps[i].push(termIndex);\n                computedTermIndices.push(termIndex);\n            }\n        }\n    }\n    return { path, steps };\n}\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm) {\n    return perm.every((dim, index) => dim === index);\n}\nfunction findTermsWithDim(idDims, dim) {\n    const termIndices = [];\n    for (let i = 0; i < idDims.length; ++i) {\n        if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n            termIndices.push(i);\n        }\n    }\n    return termIndices;\n}\n","import { assert } from '../util';\n/**\n * Prepare the split size array. When the input is a number, the axis is evenly\n * divided among the split size. When the input contains the negative value, the\n * rest of the axis is allocated toward that.\n */\nexport function prepareSplitSize(x, numOrSizeSplits, axis = 0) {\n    let splitSizes = [];\n    if (typeof (numOrSizeSplits) === 'number') {\n        assert(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');\n        splitSizes =\n            new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n    }\n    else {\n        const numOfNegs = numOrSizeSplits.reduce((count, value) => {\n            if (value === -1) {\n                count += 1;\n            }\n            return count;\n        }, 0);\n        assert(numOfNegs <= 1, () => 'There should be only one negative value in split array.');\n        const negIndex = numOrSizeSplits.indexOf(-1);\n        // Allow the number of split array to be -1, which indicates the rest\n        // of dimension is allocated to that split.\n        if (negIndex !== -1) {\n            const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\n            numOrSizeSplits[negIndex] = x.shape[axis] - total;\n        }\n        assert(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');\n        splitSizes = numOrSizeSplits;\n    }\n    return splitSizes;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Generates sparse fill empty rows indices, dense shape mismatch error message.\n *\n * @param indicesLength The first dimension of indices.\n */\nexport function getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesLength) {\n    return `Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${indicesLength}`;\n}\n/**\n * Generates sparse fill empty rows negative index error message.\n *\n * @param index The index with a negative value.\n * @param value The negative value.\n */\nexport function getSparseFillEmptyRowsNegativeIndexErrorMessage(index, value) {\n    return `indices(${index}, 0) is invalid: ${value} < 0`;\n}\n/**\n * Generates sparse fill empty rows out of range index error message.\n *\n * @param index The index with an out of range value.\n * @param value The out of range value.\n * @param limit The upper limit for indices.\n */\nexport function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(index, value, limit) {\n    return `indices(${index}, 0) is invalid: ${value} >= ${limit}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { sizeFromShape } from '../../util';\n/**\n * Generates sparse reshape multiple negative 1 output dimension error message.\n *\n * @param dim1 The first dimension with a negative 1 value.\n * @param dim2 The second dimension with a negative 1 value.\n */\nexport function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(dim1, dim2) {\n    return `only one output dimension may be -1, not both ${dim1} and ${dim2}`;\n}\n/**\n * Generates sparse reshape negative output dimension error message.\n *\n * @param dim The dimension with a negative value.\n * @param value The negative value.\n */\nexport function getSparseReshapeNegativeOutputDimErrorMessage(dim, value) {\n    return `size ${dim} must be non-negative, not ${value}`;\n}\n/**\n * Generates sparse reshape empty tensor zero output dimension error message.\n *\n */\nexport function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage() {\n    return 'reshape cannot infer the missing input size for an empty tensor ' +\n        'unless all specified input sizes are non-zero';\n}\n/**\n * Generates sparse reshape input output multiple mismatch error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\nexport function getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape) {\n    const inputSize = sizeFromShape(inputShape);\n    const outputSize = sizeFromShape(outputShape);\n    return `Input to reshape is a SparseTensor with ${inputSize}\n  dense values, but the requested shape requires a multiple of ${outputSize}. inputShape=${inputShape} outputShape= ${outputShape}`;\n}\n/**\n * Generates sparse reshape input output inequality error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\nexport function getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape) {\n    const inputSize = sizeFromShape(inputShape);\n    const outputSize = sizeFromShape(outputShape);\n    return `Input to reshape is a tensor with ${inputSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Generates sparse segment reduction negative segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNegativeSegmentIdsErrorMessage() {\n    return `segment ids must be >= 0`;\n}\n/**\n * Generates sparse segment reduction non increasing segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage() {\n    return `segment ids are not increasing`;\n}\n/**\n * Generates sparse segment reduction segment id out of range error message.\n *\n * @param segmentId The segment id index that is out of range.\n * @param outputRows Upper bound of valid segment id values.\n */\nexport function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(segmentId, outputRows) {\n    return `Segment id ${segmentId} out of range [0, ${outputRows}), possibly because segmentIds input is not sorted.`;\n}\n/**\n * Generates sparse segment reduction input indice out of range error message.\n *\n * @param index The index that holds the out of range value.\n * @param indexValue The value that is out of range.\n * @param inputRows Upper bound of valid index values.\n */\nexport function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(index, indexValue, inputRows) {\n    return `Bad: indices[${index}] == ${indexValue} out of range [0, ${inputRows})`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nearestDivisor } from '../util';\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n    let done = false;\n    let res;\n    if (inSize <= PARALLELIZE_THRESHOLD) {\n        res = inSize;\n        done = true;\n    }\n    else {\n        res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n    }\n    while (!done) {\n        if (res > numSegments || res === inSize) {\n            done = true;\n        }\n        else {\n            res = nearestDivisor(inSize, res + 1);\n        }\n    }\n    return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n    const outShape = [];\n    const rank = aShape.length;\n    for (let dim = 0; dim < rank; dim++) {\n        if (dim !== axis) {\n            outShape.push(aShape[dim]);\n        }\n        else {\n            outShape.push(numSegments);\n        }\n    }\n    return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis, batchDims) {\n    const indicesRank = indices.shape.length;\n    const xRank = x.shape.length;\n    if (batchDims !== 0) {\n        if (batchDims < -indicesRank || batchDims > indicesRank) {\n            throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);\n        }\n    }\n    if (batchDims < 0) {\n        batchDims += indicesRank;\n    }\n    if (batchDims > xRank) {\n        throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n    }\n    if (axis < batchDims) {\n        throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);\n    }\n    for (let i = 0; i < batchDims; ++i) {\n        if (x.shape[i] !== indices.shape[i]) {\n            throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);\n        }\n    }\n    const dimSize = x.shape[axis];\n    const outputShape = [];\n    let batchSize = 1;\n    let outerSize = 1;\n    let sliceSize = 1;\n    for (let i = 0; i < batchDims; ++i) {\n        outputShape.push(x.shape[i]);\n        batchSize *= x.shape[i];\n    }\n    for (let i = batchDims; i < axis; i++) {\n        outputShape.push(x.shape[i]);\n        outerSize *= x.shape[i];\n    }\n    for (let i = batchDims; i < indicesRank; i++) {\n        outputShape.push(indices.shape[i]);\n    }\n    for (let i = axis + 1; i < xRank; i++) {\n        outputShape.push(x.shape[i]);\n        sliceSize *= x.shape[i];\n    }\n    return { batchSize, sliceSize, outerSize, dimSize, outputShape };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { decodeString, encodeString } from '../util';\n// Utilities needed by backend consumers of tf-core.\nexport * from '../ops/axis_util';\nexport * from '../ops/broadcast_util';\nexport * from '../ops/concat_util';\nexport * from '../ops/conv_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/reduce_util';\nimport * as slice_util from '../ops/slice_util';\nexport { slice_util };\nexport { upcastType } from '../types';\nexport * from '../ops/rotate_util';\nexport * from '../ops/array_ops_util';\nexport * from '../ops/gather_nd_util';\nexport * from '../ops/scatter_nd_util';\nexport * from '../ops/selu_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/erf_util';\nexport * from '../log';\nexport * from '../backends/complex_util';\nexport * from '../backends/einsum_util';\nexport * from '../ops/split_util';\nexport * from '../ops/sparse/sparse_fill_empty_rows_util';\nexport * from '../ops/sparse/sparse_reshape_util';\nexport * from '../ops/sparse/sparse_segment_reduction_util';\nimport * as segment_util from '../ops/segment_util';\nexport { segment_util };\nexport function fromUint8ToStringArray(vals) {\n    try {\n        // Decode the bytes into string.\n        return vals.map(val => decodeString(val));\n    }\n    catch (err) {\n        throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${err}`);\n    }\n}\nexport function fromStringArrayToUint8(strings) {\n    return strings.map(s => encodeString(s));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the Where kernel shared between cpu and webgl */\nimport { buffer } from '../ops/buffer';\nexport function whereImpl(condShape, condVals) {\n    const indices = [];\n    for (let i = 0; i < condVals.length; i++) {\n        if (condVals[i]) {\n            indices.push(i);\n        }\n    }\n    const inBuffer = buffer(condShape, 'int32');\n    const out = buffer([indices.length, condShape.length], 'int32');\n    for (let i = 0; i < indices.length; i++) {\n        const loc = inBuffer.indexToLoc(indices[i]);\n        const offset = i * condShape.length;\n        out.values.set(loc, offset);\n    }\n    return out.toTensor();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport { nonMaxSuppressionV3Impl, nonMaxSuppressionV4Impl, nonMaxSuppressionV5Impl } from './non_max_suppression_impl';\nexport { whereImpl } from './where_impl';\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// base.ts is tfjs-core without auto registration of things like flags,\n// gradients, chained ops or the opHandler. See base_side_effects.ts for parts\n// tfjs core that are required side effects.\n/**\n * @fileoverview\n * @suppress {partialAlias} Optimization disabled due to passing the module\n * object into a function below:\n *\n *   import * as ops from './ops/ops';\n *   setOpHandler(ops);\n */\n// Serialization.\nimport * as io from './io/io';\nimport * as math from './math';\nimport * as broadcast_util from './ops/broadcast_util';\nimport * as browser from './ops/browser';\nimport * as gather_util from './ops/gather_nd_util';\nimport * as scatter_util from './ops/scatter_nd_util';\nimport * as slice_util from './ops/slice_util';\nimport * as serialization from './serialization';\nimport * as tensor_util from './tensor_util';\nimport * as test_util from './test_util';\nimport * as util from './util';\nimport { version } from './version';\nexport { AdadeltaOptimizer } from './optimizers/adadelta_optimizer';\nexport { AdagradOptimizer } from './optimizers/adagrad_optimizer';\nexport { AdamOptimizer } from './optimizers/adam_optimizer';\nexport { AdamaxOptimizer } from './optimizers/adamax_optimizer';\nexport { MomentumOptimizer } from './optimizers/momentum_optimizer';\nexport { Optimizer } from './optimizers/optimizer';\n// Optimizers.\nexport { OptimizerConstructors } from './optimizers/optimizer_constructors';\nexport { RMSPropOptimizer } from './optimizers/rmsprop_optimizer';\nexport { SGDOptimizer } from './optimizers/sgd_optimizer';\nexport { Tensor, TensorBuffer, Variable } from './tensor';\nexport { Rank, sumOutType, upcastType } from './types';\nexport * from './ops/ops';\nexport { Reduction } from './ops/loss_ops_utils';\nexport * from './train';\nexport * from './globals';\nexport * from './kernel_registry';\nexport { customGrad, grad, grads, valueAndGrad, valueAndGrads, variableGrads } from './gradients';\nexport { Environment, env, ENV } from './environment';\nexport { version as version_core };\n// Top-level method exports.\nexport { nextFrame } from './browser_util';\n// Second level exports.\nimport * as backend_util from './backends/backend_util';\nimport * as device_util from './device_util';\nexport { browser, io, math, serialization, test_util, util, backend_util, broadcast_util, tensor_util, slice_util, gather_util, scatter_util, device_util };\nimport * as kernel_impls from './backends/kernel_impls';\nexport { kernel_impls };\n// Backend specific.\nexport { KernelBackend, DataStorage } from './backends/backend';\n// Export all kernel names / info.\nexport * from './kernel_names';\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Required side effectful code.\nimport './base_side_effects';\n// All exports from this package should be in base.\nexport * from './base';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst contexts = {};\nconst WEBGL_ATTRIBUTES = {\n    alpha: false,\n    antialias: false,\n    premultipliedAlpha: false,\n    preserveDrawingBuffer: false,\n    depth: false,\n    stencil: false,\n    failIfMajorPerformanceCaveat: true\n};\nexport function clearWebGLContext(webGLVersion) {\n    delete contexts[webGLVersion];\n}\nexport function setWebGLContext(webGLVersion, gl) {\n    contexts[webGLVersion] = gl;\n}\nexport function getWebGLContext(webGLVersion, customCanvas) {\n    if (!(webGLVersion in contexts)) {\n        const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n        if (newCtx !== null) {\n            contexts[webGLVersion] = newCtx;\n        }\n        else {\n            console.log('Could not get context for WebGL version', webGLVersion);\n            return null;\n        }\n    }\n    const gl = contexts[webGLVersion];\n    if (gl == null || gl.isContextLost()) {\n        delete contexts[webGLVersion];\n        return getWebGLContext(webGLVersion);\n    }\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.STENCIL_TEST);\n    gl.disable(gl.BLEND);\n    gl.disable(gl.DITHER);\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    gl.disable(gl.SAMPLE_COVERAGE);\n    gl.enable(gl.SCISSOR_TEST);\n    gl.enable(gl.CULL_FACE);\n    gl.cullFace(gl.BACK);\n    return contexts[webGLVersion];\n}\nfunction createCanvas(webGLVersion) {\n    if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n        return new OffscreenCanvas(300, 150);\n    }\n    else if (typeof document !== 'undefined') {\n        return document.createElement('canvas');\n    }\n    else {\n        throw new Error('Cannot create a canvas in this context');\n    }\n}\nfunction getWebGLRenderingContext(webGLVersion, customCanvas) {\n    if (webGLVersion !== 1 && webGLVersion !== 2) {\n        throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n    }\n    const canvas = customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n    canvas.addEventListener('webglcontextlost', (ev) => {\n        ev.preventDefault();\n        delete contexts[webGLVersion];\n    }, false);\n    if (webGLVersion === 1) {\n        return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES));\n    }\n    return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nexport var PackingScheme;\n(function (PackingScheme) {\n    /**\n     * All values in a single texel are densely packed without any constraints.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 4]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   010|011   020|021\n     * -------   -------   -------\n     * 002|003   012|013   022|023\n     *\n     * 100|101   110|111   120|121\n     * -------   -------   -------\n     * 102|103   112|113   122|123\n     *\n     */\n    PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n    /**\n     * Single texels contain only values from the same batch, and from adjacent\n     * rows and columns.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 5]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     */\n    PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\nexport var TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n    TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n    TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n    TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\nexport var PhysicalTextureType;\n(function (PhysicalTextureType) {\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns, rows];\n}\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n    return matrixSize * channelsPerTexture;\n}\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns * 4, rows];\n}\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape) {\n    const size = util.sizeFromShape(shape);\n    const texelsNeeded = Math.ceil(size / 4);\n    return util.sizeToSquarishShape(texelsNeeded);\n}\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n    if (unpackedSize % channelsPerTexture !== 0) {\n        throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` +\n            `${channelsPerTexture}`);\n    }\n    return unpackedSize / channelsPerTexture;\n}\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n    const requiredSize = unpackedArray.length * channels / 4;\n    if (matrix.length < requiredSize) {\n        throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\n    }\n    let dst = 0;\n    for (let src = 0; src < unpackedArray.length; src += 4) {\n        for (let c = 0; c < channels; c++) {\n            matrix[dst++] = unpackedArray[src + c];\n        }\n    }\n}\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [\n        Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n    ];\n}\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n    const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return w * h * 4;\n}\nexport function getTextureConfig(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    let internalFormatFloat;\n    let internalFormatHalfFloat;\n    let internalFormatPackedHalfFloat;\n    let internalFormatPackedFloat;\n    let textureFormatFloat;\n    let downloadTextureFormat;\n    let downloadUnpackNumChannels;\n    let defaultNumChannels;\n    let textureTypeHalfFloat;\n    let textureTypeFloat;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        internalFormatFloat = glany.R32F;\n        internalFormatHalfFloat = glany.R16F;\n        internalFormatPackedHalfFloat = glany.RGBA16F;\n        internalFormatPackedFloat = glany.RGBA32F;\n        textureFormatFloat = glany.RED;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 1;\n        textureTypeHalfFloat = glany.HALF_FLOAT;\n        textureTypeFloat = glany.FLOAT;\n        downloadTextureFormat = glany.RGBA8;\n    }\n    else {\n        internalFormatFloat = gl.RGBA;\n        internalFormatHalfFloat = gl.RGBA;\n        internalFormatPackedHalfFloat = gl.RGBA;\n        internalFormatPackedFloat = glany.RGBA;\n        textureFormatFloat = gl.RGBA;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 4;\n        textureTypeHalfFloat = textureHalfFloatExtension != null ?\n            textureHalfFloatExtension.HALF_FLOAT_OES :\n            null;\n        textureTypeFloat = gl.FLOAT;\n        downloadTextureFormat = gl.RGBA;\n    }\n    return {\n        internalFormatFloat,\n        internalFormatHalfFloat,\n        internalFormatPackedHalfFloat,\n        internalFormatPackedFloat,\n        textureFormatFloat,\n        downloadTextureFormat,\n        downloadUnpackNumChannels,\n        defaultNumChannels,\n        textureTypeHalfFloat,\n        textureTypeFloat\n    };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { getTextureConfig } from './tex_util';\nexport function callAndCheck(gl, func) {\n    const returnValue = func();\n    if (env().getBool('DEBUG')) {\n        checkWebGLError(gl);\n    }\n    return returnValue;\n}\nfunction checkWebGLError(gl) {\n    const error = gl.getError();\n    if (error !== gl.NO_ERROR) {\n        throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n    }\n}\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\nexport function canBeRepresented(num) {\n    if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n        (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n        return true;\n    }\n    return false;\n}\nexport function getWebGLErrorMessage(gl, status) {\n    switch (status) {\n        case gl.NO_ERROR:\n            return 'NO_ERROR';\n        case gl.INVALID_ENUM:\n            return 'INVALID_ENUM';\n        case gl.INVALID_VALUE:\n            return 'INVALID_VALUE';\n        case gl.INVALID_OPERATION:\n            return 'INVALID_OPERATION';\n        case gl.INVALID_FRAMEBUFFER_OPERATION:\n            return 'INVALID_FRAMEBUFFER_OPERATION';\n        case gl.OUT_OF_MEMORY:\n            return 'OUT_OF_MEMORY';\n        case gl.CONTEXT_LOST_WEBGL:\n            return 'CONTEXT_LOST_WEBGL';\n        default:\n            return `Unknown error code ${status}`;\n    }\n}\nexport function getExtensionOrThrow(gl, extensionName) {\n    return throwIfNull(gl, () => gl.getExtension(extensionName), 'Extension \"' + extensionName + '\" not supported on this browser.');\n}\nexport function createVertexShader(gl, vertexShaderSource) {\n    const vertexShader = throwIfNull(gl, () => gl.createShader(gl.VERTEX_SHADER), 'Unable to create vertex WebGLShader.');\n    callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n    callAndCheck(gl, () => gl.compileShader(vertexShader));\n    if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n        console.log(gl.getShaderInfoLog(vertexShader));\n        throw new Error('Failed to compile vertex shader.');\n    }\n    return vertexShader;\n}\nexport function createFragmentShader(gl, fragmentShaderSource) {\n    const fragmentShader = throwIfNull(gl, () => gl.createShader(gl.FRAGMENT_SHADER), 'Unable to create fragment WebGLShader.');\n    callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n    callAndCheck(gl, () => gl.compileShader(fragmentShader));\n    if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n        logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n    }\n    return fragmentShader;\n}\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {\n    const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n    if (lineNumberRegexResult == null) {\n        console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n        console.log(shaderSource);\n        return;\n    }\n    const lineNumber = +lineNumberRegexResult[1];\n    const shaderLines = shaderSource.split('\\n');\n    const pad = shaderLines.length.toString().length + 2;\n    const linesWithLineNumbers = shaderLines.map((line, lineNumber) => util.rightPad((lineNumber + 1).toString(), pad) + line);\n    let maxLineLength = 0;\n    for (let i = 0; i < linesWithLineNumbers.length; i++) {\n        maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n    }\n    const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n    const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n    const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n    console.log(beforeErrorLines.join('\\n'));\n    console.log(shaderInfoLog.split('\\n')[0]);\n    console.log(`%c ${util.rightPad(errorLine[0], maxLineLength)}`, 'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n    console.log(afterErrorLines.join('\\n'));\n}\nexport function createProgram(gl) {\n    return throwIfNull(gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\nexport function linkProgram(gl, program) {\n    callAndCheck(gl, () => gl.linkProgram(program));\n    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Failed to link vertex and fragment shaders.');\n    }\n}\nexport function validateProgram(gl, program) {\n    callAndCheck(gl, () => gl.validateProgram(program));\n    if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Shader program validation failed.');\n    }\n}\nexport function createStaticVertexBuffer(gl, data) {\n    const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n    callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n    return buffer;\n}\nexport function createStaticIndexBuffer(gl, data) {\n    const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n    callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n    return buffer;\n}\nexport function getNumChannels() {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        return 1;\n    }\n    return 4;\n}\nexport function createTexture(gl) {\n    return throwIfNull(gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\nexport function validateTextureSize(width, height) {\n    const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n    if ((width <= 0) || (height <= 0)) {\n        const requested = `[${width}x${height}]`;\n        throw new Error('Requested texture size ' + requested + ' is invalid.');\n    }\n    if ((width > maxTextureSize) || (height > maxTextureSize)) {\n        const requested = `[${width}x${height}]`;\n        const max = `[${maxTextureSize}x${maxTextureSize}]`;\n        throw new Error('Requested texture size ' + requested +\n            ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n    }\n}\nexport function createFramebuffer(gl) {\n    return throwIfNull(gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\nexport function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {\n    const loc = gl.getAttribLocation(program, attribute);\n    if (loc === -1) {\n        // The GPU compiler decided to strip out this attribute because it's unused,\n        // thus no need to bind.\n        return false;\n    }\n    callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));\n    callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n    return true;\n}\nexport function bindTextureUnit(gl, texture, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n    callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\nexport function unbindTextureUnit(gl, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n    callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function getProgramUniformLocationOrThrow(gl, program, uniformName) {\n    return throwIfNull(gl, () => gl.getUniformLocation(program, uniformName), 'uniform \"' + uniformName + '\" not present in program.');\n}\nexport function getProgramUniformLocation(gl, program, uniformName) {\n    return gl.getUniformLocation(program, uniformName);\n}\nexport function bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {\n    callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n    callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\nexport function bindCanvasToFramebuffer(gl) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n    callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\nexport function bindColorTextureToFramebuffer(gl, texture, framebuffer) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n    callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\nexport function unbindColorTextureFromFramebuffer(gl, framebuffer) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n    callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\nexport function validateFramebuffer(gl) {\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n        throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n    }\n}\nexport function getFramebufferErrorMessage(gl, status) {\n    switch (status) {\n        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n            return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n        case gl.FRAMEBUFFER_UNSUPPORTED:\n            return 'FRAMEBUFFER_UNSUPPORTED';\n        default:\n            return `unknown error ${status}`;\n    }\n}\nfunction throwIfNull(gl, returnTOrNull, failureMessage) {\n    const tOrNull = callAndCheck(gl, () => returnTOrNull());\n    if (tOrNull == null) {\n        throw new Error(failureMessage);\n    }\n    return tOrNull;\n}\nfunction validateTextureUnit(gl, textureUnit) {\n    const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n    const glTextureUnit = textureUnit + gl.TEXTURE0;\n    if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n        const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n        throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n    }\n}\nexport function getBatchDim(shape, dimsToSkip = 2) {\n    return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\nexport function getRowsCols(shape) {\n    if (shape.length === 0) {\n        throw Error('Cannot get rows and columns of an empty shape array.');\n    }\n    return [\n        shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n    ];\n}\nexport function getShapeAs3D(shape) {\n    let shapeAs3D = [1, 1, 1];\n    const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n    if (!isScalar) {\n        shapeAs3D =\n            [getBatchDim(shape), ...getRowsCols(shape)];\n    }\n    return shapeAs3D;\n}\nexport function getTextureShapeFromLogicalShape(logShape, isPacked = false) {\n    let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n    if (isPacked) {\n        maxTexSize = maxTexSize * 2;\n        // This logic ensures we accurately count the number of packed texels needed\n        // to accommodate the tensor. We can only pack values in the same texel if\n        // they are from adjacent pairs of rows/cols within the same batch. So if a\n        // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n        // fact that the texels containing the third row are half empty.\n        logShape = logShape.map((d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n        // Packed texture height is at least 2 (the channel height of a single\n        // texel).\n        if (logShape.length === 1) {\n            logShape = [2, logShape[0]];\n        }\n    }\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n        const squeezeResult = util.squeezeShape(logShape);\n        logShape = squeezeResult.newShape;\n    }\n    let size = util.sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTexSize) {\n        return [1, size];\n    }\n    else if (logShape.length === 2 && logShape[0] <= maxTexSize &&\n        logShape[1] <= maxTexSize) {\n        return logShape;\n    }\n    else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n        logShape[2] <= maxTexSize) {\n        return [logShape[0] * logShape[1], logShape[2]];\n    }\n    else if (logShape.length === 3 && logShape[0] <= maxTexSize &&\n        logShape[1] * logShape[2] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2]];\n    }\n    else if (logShape.length === 4 &&\n        logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n        logShape[3] <= maxTexSize) {\n        return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    }\n    else if (logShape.length === 4 && logShape[0] <= maxTexSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    }\n    else {\n        if (isPacked) {\n            // For packed textures size equals the number of channels required to\n            // accommodate the texture data. However in order to squarify such that\n            // inner dimensions stay even, we rewrite size to equal the number of\n            // texels. Then in the return statement we rehydrate the squarified\n            // dimensions to channel units.\n            const batchDim = getBatchDim(logShape);\n            let rows = 2, cols = 2;\n            if (logShape.length) {\n                [rows, cols] = getRowsCols(logShape);\n            }\n            size = batchDim * (rows / 2) * (cols / 2);\n            return util.sizeToSquarishShape(size).map(d => d * 2);\n        }\n        return util.sizeToSquarishShape(size);\n    }\n}\nfunction isEven(n) {\n    return n % 2 === 0;\n}\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1, shape2) {\n    shape1 = shape1.slice(-2);\n    shape2 = shape2.slice(-2);\n    if (util.arraysEqual(shape1, shape2)) {\n        return true;\n    }\n    if (!shape1.length || !shape2.length) { // One of the shapes is a scalar.\n        return true;\n    }\n    if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n        shape2[1] === 0) {\n        return true;\n    }\n    if (shape1.length !== shape2.length) { // One of the shapes is a vector.\n        const shape1Cols = shape1.slice(-1)[0];\n        const shape2Cols = shape2.slice(-1)[0];\n        if (shape1Cols === shape2Cols) {\n            return true;\n        }\n        if (isEven(shape1Cols) && isEven(shape2Cols) &&\n            (shape1[0] === 1 || shape2[0] === 1)) {\n            return true;\n        }\n    }\n    return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE;\nlet MAX_TEXTURES_IN_SHADER;\nexport function getWebGLMaxTextureSize(webGLVersion) {\n    if (MAX_TEXTURE_SIZE == null) {\n        const gl = getWebGLContext(webGLVersion);\n        MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n    return MAX_TEXTURE_SIZE;\n}\nexport function resetMaxTextureSize() {\n    MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n    MAX_TEXTURES_IN_SHADER = null;\n}\nexport function getMaxTexturesInShader(webGLVersion) {\n    if (MAX_TEXTURES_IN_SHADER == null) {\n        const gl = getWebGLContext(webGLVersion);\n        MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    }\n    // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n    return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion) {\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    let queryTimerVersion;\n    const gl = getWebGLContext(webGLVersion);\n    if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n        webGLVersion === 2) {\n        queryTimerVersion = 2;\n    }\n    else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n        queryTimerVersion = 1;\n    }\n    else {\n        queryTimerVersion = 0;\n    }\n    return queryTimerVersion;\n}\nexport function hasExtension(gl, extensionName) {\n    const ext = gl.getExtension(extensionName);\n    return ext != null;\n}\nexport function isWebGLVersionEnabled(webGLVersion) {\n    try {\n        const gl = getWebGLContext(webGLVersion);\n        if (gl != null) {\n            return true;\n        }\n    }\n    catch (e) {\n        console.log('Error when getting WebGL context: ', e);\n        return false;\n    }\n    return false;\n}\nexport function isCapableOfRenderingToFloatTexture(webGLVersion) {\n    if (webGLVersion === 0) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    if (webGLVersion === 1) {\n        if (!hasExtension(gl, 'OES_texture_float')) {\n            return false;\n        }\n    }\n    else {\n        if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n            return false;\n        }\n    }\n    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n    return isFrameBufferComplete;\n}\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion) {\n    if (webGLVersion === 0) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    if (webGLVersion === 1) {\n        if (!hasExtension(gl, 'OES_texture_float')) {\n            return false;\n        }\n        if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n            return false;\n        }\n    }\n    else {\n        if (hasExtension(gl, 'EXT_color_buffer_float')) {\n            return createFloatTextureAndBindToFramebuffer(gl);\n        }\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n            const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);\n        }\n        return false;\n    }\n    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n    return isFrameBufferComplete;\n}\nfunction createFloatTextureAndBindToFramebuffer(gl) {\n    const texConfig = getTextureConfig(gl);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const width = 1;\n    const height = 1;\n    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isFrameBufferComplete;\n}\nfunction createHalfFloatTextureAndBindToFramebuffer(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const width = 1;\n    const height = 1;\n    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isFrameBufferComplete;\n}\nexport function isWebGLFenceEnabled(webGLVersion) {\n    if (webGLVersion !== 2) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    // tslint:disable-next-line:no-any\n    const isEnabled = gl.fenceSync != null;\n    return isEnabled;\n}\nexport function assertNotComplex(tensor, opName) {\n    if (!Array.isArray(tensor)) {\n        tensor = [tensor];\n    }\n    tensor.forEach(t => {\n        if (t != null) {\n            util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors ` +\n                'in the WebGL backend.');\n        }\n    });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nconst ENV = env();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n    if (isWebGLVersionEnabled(2)) {\n        return 2;\n    }\n    else if (isWebGLVersionEnabled(1)) {\n        return 1;\n    }\n    return 0;\n});\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack binary ops. */\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack unary ops. */\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack array ops. */\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack image ops. */\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n    const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n    !device_util.isMobile());\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n    return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n        false :\n        ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n/** Whether the fence API is available. */\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n    // Use uniform uploads only when 32bit floats are supported. In\n    // 16bit\n    // environments there are problems with comparing a 16bit texture value\n    // with a 32bit uniform value.\n    const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n    return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {\n    return -1;\n}, threshold => {\n    if (threshold < 0 && threshold !== -1) {\n        throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n    }\n});\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag('WEBGL_FLUSH_THRESHOLD', () => {\n    return device_util.isMobile() ? 1 : -1;\n}, threshold => {\n    if (threshold < 0 && threshold !== -1) {\n        throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n    }\n});\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nexport function getGlslDifferences() {\n    let version;\n    let attribute;\n    let varyingVs;\n    let varyingFs;\n    let texture2D;\n    let output;\n    let defineOutput;\n    let defineSpecialNaN;\n    let defineSpecialInf;\n    let defineRound;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        version = '#version 300 es';\n        attribute = 'in';\n        varyingVs = 'out';\n        varyingFs = 'in';\n        texture2D = 'texture';\n        output = 'outputColor';\n        defineOutput = 'out vec4 outputColor;';\n        // Use custom isnan definition to work across differences between\n        // implementations on various platforms. While this should happen in ANGLE\n        // we still see differences between android and windows (on chrome) when\n        // using isnan directly.\n        defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n        // In webgl 2 we do not need to specify a custom isinf so there is no\n        // need for a special INFINITY constant.\n        defineSpecialInf = ``;\n        defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    else {\n        version = '';\n        attribute = 'attribute';\n        varyingVs = 'varying';\n        varyingFs = 'varying';\n        texture2D = 'texture2D';\n        output = 'gl_FragColor';\n        defineOutput = '';\n        // WebGL1 has no built in isnan so we define one here.\n        defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n        defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n        defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    return {\n        version,\n        attribute,\n        varyingVs,\n        varyingFs,\n        texture2D,\n        output,\n        defineOutput,\n        defineSpecialNaN,\n        defineSpecialInf,\n        defineRound\n    };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(coords, shape, index = 'index') {\n    const strides = util.computeStrides(shape);\n    return strides\n        .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n    })\n        .join('');\n}\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(coords, shape, index = 'index') {\n    const strides = util.computeStrides(shape);\n    return strides\n        .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n    })\n        .join('');\n}\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(indicesArr, variableName) {\n    const numCoords = indicesArr.length;\n    const shape = indicesArr.map(d => `${variableName}[${d}]`);\n    const strides = new Array(numCoords - 1);\n    strides[numCoords - 2] = shape[numCoords - 1];\n    for (let i = numCoords - 3; i >= 0; --i) {\n        strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n    }\n    return strides;\n}\nexport function getLogicalCoordinatesFromFlatIndexByUniform(coords, variableName, index = 'index') {\n    const indicesArray = coords.map((_, i) => i);\n    const strides = symbolicallyComputeStrides(indicesArray, variableName);\n    return strides\n        .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n    })\n        .join('');\n}\nfunction buildVec(x) {\n    if (x.length === 1) {\n        return `${x[0]}`;\n    }\n    return `vec${x.length}(${x.join(',')})`;\n}\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x, y) {\n    if (x.length !== y.length) {\n        throw new Error(`Vectors to be dotted must be of the same length -` +\n            `got ${x.length} and ${y.length}`);\n    }\n    const slices = [];\n    const nearestVec4 = Math.floor(x.length / 4);\n    const nearestVec4Remainder = x.length % 4;\n    for (let i = 0; i < nearestVec4; i++) {\n        const xSlice = x.slice(i * 4, i * 4 + 4);\n        const ySlice = y.slice(i * 4, i * 4 + 4);\n        slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n    }\n    if (nearestVec4Remainder !== 0) {\n        let xSlice = x.slice(nearestVec4 * 4);\n        let ySlice = y.slice(nearestVec4 * 4);\n        if (xSlice.length === 1) {\n            xSlice = xSlice.map(d => `float(${d})`);\n            ySlice = ySlice.map(d => `float(${d})`);\n        }\n        slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n    }\n    return slices.map((d, i) => `dot(${d})`).join('+');\n}\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape) {\n    const strides = util.computeStrides(shape).map(d => d.toString());\n    return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\nexport function getFlatIndexFrom3DOutput() {\n    return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst { getBroadcastDims } = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n    const prefixSnippets = [];\n    inputsInfo.forEach(x => {\n        const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n        // Snippet when we decided to upload the values as uniform.\n        if (x.shapeInfo.isUniform) {\n            prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n        }\n        else {\n            prefixSnippets.push(`uniform sampler2D ${x.name};`);\n            prefixSnippets.push(`uniform int offset${x.name};`);\n        }\n        if (program.enableShapeUniforms) {\n            const { uniformShape } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n            switch (uniformShape.length) {\n                case 1:\n                    prefixSnippets.push(`uniform int ${x.name}Shape;`);\n                    break;\n                case 2:\n                    prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n                    break;\n                case 3:\n                    prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n                    break;\n                case 4:\n                    prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n                    break;\n                default:\n                    break;\n            }\n            prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n        }\n    });\n    if (program.enableShapeUniforms) {\n        switch (outputShape.logicalShape.length) {\n            case 1:\n                prefixSnippets.push(`uniform int outShape;`);\n                break;\n            case 2:\n                prefixSnippets.push(`uniform ivec2 outShape;`);\n                prefixSnippets.push(`uniform int outShapeStrides;`);\n                break;\n            case 3:\n                prefixSnippets.push(`uniform ivec3 outShape;`);\n                prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n                break;\n            case 4:\n                prefixSnippets.push(`uniform ivec4 outShape;`);\n                prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n                break;\n            default:\n                break;\n        }\n        prefixSnippets.push(`uniform ivec2 outTexShape;`);\n    }\n    if (program.customUniforms) {\n        program.customUniforms.forEach((d) => {\n            prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n        });\n    }\n    const inputPrefixSnippet = prefixSnippets.join('\\n');\n    const inputSamplingSnippet = inputsInfo\n        .map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms))\n        .join('\\n');\n    const outTexShape = outputShape.texShape;\n    const glsl = getGlslDifferences();\n    const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n    let outputSamplingSnippet;\n    let floatTextureSetOutputSnippet;\n    let shaderPrefix = getShaderPrefix(glsl);\n    if (outputShape.isPacked) {\n        outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n        floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n    }\n    else {\n        outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n        floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n    }\n    if (program.packedInputs) {\n        shaderPrefix += SHADER_PACKED_PREFIX;\n    }\n    const source = [\n        shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n        inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n        program.userCode\n    ].join('\\n');\n    return source;\n}\nfunction getSamplerFromInInfo(inInfo, enableShapeUniforms = false) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo, enableShapeUniforms);\n        case 1:\n            return getSampler1D(inInfo, enableShapeUniforms);\n        case 2:\n            return getSampler2D(inInfo, enableShapeUniforms);\n        case 3:\n            return getSampler3D(inInfo, enableShapeUniforms);\n        case 4:\n            return getSampler4D(inInfo, enableShapeUniforms);\n        case 5:\n            return getSampler5D(inInfo);\n        case 6:\n            return getSampler6D(inInfo);\n        default:\n            throw new Error(`${shape.length}-D input sampling` +\n                ` is not yet supported`);\n    }\n}\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getPackedSamplerScalar(inInfo);\n        case 1:\n            return getPackedSampler1D(inInfo, enableShapeUniforms);\n        case 2:\n            return getPackedSampler2D(inInfo, enableShapeUniforms);\n        case 3:\n            return getPackedSampler3D(inInfo, enableShapeUniforms);\n        default:\n            return getPackedSamplerND(inInfo, enableShapeUniforms);\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false, enableShapeUniforms) {\n    let res = '';\n    if (usesPackedTextures) {\n        res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n    }\n    else {\n        res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n    }\n    const inShape = inInfo.shapeInfo.logicalShape;\n    const outShape = outShapeInfo.logicalShape;\n    if (inShape.length <= outShape.length) {\n        if (usesPackedTextures) {\n            res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n        else {\n            res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n    }\n    return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 2:\n            return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 3:\n            return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n        default:\n            return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n    }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 5:\n            return getOutput5DCoords(outShape, outTexShape);\n        case 6:\n            return getOutput6DCoords(outShape, outTexShape);\n        default:\n            throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n    }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n    return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n    return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n    return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n    const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n    return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n    return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (packedTexShape[0] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n    }\n    if (packedTexShape[1] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n    if (texShape[0] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n    }\n    if (texShape[1] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n        return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n    }\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        // TODO: support 5d and 6d\n        return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = ``;\n    let coords = 'b, r, c';\n    for (let b = 2; b < shape.length - 1; b++) {\n        texelsInBatchN *= shape[shape.length - b - 1];\n        batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n        coords = `b${b}, ` + coords;\n    }\n    return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n        return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n    }\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n    return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n    return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n    }\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    if (enableShapeUniforms) {\n        return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n    }\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n    if (util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n    }\n    if (shape[1] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    if (shape[0] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n    }\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n    return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        return `float ${funcName}() {return ${texName};}`;\n    }\n    const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n    if (texNumR === 1 && texNumC === 1) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const glsl = getGlslDifferences();\n    if (enableShapeUniforms) {\n        return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const tNumR = texShape[0];\n    const tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (tNumC === 1) {\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (tNumR === 1) {\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const glsl = getGlslDifferences();\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        const texNumR = texShape[0];\n        const texNumC = texShape[1];\n        return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const offset = getFlatOffsetUniformName(texName);\n    if (texNumC === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    if (texNumR === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    if (enableShapeUniforms) {\n        return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (shape[0] === 1) {\n        const squeezedShape = shape.slice(1);\n        const keptDims = [1, 2];\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['b', 'row', 'col'];\n        return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    const glsl = getGlslDifferences();\n    if (enableShapeUniforms) {\n        return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col', 'depth'];\n        return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n    }\n    if (texNumC === stride1 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const glsl = getGlslDifferences();\n    if (enableShapeUniforms) {\n        // TODO: support 5d and 6d\n        return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const rank = shape.length;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = `int b, int row, int col`;\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n        params = `int b${b}, ` + params;\n        texelsInBatch *= shape[rank - b - 1];\n        index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const stride2Str = `int stride2 = ${texName}Shape[3];`;\n    const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n    const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride2 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride3 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride4 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n    const texName = inputInfo.name;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    if (inSize < 2) {\n        return `return ${texName};`;\n    }\n    return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    let output = `return outputValue;`;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    const isInputScalar = inSize === 1;\n    const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n    const isOutputScalar = outSize === 1;\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n        output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n    }\n    else if (isInputScalar && !isOutputScalar) {\n        if (outRank === 1) {\n            output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n        }\n        else {\n            output = `\n        return vec4(outputValue.x);\n      `;\n        }\n    }\n    else if (broadcastDims.length) {\n        const rows = inRank - 2;\n        const cols = inRank - 1;\n        if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.x);`;\n        }\n        else if (broadcastDims.indexOf(rows) > -1) {\n            output = `return vec4(outputValue.x, outputValue.y, ` +\n                `outputValue.x, outputValue.y);`;\n        }\n        else if (broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.xx, outputValue.zz);`;\n        }\n    }\n    return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const outTexShape = outShapeInfo.texShape;\n    const inTexShape = inputInfo.shapeInfo.texShape;\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n        inputInfo.shapeInfo.flatOffset == null &&\n        util.arraysEqual(inTexShape, outTexShape)) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n    }\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nexport function getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    }\n    else if (rank === 2) {\n        return 'ivec2';\n    }\n    else if (rank === 3) {\n        return 'ivec3';\n    }\n    else if (rank === 4) {\n        return 'ivec4';\n    }\n    else if (rank === 5) {\n        return 'ivec5';\n    }\n    else if (rank === 6) {\n        return 'ivec6';\n    }\n    else {\n        throw Error(`GPU for rank ${rank} is not yet supported`);\n    }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const rank = shape.length;\n    const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n    const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n    const useSqueezeShape = (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n        newShape.length < rank) ||\n        useSqueezePackedShape;\n    const uniformShape = useSqueezeShape ? squeezeShape : shape;\n    return { useSqueezeShape, uniformShape, keptDims };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n    // Deep copy.\n    const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nimport { createFragmentShader } from './webgl_util';\nexport function compileProgram(gpgpu, program, inputs, output) {\n    const inputInfos = inputs.map((input, i) => {\n        const shapeInfo = {\n            logicalShape: input.shape,\n            texShape: input.isUniform ? null : input.texData.texShape,\n            isUniform: input.isUniform,\n            isPacked: input.isUniform ? false : input.texData.isPacked,\n            flatOffset: null\n        };\n        if (input.texData != null && input.texData.slice != null &&\n            input.texData.slice.flatOffset > 0) {\n            shapeInfo.flatOffset = input.texData.slice.flatOffset;\n        }\n        return { name: program.variableNames[i], shapeInfo };\n    });\n    const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n    const outShapeInfo = {\n        logicalShape: output.shape,\n        texShape: output.texData.texShape,\n        isUniform: false,\n        isPacked: output.texData.isPacked,\n        flatOffset: null\n    };\n    const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n    const fragmentShader = createFragmentShader(gpgpu.gl, source);\n    const webGLProgram = gpgpu.createProgram(fragmentShader);\n    // Add special uniforms (NAN, INFINITY)\n    let infLoc = null;\n    const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n    }\n    // Add user-defined uniforms\n    const shouldThrow = false;\n    const uniformLocations = {};\n    const inShapesLocations = {};\n    const inTexShapesLocations = {};\n    for (let i = 0; i < program.variableNames.length; i++) {\n        const varName = program.variableNames[i];\n        uniformLocations[varName] =\n            gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n        uniformLocations[`offset${varName}`] =\n            gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n        if (program.enableShapeUniforms) {\n            inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}Shape`, shouldThrow);\n            inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}TexShape`, shouldThrow);\n        }\n    }\n    let outShapeLocation;\n    let outTexShapeLocation;\n    let outShapeStridesLocation;\n    if (program.enableShapeUniforms) {\n        outShapeLocation =\n            gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n        outShapeStridesLocation =\n            gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n        outTexShapeLocation =\n            gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n    }\n    const customUniformLocations = [];\n    if (program.customUniforms) {\n        program.customUniforms.forEach((d, i) => {\n            customUniformLocations[i] =\n                gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n        });\n    }\n    return {\n        program,\n        fragmentShader,\n        source,\n        webGLProgram,\n        uniformLocations,\n        customUniformLocations,\n        inShapeInfos,\n        outShapeInfo,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n    };\n}\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n    if (shapeInfos.length !== inputs.length) {\n        throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` +\n            `was executed with ${inputs.length} inputs`);\n    }\n    shapeInfos.forEach((s, i) => {\n        const shapeA = s.logicalShape;\n        const input = inputs[i];\n        const shapeB = input.shape;\n        if (!util.arraysEqual(shapeA, shapeB)) {\n            throw Error(`Binary was compiled with different shapes than ` +\n                `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n        }\n        // The input is uploaded as uniform.\n        if (s.isUniform && input.isUniform) {\n            return;\n        }\n        const texShapeA = s.texShape;\n        const texShapeB = input.isUniform ? null : input.texData.texShape;\n        if (!util.arraysEqual(texShapeA, texShapeB)) {\n            throw Error(`Binary was compiled with different texture shapes than the` +\n                ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n        }\n    });\n}\nexport function runProgram(gpgpu, binary, inputs, output, customUniformValues) {\n    if (!binary.program.enableShapeUniforms) {\n        validateBinaryAndProgram(binary.inShapeInfos, inputs);\n        validateBinaryAndProgram([binary.outShapeInfo], [output]);\n    }\n    const outTex = output.texData.texture;\n    const outTexShape = output.texData.texShape;\n    if (output.texData.isPacked) {\n        gpgpu.setOutputPackedMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n    }\n    else {\n        gpgpu.setOutputMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n    }\n    gpgpu.setProgram(binary.webGLProgram);\n    // Set special uniforms (NAN, INFINITY)\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        if (binary.infLoc !== null) {\n            gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n        }\n    }\n    if (binary.nanLoc !== null) {\n        gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n    }\n    // Set user-defined inputs\n    inputs.forEach((input, i) => {\n        const varName = binary.program.variableNames[i];\n        const varLoc = binary.uniformLocations[varName];\n        const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n        const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n        const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n        if (varShapeLoc) {\n            const { uniformShape } = shader_compiler.getUniformInfoFromShape(binary.program.packedInputs, input.shape, input.texData.texShape);\n            switch (uniformShape.length) {\n                case 1:\n                    gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                case 2:\n                    gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                case 3:\n                    gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                case 4:\n                    gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                default:\n                    break;\n            }\n        }\n        if (varTexShapeLoc) {\n            gpgpu.gl.uniform2i(varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n        }\n        if (varLoc == null) {\n            // The compiler inferred that this variable is not used in this shader.\n            return;\n        }\n        if (input.isUniform) {\n            // Upload the values of the tensor as uniform.\n            if (util.sizeFromShape(input.shape) < 2) {\n                gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n            }\n            else {\n                let vals = input.uniformValues;\n                if (!(vals instanceof Float32Array)) {\n                    vals = new Float32Array(vals);\n                }\n                gpgpu.gl.uniform1fv(varLoc, vals);\n            }\n            return;\n        }\n        // If the input was sliced, upload the flat offset index.\n        if (input.texData.slice != null && varOffsetLoc != null) {\n            gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n        }\n        gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n    });\n    const outShapeLoc = binary.outShapeLocation;\n    if (outShapeLoc) {\n        switch (output.shape.length) {\n            case 1:\n                gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            case 2:\n                gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            case 3:\n                gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            case 4:\n                gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            default:\n                break;\n        }\n    }\n    if (binary.outShapeStridesLocation) {\n        const strides = util.computeStrides(output.shape);\n        switch (output.shape.length) {\n            case 2:\n                gpgpu.gl.uniform1iv(binary.outShapeStridesLocation, new Int32Array(strides));\n                break;\n            case 3:\n                gpgpu.gl.uniform2iv(binary.outShapeStridesLocation, new Int32Array(strides));\n                break;\n            case 4:\n                gpgpu.gl.uniform3iv(binary.outShapeStridesLocation, new Int32Array(strides));\n                break;\n            default:\n                break;\n        }\n    }\n    if (binary.outTexShapeLocation) {\n        gpgpu.gl.uniform2i(binary.outTexShapeLocation, output.texData.texShape[0], output.texData.texShape[1]);\n    }\n    if (binary.program.customUniforms && customUniformValues) {\n        binary.program.customUniforms.forEach((d, i) => {\n            const customLoc = binary.customUniformLocations[i];\n            const customValue = customUniformValues[i];\n            if (d.type === 'float') {\n                gpgpu.gl.uniform1fv(customLoc, customValue);\n            }\n            else if (d.type === 'vec2') {\n                gpgpu.gl.uniform2fv(customLoc, customValue);\n            }\n            else if (d.type === 'vec3') {\n                gpgpu.gl.uniform3fv(customLoc, customValue);\n            }\n            else if (d.type === 'vec4') {\n                gpgpu.gl.uniform4fv(customLoc, customValue);\n            }\n            else if (d.type === 'int') {\n                gpgpu.gl.uniform1iv(customLoc, customValue);\n            }\n            else if (d.type === 'ivec2') {\n                gpgpu.gl.uniform2iv(customLoc, customValue);\n            }\n            else if (d.type === 'ivec3') {\n                gpgpu.gl.uniform3iv(customLoc, customValue);\n            }\n            else if (d.type === 'ivec4') {\n                gpgpu.gl.uniform4iv(customLoc, customValue);\n            }\n            else {\n                throw Error(`uniform type ${d.type} is not supported yet.`);\n            }\n        });\n    }\n    gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n    let keyInputs = '';\n    inputs.concat(output).forEach(x => {\n        const hasOffset = x.texData != null && x.texData.slice != null &&\n            x.texData.slice.flatOffset > 0;\n        // TODO: Remove the condition of !x.isUniform.\n        if (program.enableShapeUniforms && !x.isUniform) {\n            const xTexShape = x.texData.texShape;\n            const { useSqueezeShape, uniformShape, keptDims } = shader_compiler.getUniformInfoFromShape(program.packedInputs, x.shape, xTexShape);\n            let rank1 = '', rank2 = '', rank34 = '';\n            if (uniformShape.length === 1 && program.packedInputs) {\n                const packedTexShape = [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n                rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n            }\n            else if (uniformShape.length === 2 && !program.packedInputs) {\n                rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n            }\n            else if (uniformShape.length > 2 && !program.packedInputs) {\n                const strides = util.computeStrides(uniformShape);\n                rank34 = `${strides[0] === xTexShape[1]}_${strides[strides.length - 1] === xTexShape[1]}`;\n            }\n            const xRank = x.shape.length;\n            const isLogicalShapTexShapeEqual = uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n            const isScalar = util.sizeFromShape(x.shape) === 1;\n            const broadcastDims = backend_util.getBroadcastDims(x.shape, output.shape);\n            const isInOutTexShapeEqual = !program.packedInputs &&\n                xRank === output.shape.length &&\n                util.arraysEqual(xTexShape, output.texData.texShape);\n            const isTexShapeGreaterThanOne = program.packedInputs || uniformShape.length > 2 ?\n                '' :\n                `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n            // These key components are needed due to shader_compiler is embedding\n            // them in the shader.\n            // |xRank| is used to determine the coords length. See\n            // get[Packed]SamplerAtOutputCoords.\n            // |isInOutTexShapeEqual| is used to determine whether going to an\n            // optimization path in getSamplerAtOutputCoords.\n            // |useSqueezeShape| is extracted from squeezeInputInfo of\n            // getSampler[2|3|4]D/getPackedSampler3D.\n            // |isScalar| is extracted from isInputScalar/isOutputScalar in\n            // getPackedSamplerAtOutputCoords.\n            // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n            // |isLogicalShapTexShapeEqual| is used in\n            // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n            // |rank1| is used in getOutputPacked1DCoords.\n            // |rank2| is used in getOutput2DCoords.\n            // |rank34| is used in getSampler3D/getSampler4D.\n            // |isTexShapeGreaterThanOne| are used in\n            // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n            keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n        }\n        else {\n            const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n            keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n        }\n    });\n    const keyUserCode = program.userCode;\n    let key = program.constructor.name;\n    // Fast string concat. See https://jsperf.com/string-concatenation/14.\n    key += '_' + keyInputs + '_' + keyUserCode +\n        `${env().getNumber('WEBGL_VERSION')}`;\n    return key;\n}\nexport function useShapeUniforms(rank) {\n    // TODO: Remove the limitaion of rank <= 4.\n    return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport { PackingScheme } from './tex_util';\nexport class DecodeMatrixProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        this.outPackingScheme = PackingScheme.DENSE;\n        this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport { PackingScheme } from './tex_util';\nexport class DecodeMatrixPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outPackingScheme = PackingScheme.DENSE;\n        this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { ENCODE_FLOAT_SNIPPET } from './shader_compiler_util';\nimport { TextureUsage } from './tex_util';\nexport class EncodeFloatProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.outTexUsage = TextureUsage.DOWNLOAD;\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { ENCODE_FLOAT_SNIPPET } from './shader_compiler_util';\nimport { TextureUsage } from './tex_util';\nexport class EncodeFloatPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = false;\n        this.outTexUsage = TextureUsage.DOWNLOAD;\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport class EncodeMatrixProgram {\n    constructor(outputShape, inputIsUnsignedByte = false) {\n        this.variableNames = ['A'];\n        this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        let output = `result`;\n        if (inputIsUnsignedByte) {\n            output = `floor(result * 255. + 0.5)`;\n        }\n        this.userCode = `\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n            shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\nexport class EncodeMatrixPackedProgram {\n    constructor(outputShape, inputIsUnsignedByte = false) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        let mainLoop = '';\n        let output = 'result';\n        if (inputIsUnsignedByte) {\n            output = 'floor(result * 255. + 0.5)';\n        }\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                const channel = row * 2 + col;\n                mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n            }\n        }\n        this.userCode = `\n        ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n            shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n    const glsl = getGlslDifferences();\n    const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n    return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n    // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n    const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n    return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n    // OpenGL (and WebGL) have \"CCW == front\" winding\n    const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n    webgl_util.validateTextureSize(width, height);\n    const texture = webgl_util.createTexture(gl);\n    const tex2d = gl.TEXTURE_2D;\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n    }\n    else {\n        webgl_util.callAndCheck(gl, () => gl\n            .texStorage2D(tex2d, 1, internalFormat, width, height));\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n    return { texture, texShape: [height, width] };\n}\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n    return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n    const posOffset = 0; // x is the first buffer element\n    const uvOffset = 3 * 4; // uv comes after [x y z]\n    const stride = (3 * 4) + (2 * 4); // xyz + uv, each entry is 4-byte float.\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n    const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n    return success &&\n        webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    let dataForUpload, texelDataType, internalFormat;\n    if (data instanceof Uint8Array) {\n        dataForUpload = new Uint8Array(width * height * 4);\n        texelDataType = gl.UNSIGNED_BYTE;\n        internalFormat = gl.RGBA;\n    }\n    else {\n        dataForUpload = new Float32Array(width * height * 4);\n        texelDataType = gl.FLOAT;\n        internalFormat = textureConfig.internalFormatPackedFloat;\n    }\n    dataForUpload.set(data);\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload));\n    }\n    else {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    if (pixels.data instanceof Uint8Array) {\n        if (env().getNumber('WEBGL_VERSION') === 2) {\n            webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n        }\n        else {\n            webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n        }\n    }\n    else {\n        if (env().getNumber('WEBGL_VERSION') === 2) {\n            webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n        }\n        else {\n            webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n        }\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n    // Create and bind the buffer.\n    const buffer = gl2.createBuffer();\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n    // Initialize the buffer to the size of the texture in bytes.\n    const bytesPerFloat = 4;\n    const valuesPerTexel = 4;\n    const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n    webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n    // Enqueue a command on the GPU command queue to copy of texture into the\n    // buffer.\n    webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n    return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(size);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n    const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    const numChannels = 4;\n    const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));\n    // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n    // decoding of the 4 bytes that back each 32 bit float.\n    return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n    const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n    return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n    constructor(gl) {\n        this.outputTexture = null;\n        this.program = null;\n        this.disposed = false;\n        this.vertexAttrsAreBound = false;\n        this.itemsToPoll = [];\n        const glVersion = env().getNumber('WEBGL_VERSION');\n        if (gl != null) {\n            this.gl = gl;\n            setWebGLContext(glVersion, gl);\n        }\n        else {\n            this.gl = getWebGLContext(glVersion);\n        }\n        // WebGL 2.0 enables texture floats without an extension.\n        let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        if (env().getNumber('WEBGL_VERSION') === 1) {\n            const TEXTURE_FLOAT = 'OES_texture_float';\n            const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n            this.textureFloatExtension =\n                webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n            if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n                this.textureHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support half float textures, yet the ' +\n                    'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n            this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support color renderable half floats, yet ' +\n                    'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n        }\n        else {\n            COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n                this.colorBufferFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            }\n            else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            }\n            else {\n                throw new Error('GL context does not support color renderable floats');\n            }\n        }\n        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n        this.framebuffer = webgl_util.createFramebuffer(this.gl);\n        this.textureConfig =\n            tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n    }\n    get debug() {\n        return env().getBool('DEBUG');\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        if (this.program != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n                ' This is probably a resource leak, delete the program with ' +\n                'GPGPUContext.deleteProgram before disposing.');\n        }\n        if (this.outputTexture != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +\n                'texture.  This is probably a resource leak, delete the output ' +\n                'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n                'disposing.');\n        }\n        const gl = this.gl;\n        webgl_util.callAndCheck(gl, () => gl.finish());\n        webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n        this.disposed = true;\n    }\n    createFloat32MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createFloat16MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createUnsignedBytesMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    uploadPixelDataToTexture(texture, pixels) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    }\n    uploadDenseMatrixToTexture(texture, width, height, data) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n    }\n    createFloat16PackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createPackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    deleteMatrixTexture(texture) {\n        this.throwIfDisposed();\n        if (this.outputTexture === texture) {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n            this.outputTexture = null;\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n    }\n    downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n    }\n    downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n        return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n    }\n    downloadFloat32MatrixFromBuffer(buffer, size) {\n        return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n    }\n    createBufferFromTexture(texture, rows, columns) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    createAndWaitForFence() {\n        const fenceContext = this.createFence(this.gl);\n        return this.pollFence(fenceContext);\n    }\n    createFence(gl) {\n        let query;\n        let isFencePassed;\n        if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n            const gl2 = gl;\n            const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n            isFencePassed = () => {\n                const status = gl2.clientWaitSync(sync, 0, 0);\n                return status === gl2.ALREADY_SIGNALED ||\n                    status === gl2.CONDITION_SATISFIED;\n            };\n            query = sync;\n        }\n        else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            query = this.beginQuery();\n            this.endQuery();\n            isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n        }\n        else {\n            // If we have no way to fence, return true immediately. This will fire in\n            // WebGL 1.0 when there is no disjoint query timer. In this case, because\n            // the fence passes immediately, we'll immediately ask for a download of\n            // the texture, which will cause the UI thread to hang.\n            isFencePassed = () => true;\n        }\n        return { query, isFencePassed };\n    }\n    downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n    }\n    createProgram(fragmentShader) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        if (this.vertexShader == null) {\n            this.vertexShader = gpgpu_util.createVertexShader(gl);\n        }\n        const program = webgl_util.createProgram(gl);\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n        webgl_util.linkProgram(gl, program);\n        if (this.debug) {\n            webgl_util.validateProgram(gl, program);\n        }\n        if (!this.vertexAttrsAreBound) {\n            this.setProgram(program);\n            this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n        }\n        return program;\n    }\n    deleteProgram(program) {\n        this.throwIfDisposed();\n        if (program === this.program) {\n            this.program = null;\n        }\n        if (program != null) {\n            webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n        }\n    }\n    setProgram(program) {\n        this.throwIfDisposed();\n        this.program = program;\n        if ((this.program != null) && this.debug) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n    }\n    getUniformLocation(program, uniformName, shouldThrow = true) {\n        this.throwIfDisposed();\n        if (shouldThrow) {\n            return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n        }\n        else {\n            return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n        }\n    }\n    getAttributeLocation(program, attribute) {\n        this.throwIfDisposed();\n        return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n    }\n    getUniformLocationNoThrow(program, uniformName) {\n        this.throwIfDisposed();\n        return this.gl.getUniformLocation(program, uniformName);\n    }\n    setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n    }\n    setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    }\n    setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n        this.throwIfDisposed();\n        const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    }\n    setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    }\n    setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    }\n    debugValidate() {\n        if (this.program != null) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.validateFramebuffer(this.gl);\n    }\n    executeProgram() {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        const gl = this.gl;\n        if (this.debug) {\n            this.debugValidate();\n        }\n        webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n    }\n    blockUntilAllProgramsCompleted() {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n    }\n    getQueryTimerExtension() {\n        if (this.disjointQueryTimerExtension == null) {\n            this.disjointQueryTimerExtension =\n                webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                    'EXT_disjoint_timer_query_webgl2' :\n                    'EXT_disjoint_timer_query');\n        }\n        return this.disjointQueryTimerExtension;\n    }\n    getQueryTimerExtensionWebGL2() {\n        return this.getQueryTimerExtension();\n    }\n    getQueryTimerExtensionWebGL1() {\n        return this.getQueryTimerExtension();\n    }\n    beginQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const query = gl2.createQuery();\n            gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n            return query;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        const query = ext.createQueryEXT();\n        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n        return query;\n    }\n    endQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            gl2.endQuery(ext.TIME_ELAPSED_EXT);\n            return;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    }\n    async waitForQueryAndGetTime(query) {\n        await util.repeatedTry(() => this.disposed || // while testing contexts are created / disposed\n            // in rapid succession, so without this check we\n            // may poll for the query timer indefinitely\n            this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n        return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    }\n    getQueryTime(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return null;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n    }\n    isQueryAvailable(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return true;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n    }\n    pollFence(fenceContext) {\n        return new Promise(resolve => {\n            this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n        });\n    }\n    pollItems() {\n        // Find the last query that has finished.\n        const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n        for (let i = 0; i <= index; ++i) {\n            const { resolveFn } = this.itemsToPoll[i];\n            resolveFn();\n        }\n        this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n    }\n    addItemToPoll(isDoneFn, resolveFn) {\n        this.itemsToPoll.push({ isDoneFn, resolveFn });\n        if (this.itemsToPoll.length > 1) {\n            // We already have a running loop that polls.\n            return;\n        }\n        // Start a new loop that polls.\n        util.repeatedTry(() => {\n            this.pollItems();\n            // End the loop if no more items to poll.\n            return this.itemsToPoll.length === 0;\n        });\n    }\n    bindTextureToFrameBuffer(texture) {\n        this.throwIfDisposed();\n        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(this.gl);\n        }\n    }\n    unbindTextureToFrameBuffer() {\n        if (this.outputTexture != null) {\n            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n            if (this.debug) {\n                webgl_util.validateFramebuffer(this.gl);\n            }\n        }\n        else {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        }\n    }\n    downloadMatrixDriver(texture, downloadAndDecode) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = downloadAndDecode();\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(gl);\n        }\n        this.outputTexture = outputMatrixTextureMaybePacked;\n        webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n        webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n    }\n    setOutputMatrixWriteRegionDriver(x, y, width, height) {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n    }\n    throwIfDisposed() {\n        if (this.disposed) {\n            throw new Error('Attempted to use disposed GPGPUContext.');\n        }\n    }\n    throwIfNoProgram() {\n        if (this.program == null) {\n            throw new Error('No GPU program is currently set.');\n        }\n    }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n    let i = 0;\n    for (; i < arr.length; ++i) {\n        const isDone = arr[i]();\n        if (!isDone) {\n            break;\n        }\n    }\n    return i - 1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function assertNotComplex(tensor, opName) {\n    if (!Array.isArray(tensor)) {\n        tensor = [tensor];\n    }\n    tensor.forEach(t => {\n        if (t != null) {\n            util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors in the CPU backend.`);\n        }\n    });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function simpleAbsImpl(vals) {\n    const resultValues = new Float32Array(vals.length);\n    for (let i = 0; i < vals.length; ++i) {\n        resultValues[i] = Math.abs(vals[i]);\n    }\n    return resultValues;\n}\nexport const abs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    assertNotComplex(x, 'abs');\n    let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const values = cpuBackend.data.get(x.dataId).values;\n    resultValues = simpleAbsImpl(values);\n    return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'cpu',\n    kernelFunc: abs,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op) {\n    return (aShape, bShape, aVals, bVals, dtype) => {\n        const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultRank = newShape.length;\n        const resultStrides = util.computeStrides(newShape);\n        const resultSize = util.sizeFromShape(newShape);\n        const result = util.getTypedArrayFromDType(dtype, resultSize);\n        const aRank = aShape.length;\n        const bRank = bShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bStrides = util.computeStrides(bShape);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            for (let i = 0; i < result.length; ++i) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                result[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return [result, newShape];\n    };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nexport function complex(args) {\n    const { inputs, backend } = args;\n    const { real, imag } = inputs;\n    const realVals = backend.data.get(real.dataId).values;\n    const imagVals = backend.data.get(imag.dataId).values;\n    const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n    const complex = backend.data.get(complexInfo.dataId);\n    // The complex tensor owns the underlying real and imag tensorInfos, only the\n    // complex tensor tracks refCount, when complexData is disposed the\n    // underlying tensorData will be disposed.\n    complex.complexTensorInfos = {\n        real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n        imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n    };\n    return complexInfo;\n}\nexport const complexConfig = {\n    kernelName: Complex,\n    backendName: 'cpu',\n    kernelFunc: complex\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { complex } from '../kernels/Complex';\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(backend, shape, dtype = 'float32') {\n    if (dtype === 'complex64') {\n        const real = zeros(backend, shape, 'float32');\n        const imag = zeros(backend, shape, 'float32');\n        return complex({ inputs: { real, imag }, backend });\n    }\n    const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n    return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity } from '@tensorflow/tfjs-core';\nexport function identity(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    backend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };\n}\nexport const identityConfig = {\n    kernelName: Identity,\n    backendName: 'cpu',\n    kernelFunc: identity\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Real } from '@tensorflow/tfjs-core';\nexport function real(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const real = backend.data.get(input.dataId).complexTensorInfos.real;\n    const realVal = backend.data.get(real.dataId).values;\n    // When complex tensor is disposed, its underlying parts will be disposed too.\n    // Make new tensor out of the real value of the complex. This makes sure the\n    // value is still accessible even if complex tensor is disposed.\n    return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\nexport const realConfig = {\n    kernelName: Real,\n    backendName: 'cpu',\n    kernelFunc: real\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { zeros } from '../utils/zeros_impl';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { real } from './Real';\nexport function cast(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dtype } = attrs;\n    // Casting to complex64.\n    if (dtype === 'complex64') {\n        if (x.dtype === 'complex64') {\n            return identity({ inputs: { x }, backend });\n        }\n        const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n        const floatX = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n        const result = complex({ inputs: { real: floatX, imag: zerosTensorInfo }, backend });\n        backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n        backend.disposeIntermediateTensorInfo(floatX);\n        return result;\n    }\n    // Casting from complex64\n    if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const result = cast({ inputs: { x: realPart }, backend, attrs: { dtype } });\n        backend.disposeIntermediateTensorInfo(realPart);\n        return result;\n    }\n    if (!util.hasEncodingLoss(x.dtype, dtype)) {\n        // We don't change the underlying data, since we cast to higher\n        // precision.\n        const result = identity({ inputs: { x }, backend });\n        return { dataId: result.dataId, shape: result.shape, dtype };\n    }\n    if (dtype === 'int32') {\n        const values = backend.data.get(x.dataId).values;\n        const resultValues = Int32Array.from(values);\n        return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n    }\n    if (dtype === 'bool') {\n        // This is essentially the result of notEqual(x, 0). We avoid using\n        // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n        // cast -> notEqual -> binary_utils.\n        const xVals = backend.data.get(x.dataId).values;\n        const zero = util.toTypedArray([0], x.dtype);\n        const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n        return backend.makeTensorInfo(resultShape, 'bool', resultData);\n    }\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n    kernelName: Cast,\n    backendName: 'cpu',\n    kernelFunc: cast\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n    if (complexImpl == null) {\n        return ({ inputs, backend }) => {\n            const { a, b } = inputs;\n            const cpuBackend = backend;\n            assertNotComplex([a, b], name);\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const decodedAVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(aVals) :\n                aVals;\n            const decodedBVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(bVals) :\n                bVals;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        };\n    }\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const cpuBackend = backend;\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            const $aComplex = cast({ inputs: { x: a }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n            const aReal = $aComplexVals.complexTensorInfos.real;\n            const aImag = $aComplexVals.complexTensorInfos.imag;\n            const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n            const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n            const $bComplex = cast({ inputs: { x: b }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n            const bReal = $bComplexVals.complexTensorInfos.real;\n            const bImag = $bComplexVals.complexTensorInfos.imag;\n            const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n            const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n            const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n            const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n            const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n            const result = complex({ inputs: { real: resultReal, imag: resultImag }, backend: cpuBackend });\n            cpuBackend.disposeIntermediateTensorInfo($aComplex);\n            cpuBackend.disposeIntermediateTensorInfo($bComplex);\n            cpuBackend.disposeIntermediateTensorInfo(resultReal);\n            cpuBackend.disposeIntermediateTensorInfo(resultImag);\n            return result;\n        }\n        else {\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        }\n    };\n}\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op) {\n    return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n        const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultSize = util.sizeFromShape(resultShape);\n        const resultRank = resultShape.length;\n        const resultStrides = util.computeStrides(resultShape);\n        const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n        const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n        const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n        const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n        const aRank = aShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bRank = bShape.length;\n        const bStrides = util.computeStrides(bShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const aIdx = i % aVals.length;\n                const bIdx = i % bVals.length;\n                const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n                resultRealVals[i] = result.real;\n                resultImagVals[i] = result.imag;\n            }\n        }\n        else {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n                resultRealVals[i] = opResult.real;\n                resultImagVals[i] = opResult.imag;\n            }\n        }\n        return [resultRealVals, resultImagVals, resultShape];\n    };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal + bReal, imag: aImag + bImag };\n}));\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\nexport const addConfig = {\n    kernelName: Add,\n    backendName: 'cpu',\n    kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n    const weightsSize = util.sizeFromShape(weightsShape);\n    const outVals = util.makeZerosTypedArray(size, weightsDtype);\n    for (let i = 0; i < xVals.length; i++) {\n        const value = xVals[i];\n        if (value < 0) {\n            throw new Error('Input x must be non-negative!');\n        }\n        if (value >= size) {\n            continue;\n        }\n        if (weightsSize > 0) {\n            outVals[value] += weightsVals[i];\n        }\n        else {\n            outVals[value] += 1;\n        }\n    }\n    return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n    const numRows = xBuf.shape[0];\n    const numCols = xBuf.shape[1];\n    const outBuf = buffer([numRows, size], weightsBuf.dtype);\n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            const value = xBuf.get(i, j);\n            if (value < 0) {\n                throw new Error('Input x must be non-negative!');\n            }\n            if (value >= size) {\n                continue;\n            }\n            if (binaryOutput) {\n                outBuf.set(1, i, value);\n            }\n            else {\n                if (weightsBuf.size > 0) {\n                    outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n                }\n                else {\n                    outBuf.set(outBuf.get(i, value) + 1, i, value);\n                }\n            }\n        }\n    }\n    return outBuf;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op) {\n    return (values, dtype, attrs) => {\n        const newValues = util.getTypedArrayFromDType(dtype, values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return newValues;\n    };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(name, op, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        assertNotComplex(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const xSize = util.sizeFromShape(x.shape);\n        const $dtype = dtype || x.dtype;\n        const newValues = util.getArrayFromDType($dtype, xSize);\n        for (let i = 0; i < xSize; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        assertNotComplex(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const $dtype = dtype || x.dtype;\n        const newValues = unaryImpl(values, $dtype, attrs);\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\nexport const ceilConfig = {\n    kernelName: Ceil,\n    backendName: 'cpu',\n    kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n    const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n    if (simplyConcat && dtype !== 'string') {\n        // Use built-in TypedArray.set() method for speed.\n        let offset = 0;\n        inputs.forEach(input => {\n            const size = util.sizeFromShape(input.shape);\n            outVals.set(input.vals, offset);\n            offset += size;\n        });\n    }\n    else {\n        let colOffset = 0;\n        inputs.forEach(input => {\n            const decodedData = dtype === 'string' ?\n                backend_util.fromUint8ToStringArray(input.vals) :\n                input.vals;\n            let tIdx = 0;\n            for (let row = 0; row < input.shape[0]; ++row) {\n                const resIdx = row * outShape[1] + colOffset;\n                for (let col = 0; col < input.shape[1]; ++col) {\n                    outVals[resIdx + col] = decodedData[tIdx++];\n                }\n            }\n            colOffset += input.shape[1];\n        });\n    }\n    return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const equalImpl = createSimpleBinaryKernelImpl((a, b) => (a === b) ? 1 : 0);\nexport const equal = binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\nexport const equalConfig = {\n    kernelName: Equal,\n    backendName: 'cpu',\n    kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\nexport const expConfig = {\n    kernelName: Exp,\n    backendName: 'cpu',\n    kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\nexport const expm1Config = {\n    kernelName: Expm1,\n    backendName: 'cpu',\n    kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\nexport const floorConfig = {\n    kernelName: Floor,\n    backendName: 'cpu',\n    kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {\n    const outBuf = buffer([numSlices, sliceSize], dtype);\n    for (let i = 0; i < numSlices; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            flattenIndex += dim * strides[j];\n            index.push(dim);\n        }\n        if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            outBuf.values[i * sliceSize + k] =\n                paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n        }\n    }\n    return outBuf;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n    const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const newLoc = outBuf.indexToLoc(i);\n        const originalLoc = newLoc.slice();\n        const batchIdx = originalLoc[0];\n        const indicesIdx = originalLoc[2];\n        const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n        originalLoc[2] = indicesBuf.values[indicesIndex];\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n            outBuf.values[i] = xBuf.values[originalIndex];\n        } // Else, index is out of bounds, so leave the default zero val in outBuf.\n    }\n    return outBuf;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterImpl = createSimpleBinaryKernelImpl((a, b) => (a > b) ? 1 : 0);\nexport const greater = binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\nexport const greaterConfig = {\n    kernelName: Greater,\n    backendName: 'cpu',\n    kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\nexport const greaterEqualConfig = {\n    kernelName: GreaterEqual,\n    backendName: 'cpu',\n    kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessImpl = createSimpleBinaryKernelImpl((a, b) => (a < b) ? 1 : 0);\nexport const less = binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\nexport const lessConfig = {\n    kernelName: Less,\n    backendName: 'cpu',\n    kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a <= b) ? 1 : 0);\nexport const lessEqual = binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\nexport const lessEqualConfig = {\n    kernelName: LessEqual,\n    backendName: 'cpu',\n    kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function linSpaceImpl(start, stop, num) {\n    const step = (stop - start) / (num - 1);\n    const values = util.makeZerosTypedArray(num, 'float32');\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\nexport const logConfig = {\n    kernelName: Log,\n    backendName: 'cpu',\n    kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (Number.isNaN(value) ||\n                value > max) { // comparison with NaN always return false\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const maximumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\nexport const maximumConfig = {\n    kernelName: Maximum,\n    backendName: 'cpu',\n    kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const minimumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\nexport const minimumConfig = {\n    kernelName: Minimum,\n    backendName: 'cpu',\n    kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const multiplyImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n    };\n}));\nexport const multiply = binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'cpu',\n    kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n    const minusOne = util.createScalarValue(-1, xDtype);\n    return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'neg');\n    const xVals = backend.data.get(x.dataId).values;\n    const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport const negConfig = {\n    kernelName: Neg,\n    backendName: 'cpu',\n    kernelFunc: neg\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const notEqualImpl = createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual = binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\nexport const notEqualConfig = {\n    kernelName: NotEqual,\n    backendName: 'cpu',\n    kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transposeImpl } from './Transpose_impl';\nexport function transpose(args) {\n    const { inputs, attrs, backend } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    assertNotComplex(x, 'transpose');\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    const values = backend.data.get(x.dataId).values;\n    const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n    const dataId = backend.write(result, newShape, x.dtype);\n    return { dataId, shape: newShape, dtype: x.dtype };\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'cpu',\n    kernelFunc: transpose\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n    const outDtype = upcastType(xDtype, 'int32');\n    const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    for (let i = 0; i < outVals.length; ++i) {\n        const offset = i * reduceSize;\n        let prod = 1;\n        for (let j = 0; j < reduceSize; ++j) {\n            prod *= xVals[offset + j];\n        }\n        outVals[i] = prod;\n    }\n    return { outVals, outShape, outDtype };\n}\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'prod');\n    const xRank = x.shape.length;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    const intermediateTensorInfos = [];\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        intermediateTensorInfos.push(permutedX);\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    const xVals = backend.data.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n    let resultShape = outShape;\n    if (keepDims) {\n        resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'cpu',\n    kernelFunc: prod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function rangeImpl(start, stop, step, dtype) {\n    const sameStartStop = start === stop;\n    const increasingRangeNegativeStep = start < stop && step < 0;\n    const decreasingRangePositiveStep = stop < start && step > 1;\n    if (sameStartStop || increasingRangeNegativeStep ||\n        decreasingRangePositiveStep) {\n        return util.makeZerosTypedArray(0, dtype);\n    }\n    const numElements = Math.abs(Math.ceil((stop - start) / step));\n    const values = util.makeZerosTypedArray(numElements, dtype);\n    if (stop < start && step === 1) {\n        // Auto adjust the step's sign if it hasn't been set\n        // (or was set to 1)\n        step = -1;\n    }\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\nexport const rsqrtConfig = {\n    kernelName: Rsqrt,\n    backendName: 'cpu',\n    kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sigmoid } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sigmoidImpl = createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid = unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoidConfig = {\n    kernelName: Sigmoid,\n    backendName: 'cpu',\n    kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        if (dtype === 'string') {\n            return vals.slice(flatOffset, flatOffset + length);\n        }\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const decodedData = dtype === 'string' ?\n        backend_util.fromUint8ToStringArray(vals) :\n        vals;\n    const inBuf = buffer(shape, dtype, decodedData);\n    const outBuf = buffer(size, dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n        outBuf.set(inBuf.get(...inLoc), ...outLoc);\n    }\n    if (dtype === 'string') {\n        return backend_util.fromStringArrayToUint8(outBuf.values);\n    }\n    return outBuf.values;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n    const indicesCount = indicesShape[0];\n    const denseRows = denseShape[0];\n    const emptyRowIndicator = new Array(denseRows);\n    const reverseIndexMap = new Array(indicesCount);\n    const rank = indicesShape[1];\n    if (denseRows === 0) {\n        if (indicesCount !== 0) {\n            throw new Error(backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesCount));\n        }\n        const outputIndices = util.getArrayFromDType(indicesDType, 0);\n        const outputValues = util.getArrayFromDType(valuesDType, 0);\n        return [\n            outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n        ];\n    }\n    let rowsAreOrdered = true;\n    let lastIndicesRow = 0;\n    const csrOffset = new Array(denseRows).fill(0);\n    for (let i = 0; i < indicesCount; ++i) {\n        // indices is a 2d tensor with shape of [N, rank]\n        const row = indices[i * rank];\n        if (row < 0) {\n            throw new Error(backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n        }\n        if (row >= denseRows) {\n            throw new Error(backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(i, row, denseRows));\n        }\n        ++csrOffset[row];\n        rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n        lastIndicesRow = row;\n    }\n    let allRowsFull = true;\n    for (let row = 0; row < denseRows; ++row) {\n        // csrOffset here describes the number of elements in this dense row\n        const rowEmpty = (csrOffset[row] === 0);\n        emptyRowIndicator[row] = rowEmpty;\n        allRowsFull = allRowsFull && !rowEmpty;\n        // In filled version, each row has at least one element.\n        csrOffset[row] = Math.max(csrOffset[row], 1);\n        // Update csrOffset to represent the number of elements up to and\n        // including denseRows + 1:\n        //  csrOffset[0] == #{elements of row 0}\n        //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n        //  ..\n        //  csrOffset[i] == starting index for elements in row i + 1.\n        if (row > 0) {\n            csrOffset[row] += csrOffset[row - 1];\n        }\n    }\n    if (allRowsFull && rowsAreOrdered) {\n        const outputIndices = indices;\n        const outputValues = values;\n        for (let i = 0; i < indicesCount; ++i) {\n            reverseIndexMap[i] = i;\n        }\n        return [\n            outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n    else {\n        const fullIndicesCount = csrOffset[denseRows - 1];\n        const outputIndices = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n        const outputValues = util.getArrayFromDType(valuesDType, fullIndicesCount);\n        const filledCount = new Array(denseRows).fill(0);\n        // Fill in values for rows that are not missing\n        for (let i = 0; i < indicesCount; ++i) {\n            // indices is a 2d tensor with shape of [N, rank]\n            const row = indices[i * rank];\n            const offset = filledCount[row];\n            const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n            filledCount[row]++; // Increment the filled count for this row.\n            for (let j = 0; j < rank; ++j) {\n                // indices and outputIndices are 2d tensors with shape of [N, rank]\n                outputIndices[outputI * rank + j] = indices[i * rank + j];\n            }\n            outputValues[outputI] = values[i];\n            // We'll need this reverse index map to backprop correctly.\n            reverseIndexMap[i] = outputI;\n        }\n        // Fill in values for rows that are missing\n        for (let row = 0; row < denseRows; ++row) {\n            const rowCount = filledCount[row];\n            if (rowCount === 0) { // We haven't filled this row\n                const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n                // Remaining index values were set to zero already.\n                // Just need to set the row index in the right location.\n                // outputIndices is a 2d tensor with shape of [N, rank]\n                outputIndices[startingIndex * rank + 0] = row;\n                for (let col = 1; col < rank; ++col) {\n                    outputIndices[startingIndex * rank + col] = 0;\n                }\n                outputValues[startingIndex] = defaultValue;\n            }\n        }\n        return [\n            outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n    const denseSize = util.sizeFromShape(inputShape);\n    const nnz = inputIndicesShape[0];\n    const outputRank = targetShape.length;\n    // Compute the output shape. Determine product of specified dimensions, and\n    // find the index of the unspecified one.\n    const outputShape = [];\n    let product = 1;\n    let unknownIndex = -1;\n    for (let d = 0; d < outputRank; ++d) {\n        const size = targetShape[d];\n        if (size === -1) {\n            if (unknownIndex !== -1) {\n                throw new Error(backend_util\n                    .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(unknownIndex, d));\n            }\n            unknownIndex = d;\n            outputShape.push(1);\n        }\n        else {\n            if (size < 0) {\n                throw new Error(backend_util.getSparseReshapeNegativeOutputDimErrorMessage(d, size));\n            }\n            product *= size;\n            outputShape.push(size);\n        }\n    }\n    if (unknownIndex !== -1) {\n        if (product <= 0) {\n            throw new Error(backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n        }\n        const missing = Math.trunc(denseSize / product);\n        if (product * missing !== denseSize) {\n            throw new Error(backend_util.getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape));\n        }\n        outputShape[unknownIndex] = missing;\n    }\n    const outputSize = util.sizeFromShape(outputShape);\n    if (outputSize !== denseSize) {\n        throw new Error(backend_util.getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape));\n    }\n    const inputRank = inputShape.length;\n    const inputStrides = [];\n    if (inputRank > 0) {\n        inputStrides[inputRank - 1] = 1;\n        for (let d = inputRank - 2; d >= 0; --d) {\n            inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n        }\n    }\n    const outputStrides = [];\n    if (outputRank > 0) {\n        outputStrides[outputRank - 1] = 1;\n        for (let d = outputRank - 2; d >= 0; --d) {\n            outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n        }\n    }\n    const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n    for (let i = 0; i < nnz; ++i) {\n        let id = 0;\n        for (let j = 0; j < inputRank; ++j) {\n            // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n            id += inputIndices[i * inputRank + j] * inputStrides[j];\n        }\n        for (let j = 0; j < outputRank; ++j) {\n            // newIndices is a 2d tensor with shape of [nnz, outputRank]\n            newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n            id %= outputStrides[j];\n        }\n    }\n    return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseSegmentReductionImpl(input, inputShape, inputDType, indices, segmentIds, isMean = false, defaultValue = 0) {\n    const numIndices = indices.length;\n    // Flatten the array to two dimensions\n    const inputFlat = [inputShape[0], input.length / inputShape[0]];\n    const numCol = inputFlat[1];\n    // Note that the current implementation assumes that segmentIds values are\n    // sorted.\n    const lastSegmentIdPlusOne = numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n    const outputRows = lastSegmentIdPlusOne;\n    if (outputRows < 0) {\n        throw new Error(backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n    }\n    const outputShape = inputShape.slice();\n    outputShape[0] = outputRows;\n    const outputLength = outputShape.reduce((product, value) => product * value, 1);\n    // Output array is initialized with the value 0 by default.\n    const output = util.getArrayFromDType(inputDType, outputLength);\n    // Note that we do not initialize the output buffer with a default value, so\n    // we need to explicitly set missing indices to the default value.\n    if (numIndices === 0) {\n        if (outputRows > 0) {\n            output.fill(defaultValue);\n        }\n        return [output, outputShape];\n    }\n    if (outputRows <= 0) {\n        throw new Error(backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n    }\n    let start = 0, end = 1;\n    // Index from which the output is not initialized.\n    let uninitializedIndex = 0;\n    let outIndex = segmentIds[start];\n    while (true) {\n        // We initialize nextIndex to 0 to avoid may be uninitialized warning\n        let nextIndex = 0;\n        if (end < numIndices) {\n            nextIndex = segmentIds[end];\n            if (outIndex === nextIndex) {\n                ++end;\n                continue;\n            }\n            // We have a new segment here.  Verify that the segment ids are growing.\n            if (outIndex >= nextIndex) {\n                throw new Error(backend_util\n                    .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n            }\n        }\n        if (outIndex < 0 || outIndex >= outputRows) {\n            throw new Error(backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(outIndex, outputRows));\n        }\n        // If there is a gap between two indices, we need to set that gap to the\n        // default value.\n        if (outIndex > uninitializedIndex) {\n            output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n        }\n        for (let i = start; i < end; ++i) {\n            const index = indices[i];\n            if (index < 0 || index >= inputFlat[0]) {\n                throw new Error(backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(i, indices[i], inputFlat[0]));\n            }\n            for (let j = 0; j < numCol; j++) {\n                output[outIndex * numCol + j] += input[index * numCol + j];\n            }\n        }\n        if (isMean) {\n            for (let j = 0; j < numCol; j++) {\n                output[outIndex * numCol + j] /= end - start;\n            }\n        }\n        start = end;\n        ++end;\n        uninitializedIndex = outIndex + 1;\n        outIndex = nextIndex;\n        if (end > numIndices) {\n            break;\n        }\n    }\n    // Fill the gap at the end with the default value.\n    if (uninitializedIndex < outputRows) {\n        output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n    }\n    return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\nexport const sqrtConfig = {\n    kernelName: Sqrt,\n    backendName: 'cpu',\n    kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n    const diff = a - b;\n    return diff * diff;\n}));\nexport const squaredDifference = binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\nexport const squaredDifferenceConfig = {\n    kernelName: SquaredDifference,\n    backendName: 'cpu',\n    kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function stridedSliceImpl(outShape, xBuf, strides, begin) {\n    const outBuf = buffer(outShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; i++) {\n        const loc = outBuf.indexToLoc(i);\n        const newLoc = new Array(loc.length);\n        for (let j = 0; j < newLoc.length; j++) {\n            newLoc[j] = loc[j] * strides[j] + begin[j];\n        }\n        outBuf.set(xBuf.get(...newLoc), ...loc);\n    }\n    return outBuf;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n    constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n        this.separator = util.encodeString(separator);\n        this.nGramWidths = nGramWidths;\n        this.leftPad = util.encodeString(leftPad);\n        this.rightPad = util.encodeString(rightPad);\n        this.padWidth = padWidth;\n        this.preserveShort = preserveShortSequences;\n    }\n    getPadWidth(nGramWidth) {\n        // Ngrams can be padded with either a fixed pad width or a dynamic pad\n        // width depending on the 'padWidth' arg, but in no case should the padding\n        // ever be wider than 'nGramWidth' - 1.\n        return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n    }\n    getNumNGrams(length, nGramWidth) {\n        const padWidth = this.getPadWidth(nGramWidth);\n        return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n    }\n    createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n        for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n            const padWidth = this.getPadWidth(nGramWidth);\n            const leftPadding = Math.max(0, padWidth - nGramIndex);\n            const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n            const numTokens = nGramWidth - (leftPadding + rightPadding);\n            const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n            // Calculate the total expected size of the nGram so we can reserve the\n            // correct amount of space in the string.\n            let nGramSize = 0;\n            // Size of the left padding.\n            nGramSize += leftPadding * this.leftPad.length;\n            // Size of the tokens.\n            for (let n = 0; n < numTokens; ++n) {\n                nGramSize += data[dataStartIndex + n].length;\n            }\n            // Size of the right padding.\n            nGramSize += rightPadding * this.rightPad.length;\n            // Size of the separators.\n            const numSeparators = leftPadding + rightPadding + numTokens - 1;\n            nGramSize += numSeparators * this.separator.length;\n            // Build the nGram.\n            output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n            const nGram = output[outputStartIndex + nGramIndex];\n            let nextNGramIndex = 0;\n            const appendToNGram = (str) => str.forEach((value) => nGram[nextNGramIndex++] = value);\n            for (let n = 0; n < leftPadding; ++n) {\n                appendToNGram(this.leftPad);\n                appendToNGram(this.separator);\n            }\n            // Only output first numTokens - 1 pairs of data and separator\n            for (let n = 0; n < numTokens - 1; ++n) {\n                appendToNGram(data[dataStartIndex + n]);\n                appendToNGram(this.separator);\n            }\n            // Handle case when there are no tokens or no right padding as these\n            // can result in consecutive separators.\n            if (numTokens > 0) {\n                // If we have tokens, then output last and then pair each separator\n                // with the right padding that follows, to ensure nGram ends either with\n                // the token or with the right pad.\n                appendToNGram(data[dataStartIndex + numTokens - 1]);\n                for (let n = 0; n < rightPadding; ++n) {\n                    appendToNGram(this.separator);\n                    appendToNGram(this.rightPad);\n                }\n            }\n            else {\n                // If we don't have tokens, then the last item inserted into the nGram\n                // has been the separator from the left padding loop above. Hence,\n                // output right pad and separator and make sure to finish with a\n                // padding, not a separator.\n                for (let n = 0; n < rightPadding - 1; ++n) {\n                    appendToNGram(this.rightPad);\n                    appendToNGram(this.separator);\n                }\n                appendToNGram(this.rightPad);\n            }\n        }\n    }\n    // Data and splits together form the definition of the ragged tensor,\n    // where data is 1 dimensional and contains the values of the tensor\n    // and splits denotes the indices at which each row starts.\n    compute(data, splits) {\n        // Validate that the splits are valid indices into data, only if there are\n        // splits specified.\n        const inputDataSize = data.length;\n        const splitsSize = splits.length;\n        if (splitsSize > 0) {\n            let prevSplit = splits[0];\n            if (prevSplit !== 0) {\n                throw new Error(`First split value must be 0, got ${prevSplit}`);\n            }\n            for (let i = 1; i < splitsSize; ++i) {\n                let validSplits = splits[i] >= prevSplit;\n                validSplits = validSplits && (splits[i] <= inputDataSize);\n                if (!validSplits) {\n                    throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n                }\n                prevSplit = splits[i];\n            }\n            if (prevSplit !== inputDataSize) {\n                throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n            }\n        }\n        const numBatchItems = splitsSize - 1;\n        const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n        // If there is no data or size, return an empty ragged tensor.\n        if (inputDataSize === 0 || splitsSize === 0) {\n            const empty = new Array(inputDataSize);\n            for (let i = 0; i <= numBatchItems; ++i) {\n                nGramsSplits[i] = 0;\n            }\n            return [empty, nGramsSplits];\n        }\n        nGramsSplits[0] = 0;\n        for (let i = 1; i <= numBatchItems; ++i) {\n            const length = splits[i] - splits[i - 1];\n            let numNGrams = 0;\n            this.nGramWidths.forEach((nGramWidth) => {\n                numNGrams += this.getNumNGrams(length, nGramWidth);\n            });\n            if (this.preserveShort && length > 0 && numNGrams === 0) {\n                numNGrams = 1;\n            }\n            nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n        }\n        const nGrams = new Array(nGramsSplits[numBatchItems]);\n        for (let i = 0; i < numBatchItems; ++i) {\n            const splitIndex = splits[i];\n            let outputStartIdx = nGramsSplits[i];\n            this.nGramWidths.forEach((nGramWidth) => {\n                const length = splits[i + 1] - splits[i];\n                const numNGrams = this.getNumNGrams(length, nGramWidth);\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n                outputStartIdx += numNGrams;\n            });\n            // If we're preserving short sequences, check to see if no sequence was\n            // generated by comparing the current output start idx to the original\n            // one (nGramSplitsdata). If no ngrams were generated, then they will\n            // be equal (since we increment outputStartIdx by numNGrams every\n            // time we create a set of ngrams.)\n            if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n                const dataLength = splits[i + 1] - splits[i];\n                // One legitimate reason to not have any ngrams when this.preserveShort\n                // is true is if the sequence itself is empty. In that case, move on.\n                if (dataLength === 0) {\n                    continue;\n                }\n                // We don't have to worry about dynamic padding sizes here: if padding\n                // was dynamic, every sequence would have had sufficient padding to\n                // generate at least one nGram.\n                const nGramWidth = dataLength + 2 * this.padWidth;\n                const numNGrams = 1;\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n            }\n        }\n        return [nGrams, nGramsSplits];\n    }\n}\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences)\n        .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction split(str, delimiters, skipEmpty, result) {\n    if (!str.length) {\n        return;\n    }\n    // When the delimiter is empty, the input is split into individual characters.\n    if (delimiters.length === 0) {\n        for (let i = 0; i < str.length; ++i) {\n            result.push(str.subarray(i, i + 1));\n        }\n        return;\n    }\n    // When there is one delimiter, the input is split only at that delimiter.\n    if (delimiters.length === 1) {\n        const delimiter = delimiters[0];\n        let f = str.indexOf(delimiter);\n        while (f !== -1) {\n            const token = str.subarray(0, f);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            str = str.subarray(f + 1);\n            f = str.indexOf(delimiter);\n        }\n        if (!skipEmpty || str.length !== 0) {\n            result.push(str);\n        }\n        return;\n    }\n    // When there are multiple delimiters, the input is split at every instance\n    // one of the delimiters appears.\n    let tokenStart = 0;\n    for (let i = 0; i < str.length + 1; i++) {\n        if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n            const token = str.subarray(tokenStart, i);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            tokenStart = i + 1;\n        }\n    }\n}\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n    const batchSize = input.length;\n    // Empty delimiter means split the input character by character.\n    const tokens = [];\n    let outputSize = 0;\n    let maxNumEntries = 0;\n    const numIndices = new Array(batchSize);\n    for (let i = 0; i < batchSize; ++i) {\n        const prevTokensLength = tokens.length;\n        split(input[i], delimiter, skipEmpty, tokens);\n        const nEntries = tokens.length - prevTokensLength;\n        numIndices[i] = nEntries;\n        outputSize += nEntries;\n        maxNumEntries = Math.max(maxNumEntries, nEntries);\n    }\n    const indices = util.getArrayFromDType('int32', outputSize * 2);\n    const values = new Array(outputSize);\n    const shape = [batchSize, maxNumEntries];\n    let c = 0;\n    for (let i = 0; i < batchSize; ++i) {\n        for (let j = 0; j < numIndices[i]; ++j) {\n            // indices is a 2d tensor with shape of [outputSize, 2]\n            indices[c * 2] = i;\n            indices[c * 2 + 1] = j;\n            values[c] = tokens[c];\n            ++c;\n        }\n    }\n    return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function stringToHashBucketFastImpl(input, numBuckets) {\n    const output = util.getArrayFromDType('int32', input.length);\n    for (let i = 0; i < input.length; ++i) {\n        output[i] =\n            util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n    }\n    return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const subImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal - bReal, imag: aImag - bImag };\n}));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\nexport const subConfig = {\n    kernelName: Sub,\n    backendName: 'cpu',\n    kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\nexport function tileImpl(xBuf, reps) {\n    const newShape = new Array(xBuf.rank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xBuf.shape[i] * reps[i];\n    }\n    const result = buffer(newShape, xBuf.dtype);\n    for (let i = 0; i < result.values.length; ++i) {\n        const newLoc = result.indexToLoc(i);\n        const originalLoc = new Array(xBuf.rank);\n        for (let j = 0; j < originalLoc.length; j++) {\n            originalLoc[j] = newLoc[j] % xBuf.shape[j];\n        }\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        result.values[i] = xBuf.values[originalIndex];\n    }\n    return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nconst comparePair = (a, b) => {\n    const valueDiff = b.value - a.value;\n    return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array, k, left = 0, right = array.length - 1) {\n    while (right > left) {\n        // Use select recursively to sample a smaller set of size s\n        // the arbitrary constants 600 and 0.5 are used in the original\n        // version to minimize execution time.\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const i = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n            const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n            select(array, k, newLeft, newRight);\n        }\n        // partition the elements between left and right around t\n        const t = array[k];\n        let i = left;\n        let j = right;\n        util.swap(array, left, k);\n        if (comparePair(array[right], t) > 0) {\n            util.swap(array, left, right);\n        }\n        while (i < j) {\n            util.swap(array, i, j);\n            i++;\n            j--;\n            while (comparePair(array[i], t) < 0) {\n                i = i + 1;\n            }\n            while (comparePair(array[j], t) > 0) {\n                j = j - 1;\n            }\n        }\n        if (comparePair(array[left], t) === 0) {\n            util.swap(array, left, j);\n        }\n        else {\n            j = j + 1;\n            util.swap(array, j, right);\n        }\n        // Adjust left and right towards the boundaries of the subset\n        // containing the (k - left + 1)th smallest element.\n        if (j <= k) {\n            left = j + 1;\n        }\n        if (k <= j) {\n            right = j - 1;\n        }\n    }\n}\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        let valAndInd = new Array(vals.length);\n        vals.forEach((value, index) => valAndInd[index] = { value, index });\n        if (k < valAndInd.length) {\n            select(valAndInd, k);\n            valAndInd = valAndInd.slice(0, k);\n        }\n        if (sorted) {\n            valAndInd.sort(comparePair);\n        }\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        buffer(outputShape, xDtype, allTopKVals),\n        buffer(outputShape, 'int32', allTopKIndices)\n    ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n    // Normalize and validate axis.\n    const $axis = util.parseAxisParam(axis, shape)[0];\n    // Calculate the new shape that is suitable for extracting data along the\n    // given axis.\n    //\n    // The rank is 3.\n    // The size of the 1st dimension is the size of all the axes < the given axis.\n    // The size of the 2nd dimension is the same as the size of the given axis.\n    // The size of the 3rd dimension is the size of all the axes > the given axis.\n    //\n    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n    // newShape would be: [2*3, 5, 4].\n    //\n    // Note that this is not the final output shape. This will be the shape for an\n    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n    // values along the given axis. To demonstrate how it works, consider the\n    // following example:\n    //\n    // Input: a 3D tensor, with shape [1, 2, 3]\n    // [\n    //   [\n    //      [1,2,3],\n    //      [4,5,6]\n    //   ]\n    // ]\n    // Axis: 2 (the last axis).\n    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n    //\n    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n    // 1*2. The re-shaped data would look like:\n    //\n    // [\n    //   [\n    //     [1], [2], [3]\n    //   ],\n    //   [\n    //     [4], [5], [6]\n    //   ]\n    // ]\n    //\n    // Then, we can construct a 3-level nested loop by the following dimension\n    // order to extract the values along the axis (dimension1):\n    // i: dimension1       // 0,1,2 (newShape[1])\n    //   m: dimension0     // 0,1   (newShape[0])\n    //     n: dimension2   // 0     (newShape[2])\n    //\n    //                       m, i, n\n    //                      ---------\n    // Iteration 0: data at [0, 0, 0] => \"1\"\n    // Iteration 1: data at [1, 0, 0] => \"4\"\n    // We got [1,4].\n    // Iteration 2: data at [0, 1, 0] => \"2\"\n    // Iteration 3: data at [1, 1, 0] => \"5\"\n    // We got [2,5].\n    // Iteration 4: data at [0, 2, 0] => \"3\"\n    // Iteration 5: data at [1, 2, 0] => \"6\"\n    // We got [3,6].\n    const newShape = [1, shape[0], 1];\n    for (let i = 0; i < $axis; i++) {\n        newShape[0] *= shape[i];\n    }\n    newShape[1] = shape[$axis];\n    for (let i = $axis + 1; i < shape.length; i++) {\n        newShape[2] *= shape[i];\n    }\n    // A map from unique elements (their string representations) to their values\n    // in \"indices\" (below).\n    const uniqueElements = {};\n    // The indices of each unique element in the original tensor along the given\n    // axis. It is 1D and has the same size as the given axis.\n    const indices = new Int32Array(shape[$axis]);\n    // Create a buffer so we can easily extract value at a given location.\n    const inputBuffer = new TensorBuffer(newShape, dtype, values);\n    // The indices along the given axis that have unique elements. This is a\n    // de-duped version of \"indices\" above.\n    const uniqueIndices = [];\n    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n    for (let i = 0; i < shape[$axis]; i++) {\n        // Extract values along the axis.\n        let element;\n        if (is1DTensor) {\n            // Fast path for 1D tensor input.\n            element = values[i].toString();\n        }\n        else {\n            const axisValues = [];\n            for (let m = 0; m < newShape[0]; m++) {\n                for (let n = 0; n < newShape[2]; n++) {\n                    axisValues.push(inputBuffer.get(m, i, n));\n                }\n            }\n            element = axisValues.join(',');\n        }\n        // Dedup and update various indices.\n        if (uniqueElements[element] !== undefined) {\n            indices[i] = uniqueElements[element];\n        }\n        else {\n            const uniqueIndex = Object.keys(uniqueElements).length;\n            uniqueElements[element] = uniqueIndex;\n            indices[i] = uniqueIndex;\n            uniqueIndices.push(i);\n        }\n    }\n    // Now we know where each of the unique elements are located along the axis\n    // (uniqueIndices). Extract them from input buffer and store them in the\n    // output buffer.\n    const outputTmpShape = newShape.slice();\n    outputTmpShape[1] = Object.keys(uniqueElements).length;\n    const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n    uniqueIndices.forEach((uniqueElementIndex, i) => {\n        for (let m = 0; m < newShape[0]; m++) {\n            for (let n = 0; n < newShape[2]; n++) {\n                outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n            }\n        }\n    });\n    // The output shape can be calculated from the input shape with the size of\n    // the given axis replaced by the number of unique elements along that axis.\n    const outputShape = shape.slice();\n    outputShape[$axis] = outputTmpShape[1];\n    return {\n        outputValues: outputBuffer.values,\n        outputShape,\n        indices,\n    };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Shared functionality among backends.\nexport { simpleAbsImpl } from './kernels/Abs';\nexport { addImpl } from './kernels/Add';\nexport { bincountImpl, bincountReduceImpl } from './kernels/Bincount_impl';\nexport { ceilImpl } from './kernels/Ceil';\nexport { concatImpl } from './kernels/Concat_impl';\nexport { equalImpl } from './kernels/Equal';\nexport { expImpl } from './kernels/Exp';\nexport { expm1Impl } from './kernels/Expm1';\nexport { floorImpl } from './kernels/Floor';\nexport { gatherNdImpl } from './kernels/GatherNd_Impl';\nexport { gatherV2Impl } from './kernels/GatherV2_impl';\nexport { greaterImpl } from './kernels/Greater';\nexport { greaterEqualImpl } from './kernels/GreaterEqual';\nexport { lessImpl } from './kernels/Less';\nexport { lessEqualImpl } from './kernels/LessEqual';\nexport { linSpaceImpl } from './kernels/LinSpace_impl';\nexport { logImpl } from './kernels/Log';\nexport { maxImpl } from './kernels/Max_impl';\nexport { maximumImpl } from './kernels/Maximum';\nexport { minimumImpl } from './kernels/Minimum';\nexport { multiplyImpl } from './kernels/Multiply';\nexport { negImpl } from './kernels/Neg';\nexport { notEqualImpl } from './kernels/NotEqual';\nexport { prodImpl } from './kernels/Prod';\nexport { rangeImpl } from './kernels/Range_impl';\nexport { rsqrtImpl } from './kernels/Rsqrt';\nexport { sigmoidImpl } from './kernels/Sigmoid';\nexport { sliceImpl } from './kernels/Slice';\nexport { sparseFillEmptyRowsImpl } from './kernels/SparseFillEmptyRows_impl';\nexport { sparseReshapeImpl } from './kernels/SparseReshape_impl';\nexport { sparseSegmentReductionImpl } from './kernels/SparseSegmentReduction_impl';\nexport { sqrtImpl } from './kernels/Sqrt';\nexport { squaredDifferenceImpl } from './kernels/SquaredDifference';\nexport { stridedSliceImpl } from './kernels/StridedSlice_impl';\nexport { stringNGramsImpl } from './kernels/StringNGrams_impl';\nexport { stringSplitImpl } from './kernels/StringSplit_impl';\nexport { stringToHashBucketFastImpl } from './kernels/StringToHashBucketFast_impl';\nexport { subImpl } from './kernels/Sub';\nexport { tileImpl } from './kernels/Tile_impl';\nexport { topKImpl } from './kernels/TopK_impl';\nexport { transposeImpl } from './kernels/Transpose_impl';\nexport { uniqueImpl } from './kernels/Unique_impl';\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\nconst { addImpl: addImplCPU, bincountImpl: bincountImplCPU, bincountReduceImpl: bincountReduceImplCPU, ceilImpl: ceilImplCPU, concatImpl: concatImplCPU, equalImpl: equalImplCPU, expImpl: expImplCPU, expm1Impl: expm1ImplCPU, floorImpl: floorImplCPU, gatherNdImpl: gatherNdImplCPU, gatherV2Impl: gatherV2ImplCPU, greaterImpl: greaterImplCPU, greaterEqualImpl: greaterEqualImplCPU, lessImpl: lessImplCPU, lessEqualImpl: lessEqualImplCPU, linSpaceImpl: linSpaceImplCPU, logImpl: logImplCPU, maxImpl: maxImplCPU, maximumImpl: maximumImplCPU, minimumImpl: minimumImplCPU, multiplyImpl: multiplyImplCPU, negImpl: negImplCPU, notEqualImpl: notEqualImplCPU, prodImpl: prodImplCPU, rangeImpl: rangeImplCPU, rsqrtImpl: rsqrtImplCPU, sigmoidImpl: sigmoidImplCPU, simpleAbsImpl: simpleAbsImplCPU, sliceImpl: sliceImplCPU, sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU, sparseReshapeImpl: sparseReshapeImplCPU, sparseSegmentReductionImpl: sparseSegmentReductionImplCPU, sqrtImpl: sqrtImplCPU, stridedSliceImpl: stridedSliceImplCPU, stringNGramsImpl: stringNGramsImplCPU, stringSplitImpl: stringSplitImplCPU, stringToHashBucketFastImpl: stringToHashBucketFastImplCPU, subImpl: subImplCPU, tileImpl: tileImplCPU, topKImpl: topKImplCPU, transposeImpl: transposeImplCPU, uniqueImpl: uniqueImplCPU, } = shared;\nexport { addImplCPU, bincountImplCPU, bincountReduceImplCPU, ceilImplCPU, concatImplCPU, equalImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, gatherNdImplCPU, gatherV2ImplCPU, greaterEqualImplCPU, greaterImplCPU, lessEqualImplCPU, lessImplCPU, linSpaceImplCPU, logImplCPU, maxImplCPU, maximumImplCPU, minimumImplCPU, multiplyImplCPU, negImplCPU, notEqualImplCPU, prodImplCPU, sigmoidImplCPU, simpleAbsImplCPU, sliceImplCPU, sparseFillEmptyRowsImplCPU, sparseReshapeImplCPU, sparseSegmentReductionImplCPU, sqrtImplCPU, stridedSliceImplCPU, stringNGramsImplCPU, stringSplitImplCPU, stringToHashBucketFastImplCPU, subImplCPU, rangeImplCPU, rsqrtImplCPU, tileImplCPU, topKImplCPU, transposeImplCPU, uniqueImplCPU, };\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport function getVecChannels(name, rank) {\n    return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\nexport function getChannels(name, rank) {\n    if (rank === 1) {\n        return [name];\n    }\n    return getVecChannels(name, rank);\n}\nexport function getSourceCoords(rank, dims) {\n    if (rank === 1) {\n        return 'rc';\n    }\n    let coords = '';\n    for (let i = 0; i < rank; i++) {\n        coords += dims[i];\n        if (i < rank - 1) {\n            coords += ',';\n        }\n    }\n    return coords;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        // Only input / output 3D tensors.\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        if (this.rank === 0) {\n            this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n        }\n        else {\n            const channels = getChannels('rc', this.rank);\n            const dtype = getCoordsDataType(this.rank);\n            const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n            const setup = this.getSetup(channels);\n            const output = this.getOutput(channels);\n            this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n        }\n    }\n    getSourceCoordsArr(dims) {\n        const coords = [];\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n                for (let d = 2; d < this.rank; d++) {\n                    coord = `${dims[dims.length - 1 - d]},` + coord;\n                }\n                coords.push(coord);\n            }\n        }\n        return coords;\n    }\n    getOutOfBoundsCondition(dims) {\n        if (this.rank === 1) {\n            return `rc > ${this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n        }\n        let cond = '';\n        for (let i = this.rank - 2; i < this.rank; i++) {\n            cond += `${dims[i]} >= ${this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n            if (i < this.rank - 1) {\n                cond += '||';\n            }\n        }\n        return cond;\n    }\n    getSetup(dims) {\n        if (this.rank === 1) {\n            return '';\n        }\n        const innerDims = dims.slice(-2);\n        const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n            this.outputShape[this.rank - 1];\n        const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n            this.outputShape[this.rank - 2];\n        return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n    }\n    getOutput(dims) {\n        const sourceCoords = this.getSourceCoordsArr(dims);\n        if (this.rank === 1) {\n            const outShape = this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n            return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n        }\n        return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport class ReshapePackedProgram {\n    constructor(outputShape, inputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [{ name: 'inputShape', type: 'ivec3' }];\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        let mainLoop = ``;\n        for (let i = 0; i < 4; i++) {\n            let thisRC = `thisRC = rc;`;\n            if (i % 2 === 1) {\n                thisRC += `thisRC.z += 1;`;\n            }\n            if (i > 1) {\n                thisRC += `thisRC.y += 1;`;\n            }\n            mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n        }\n        this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n            shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\nfunction getReshapedInputCoords(shape, enableShapeUniforms) {\n    const coordsFromIndexSnippet = enableShapeUniforms ?\n        shader_util.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], 'inputShape') :\n        shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture } from './gpgpu_util';\nimport { getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureUsage } from './tex_util';\nexport class TextureManager {\n    constructor(gpgpu) {\n        this.gpgpu = gpgpu;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this._numBytesAllocated = 0;\n        this._numBytesFree = 0; // How many bytes that have been allocated\n        // are available for reuse.\n        this.freeTextures = {};\n        this.logEnabled = false;\n        this.usedTextures = {};\n    }\n    acquireTexture(shapeRC, usage, isPacked) {\n        const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n        const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        if (!(shapeKey in this.usedTextures)) {\n            this.usedTextures[shapeKey] = [];\n        }\n        const texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n        if (this.freeTextures[shapeKey].length > 0) {\n            this.numFreeTextures--;\n            this.numUsedTextures++;\n            this._numBytesFree -= texBytes;\n            this.log();\n            const newTexture = this.freeTextures[shapeKey].shift();\n            this.usedTextures[shapeKey].push(newTexture);\n            return newTexture;\n        }\n        let newTexture;\n        if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n            newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n            newTexture =\n                this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n            newTexture =\n                this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n            newTexture =\n                this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n            newTexture =\n                this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        this.usedTextures[shapeKey].push(newTexture);\n        this.numUsedTextures++;\n        this._numBytesAllocated += texBytes;\n        this.log();\n        return newTexture;\n    }\n    releaseTexture(texture, shape, logicalTexType, isPacked) {\n        if (this.freeTextures == null) {\n            // Already disposed.\n            return;\n        }\n        const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n        const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        const texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n        const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n        if (deleteTexThreshold !== -1 &&\n            this._numBytesAllocated > deleteTexThreshold) {\n            this.gpgpu.deleteMatrixTexture(texture.texture);\n            this._numBytesAllocated -= texBytes;\n        }\n        else {\n            this.freeTextures[shapeKey].push(texture);\n            this.numFreeTextures++;\n            this._numBytesFree += texBytes;\n        }\n        this.numUsedTextures--;\n        const texList = this.usedTextures[shapeKey];\n        const texIndex = texList.indexOf(texture);\n        if (texIndex < 0) {\n            throw new Error('Cannot release a texture that was never provided by this ' +\n                'texture manager');\n        }\n        texList.splice(texIndex, 1);\n        this.log();\n    }\n    log() {\n        if (!this.logEnabled) {\n            return;\n        }\n        const total = this.numFreeTextures + this.numUsedTextures;\n        console.log('Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);\n        const freeRatio = this._numBytesFree / this._numBytesAllocated;\n        console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n        console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * freeRatio)}%)`);\n    }\n    get numBytesAllocated() {\n        return this._numBytesAllocated;\n    }\n    get numBytesFree() {\n        return this._numBytesFree;\n    }\n    getNumUsedTextures() {\n        return this.numUsedTextures;\n    }\n    getNumFreeTextures() {\n        return this.numFreeTextures;\n    }\n    dispose() {\n        if (this.freeTextures == null) {\n            // Already disposed.\n            return;\n        }\n        for (const texShape in this.freeTextures) {\n            this.freeTextures[texShape].forEach(tex => {\n                this.gpgpu.deleteMatrixTexture(tex.texture);\n            });\n        }\n        for (const texShape in this.usedTextures) {\n            this.usedTextures[texShape].forEach(tex => {\n                this.gpgpu.deleteMatrixTexture(tex.texture);\n            });\n        }\n        this.freeTextures = null;\n        this.usedTextures = null;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this._numBytesAllocated = 0;\n        this._numBytesFree = 0;\n    }\n}\nfunction numBytesForInternalFormat(gl, internalFormat) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    if (internalFormat === glany.R32F) {\n        return 4;\n    }\n    else if (internalFormat === glany.R16F) {\n        return 2;\n    }\n    else if (internalFormat === glany.RGBA32F) {\n        return 16;\n    }\n    else if (internalFormat === gl.RGBA) {\n        return 16;\n    }\n    else if (internalFormat === glany.RGBA16F) {\n        return 8;\n    }\n    else if (internalFormat === glany.RGBA8) {\n        return 4;\n    }\n    throw new Error(`Unknown internal format ${internalFormat}`);\n}\nexport function computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {\n    // It is not possible to infer packed status from the texture type because\n    // depending on the textureConfig, different  texture types may resolve to the\n    // same internal format (e.g. in WebGL1, the internal format for\n    // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n    // explicitly.\n    const internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n    let numElements;\n    if (isPacked) {\n        const [packedWidth, packedHeight] = getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n        numElements = packedWidth * packedHeight;\n    }\n    else {\n        const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n        numElements = width * height;\n    }\n    const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n    return numElements * bytesPerElement;\n}\nfunction internalFormatForPhysicalTexType(physicalTexType, textureConfig) {\n    switch (physicalTexType) {\n        case PhysicalTextureType.PACKED_2X2_FLOAT32:\n            return getInternalFormatForPackedMatrixTexture(textureConfig);\n        case PhysicalTextureType.PACKED_2X2_FLOAT16:\n            return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n        case PhysicalTextureType.UNPACKED_FLOAT32:\n            return getInternalFormatForFloat32MatrixTexture(textureConfig);\n        case PhysicalTextureType.UNPACKED_FLOAT16:\n            return getInternalFormatForFloat16MatrixTexture(textureConfig);\n        case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n            return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n        default:\n            throw new Error(`Unknown physical texture type ${physicalTexType}`);\n    }\n}\nfunction getPhysicalTextureForRendering(isPacked) {\n    if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n        if (isPacked) {\n            return PhysicalTextureType.PACKED_2X2_FLOAT32;\n        }\n        return PhysicalTextureType.UNPACKED_FLOAT32;\n    }\n    if (isPacked) {\n        return PhysicalTextureType.PACKED_2X2_FLOAT16;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT16;\n}\nfunction getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {\n    if (logicalTexType === TextureUsage.UPLOAD) {\n        return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n        return getPhysicalTextureForRendering(isPacked);\n    }\n    else if (logicalTexType === TextureUsage.DOWNLOAD ||\n        logicalTexType === TextureUsage.PIXELS) {\n        return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n    }\n    throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\nfunction getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {\n    return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class UnaryOpProgram {\n    constructor(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n    }\n}\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\nexport const LINEAR = `return x;`;\nexport const ABS = `return abs(x);`;\nexport function STEP(alpha = 0.0) {\n    return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nexport const CLONE = 'return x;';\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport const LINEAR = `return x;`;\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\nexport class UnaryOpPackedProgram {\n    constructor(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = aShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels, getSourceCoords } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class UnpackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = false;\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const rank = outputShape.length;\n        const channels = getChannels('rc', rank);\n        const dtype = getCoordsDataType(rank);\n        const sourceCoords = getSourceCoords(rank, channels);\n        const innerDims = channels.slice(-2);\n        const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n        this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n    constructor(gpuResource) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        // record the last manual GL Flush time.\n        this.lastGlFlushTime = 0;\n        this.warnedAboutMemory = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        let newGPGPU;\n        if (gpuResource != null) {\n            if (gpuResource instanceof GPGPUContext) {\n                newGPGPU = gpuResource;\n            }\n            else {\n                const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n                newGPGPU = new GPGPUContext(gl);\n            }\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n        }\n        else {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            newGPGPU = new GPGPUContext(gl);\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpuCreatedLocally = true;\n        }\n        this.gpgpu = newGPGPU;\n        this.canvas = this.gpgpu.gl.canvas;\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    nextDataId() {\n        return MathBackendWebGL.nextDataId++;\n    }\n    numDataIds() {\n        return this.texData.numDataIds() - this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = { id: this.nextDataId() };\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1 });\n        return dataId;\n    }\n    /** Return refCount of a `TensorData`. */\n    refCount(dataId) {\n        if (this.texData.has(dataId)) {\n            const tensorData = this.texData.get(dataId);\n            return tensorData.refCount;\n        }\n        return 0;\n    }\n    /** Increase refCount of a `TextureData`. */\n    incRef(dataId) {\n        const texData = this.texData.get(dataId);\n        texData.refCount++;\n    }\n    /** Decrease refCount of a `TextureData`. */\n    decRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            texData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount });\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        this.disposeData(tensorInfo.dataId);\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensorInfos, slice, shape, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensorInfos, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (env().getBool('DEBUG')) {\n            // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n            // For performance reason, only check it for debugging. In production,\n            // it doesn't handle this use case anyway, so behavior is not changed.\n            if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n                env().getNumber('WEBGL_VERSION') === 2) {\n                throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                    `WEBGL_VERSION=2 not yet supported.`);\n            }\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([\n                this.read(complexTensorInfos.real.dataId),\n                this.read(complexTensorInfos.imag.dataId)\n            ]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n        }\n        if (buffer != null) {\n            const gl = this.gpgpu.gl;\n            webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            if (this.disposeData(dataId)) {\n                engine().removeDataId(dataId, this);\n            }\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    /**\n     * Read tensor to a new texture that is densely packed for ease of use.\n     * @param dataId The source tensor.\n     * @param options\n     *     customTexShape: Optional. If set, will use the user defined texture\n     *     shape to create the texture.\n     */\n    readToGPU(dataId, options = {}) {\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, isPacked, texture } = texData;\n        if (dtype === 'complex64') {\n            throw new Error('Does not support reading texture for complex64 dtype.');\n        }\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const gpuResouorce = this.readToGPU(res, options);\n            this.disposeIntermediateTensorInfo(res);\n            return gpuResouorce;\n        }\n        if (texture == null) {\n            if (values != null) {\n                throw new Error('Data is not on GPU but on CPU.');\n            }\n            else {\n                throw new Error('There is no data on GPU or CPU.');\n            }\n        }\n        // Decode the texture so that it is stored densely (using four channels).\n        const tmpTarget = this.decode(dataId, options.customTexShape);\n        // Make engine track this tensor, so that we can dispose it later.\n        const tensorRef = engine().makeTensorFromDataId(tmpTarget.dataId, tmpTarget.shape, tmpTarget.dtype);\n        const tmpData = this.texData.get(tmpTarget.dataId);\n        return Object.assign({ tensorRef }, tmpData.texture);\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, decodedData);\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeIntermediateTensorInfo(tmpTarget);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeIntermediateTensorInfo(output);\n        return vals;\n    }\n    timerAvailable() {\n        return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n    }\n    time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        return (async () => {\n            if (env()\n                .getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n                const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n                res['kernelMs'] = util.sum(kernelMs);\n                res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                    .map(d => `${d.name}: ${d.ms}`)\n                    .join(', ');\n            }\n            else {\n                res['kernelMs'] = {\n                    error: 'WebGL query timers are not supported in this environment.'\n                };\n            }\n            this.uploadWaitMs = 0;\n            this.downloadWaitMs = 0;\n            return res;\n        })();\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    /**\n     * Decrease the RefCount on the dataId and dispose the memory if the dataId\n     * has 0 refCount. If there are pending read on the data, the disposal would\n     * added to the pending delete queue. Return true if the dataId is removed\n     * from backend or the backend does not contain the dataId, false if the\n     * dataId is not removed. Memory may or may not be released even when dataId\n     * is removed, which also depends on dataRefCount, see `releaseGPU`.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n    disposeData(dataId, force = false) {\n        if (this.pendingDisposal.has(dataId)) {\n            return false;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return true;\n        }\n        // if force flag is set, change refCount to 0, this would ensure disposal\n        // when added to the pendingDisposal queue. Memory may or may not be\n        // released, which also depends on dataRefCount, see `releaseGPU`.\n        if (force) {\n            this.texData.get(dataId).refCount = 0;\n        }\n        else {\n            this.texData.get(dataId).refCount--;\n        }\n        if (!force && this.texData.get(dataId).refCount > 0) {\n            return false;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return false;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensorInfos } = this.texData.get(dataId);\n        if (complexTensorInfos != null) {\n            this.disposeData(complexTensorInfos.real.dataId, force);\n            this.disposeData(complexTensorInfos.imag.dataId, force);\n        }\n        this.texData.delete(dataId);\n        return true;\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture.texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        return env().getBool('WEBGL_CPU_FORWARD') &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        const outInfo = this.compileAndRun(program, [x], dtype);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    // TODO(msoulanille) remove this once the backend has been modularized\n    // a copy is needed here to break a circular dependency.\n    // Also remove the op from unary_op.\n    abs(x) {\n        // TODO: handle cases when x is complex.\n        if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n            const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n            return this.makeOutput(x.shape, x.dtype, outValues);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        const outInfo = this.compileAndRun(program, [x]);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    makeTensorInfo(shape, dtype, values) {\n        let dataId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            dataId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            dataId = this.write(values, shape, dtype);\n        }\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype, values) {\n        const { dataId } = this.makeTensorInfo(shape, dtype, values);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customUniformValues */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const customValues = [input3DShape];\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId, customTexShape) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        if (customTexShape != null) {\n            const size = util.sizeFromShape(shape);\n            const texSize = customTexShape[0] * customTexShape[1] * 4;\n            util.assert(size <= texSize, () => 'customTexShape is too small. ' +\n                'Row * Column * 4 should be equal or larger than the ' +\n                'size of the tensor data.');\n        }\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const customValues = [customTexShape != null ? customTexShape :\n                tex_util.getDenseTexShape(shapeAs3D)];\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false, customTexShape) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = customTexShape != null ?\n                customTexShape :\n                tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            this.uploadToGPU(input.dataId);\n            if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n        dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n        // Manually GL flush requested\n        if (glFlushThreshold > 0) {\n            const time = util.now();\n            if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n                this.gpgpu.gl.flush();\n                this.lastGlFlushTime = time;\n            }\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeIntermediateTensorInfo(output);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n        return outInfo;\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            // This texShape may not be the final texture shape. For packed or dense\n            // textures, the texShape will be changed when textures are created.\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n            // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n            // need to make sure the upload uses the same packed size\n            if (isPacked || !isByteArray) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n            }\n            if (isPacked) {\n                program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n            }\n            else {\n                program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n            }\n            // TexShape for float array needs to be the original shape, which byte\n            // array needs to be packed size. This allow the data upload shape to be\n            // matched with texture creation logic.\n            const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n            const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n            const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n            if (isByteArray) {\n                tempDenseInputTexData.usage = TextureUsage.PIXELS;\n            }\n            else {\n                tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n            }\n            tempDenseInputTexData.texShape = tempDenseInputTexShape;\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            const customValues = [[height, width]];\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texture = outputTexData.texture;\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n            this.texData.delete(encodedOutputTarget.dataId);\n            // Once uploaded, don't store the values on cpu.\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n}\nMathBackendWebGL.nextDataId = 0;\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\nexport { MathBackendWebGL } from './backend_webgl';\nexport { setWebGLContext } from './canvas_util';\nexport { GPGPUContext } from './gpgpu_context';\n// WebGL specific utils.\nexport { gpgpu_util, webgl_util };\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat() {\n    env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// base.ts is the webgl backend without auto kernel registration.\nimport { device_util, registerBackend } from '@tensorflow/tfjs-core';\nimport { MathBackendWebGL } from './backend_webgl';\nexport { version as version_webgl } from './version';\nif (device_util.isBrowser()) {\n    registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n// Export webgl utilities\nexport * from './webgl';\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport { forceHalfFloat } from './webgl';\nexport const webgl = { forceHalfFloat };\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram {\n    constructor(op, aShape, bShape) {\n        this.variableNames = ['A', 'B'];\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport const CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\nexport class BinaryOpPackedProgram {\n    constructor(op, aShape, bShape, checkOutOfBounds = false) {\n        this.variableNames = ['A', 'B'];\n        this.supportsBroadcasting = true;\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const rank = this.outputShape.length;\n        this.enableShapeUniforms = useShapeUniforms(rank);\n        let checkOutOfBoundsString = '';\n        if (checkOutOfBounds) {\n            if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n                checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n            }\n            else {\n                const dtype = getCoordsDataType(rank);\n                checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n                if (rank === 1) {\n                    if (this.enableShapeUniforms) {\n                        checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n                    }\n                    else {\n                        checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n                    }\n                }\n                else {\n                    const channels = getChannels('coords', rank);\n                    if (this.enableShapeUniforms) {\n                        checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n                    }\n                    else {\n                        checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n                    }\n                }\n            }\n        }\n        this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity } from '@tensorflow/tfjs-core';\nexport function identity(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    backend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };\n}\nexport const identityConfig = {\n    kernelName: Identity,\n    backendName: 'webgl',\n    kernelFunc: identity\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(args) {\n    const { inputs, backend } = args;\n    const { real, imag } = inputs;\n    const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n    const complex = backend.texData.get(complexInfo.dataId);\n    const realTensorInfo = identity({ inputs: { x: real }, backend });\n    const imagTensorInfo = identity({ inputs: { x: imag }, backend });\n    complex.complexTensorInfos = { real: realTensorInfo, imag: imagTensorInfo };\n    return complexInfo;\n}\nexport const complexConfig = {\n    kernelName: Complex,\n    backendName: 'webgl',\n    kernelFunc: complex\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nexport function leakyRelu(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { alpha } = attrs;\n    const $alpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(alpha, 'float32'));\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n        new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n    const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n    backend.disposeIntermediateTensorInfo($alpha);\n    return result;\n}\nexport const leakyReluConfig = {\n    kernelName: LeakyRelu,\n    backendName: 'webgl',\n    kernelFunc: leakyRelu\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Prelu } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nexport function prelu(args) {\n    const { inputs, backend } = args;\n    const { x, alpha } = inputs;\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n        new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n    return backend.runWebGLProgram(program, [x, alpha], 'float32');\n}\nexport const preluConfig = {\n    kernelName: Prelu,\n    backendName: 'webgl',\n    kernelFunc: prelu\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { complex } from '../kernels/Complex';\nimport { LEAKYRELU, LEAKYRELU_PACKED } from '../kernels/LeakyRelu';\nimport { PRELU, PRELU_PACKED } from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc({ opSnippet, packedOpSnippet, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { x } = inputs;\n        const webglBackend = backend;\n        const $dtype = dtype || x.dtype;\n        if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n            const xData = webglBackend.texData.get(x.dataId);\n            const outValues = cpuKernelImpl(xData.values, $dtype);\n            return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, opSnippet);\n        }\n        return webglBackend.runWebGLProgram(program, [x], $dtype);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({ opSnippet, packedOpSnippet, checkOutOfBounds = false, supportsComplex = false, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const webglBackend = backend;\n        if (supportsComplex && a.dtype === 'complex64') {\n            const aData = webglBackend.texData.get(a.dataId);\n            const bData = webglBackend.texData.get(b.dataId);\n            const [real, imag] = [\n                [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n                [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n            ].map(complexParts => {\n                const [aPart, bPart] = complexParts;\n                const aHandle = {\n                    dataId: aPart.dataId,\n                    dtype: aPart.dtype,\n                    shape: a.shape\n                };\n                const bHandle = {\n                    dataId: bPart.dataId,\n                    dtype: bPart.dtype,\n                    shape: b.shape\n                };\n                const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n                return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n            });\n            const complexOutput = complex({ inputs: { real, imag }, backend: webglBackend });\n            webglBackend.disposeIntermediateTensorInfo(real);\n            webglBackend.disposeIntermediateTensorInfo(imag);\n            // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n            return complexOutput;\n        }\n        const $dtype = dtype || upcastType(a.dtype, b.dtype);\n        if ((a.dtype === 'string' || b.dtype === 'string' ||\n            webglBackend.shouldExecuteOnCPU([a, b])) &&\n            cpuKernelImpl != null) {\n            const aVals = webglBackend.texData.get(a.dataId).values;\n            const bVals = webglBackend.texData.get(b.dataId).values;\n            const decodedAVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(aVals) :\n                aVals;\n            const decodedBVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(bVals) :\n                bVals;\n            const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n            const out = webglBackend.makeTensorInfo(outShape, $dtype);\n            const outData = webglBackend.texData.get(out.dataId);\n            outData.values = outValues;\n            return out;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n            packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n        }\n        else {\n            program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        }\n        return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n    };\n}\nexport function mapActivationToShaderProgram(activation, packed = false) {\n    if (activation === 'linear') {\n        if (packed) {\n            return unary_packed_op.LINEAR;\n        }\n        return unary_op.LINEAR;\n    }\n    else if (activation === 'relu') {\n        if (packed) {\n            return unary_packed_op.RELU;\n        }\n        return unary_op.RELU;\n    }\n    else if (activation === 'elu') {\n        if (packed) {\n            return unary_packed_op.ELU;\n        }\n        return unary_op.ELU;\n    }\n    else if (activation === 'relu6') {\n        if (packed) {\n            return unary_packed_op.RELU6;\n        }\n        return unary_op.RELU6;\n    }\n    else if (activation === 'prelu') {\n        if (packed) {\n            return PRELU_PACKED;\n        }\n        return PRELU;\n    }\n    else if (activation === 'leakyrelu') {\n        if (packed) {\n            return LEAKYRELU_PACKED;\n        }\n        return LEAKYRELU;\n    }\n    else if (activation === 'sigmoid') {\n        if (packed) {\n            return unary_packed_op.SIGMOID;\n        }\n        return unary_op.SIGMOID;\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class MatMulPackedProgram {\n    constructor(aShape, bShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation = null, hasPreluActivation = false, hasLeakyreluActivation = false) {\n        this.variableNames = ['matrixA', 'matrixB'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const sharedDim = transposeA ? aShape[1] : aShape[2];\n        const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n        const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n        const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n        const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n        const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyreluActivation) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        let batchASnippet = 'rc.x';\n        let batchBSnippet = 'rc.x';\n        if (aShape[0] < bShape[0]) {\n            batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;\n        }\n        else if (bShape[0] < aShape[0]) {\n            batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;\n        }\n        this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          int batchA = ${batchASnippet};\n          int batchB = ${batchBSnippet};\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n    REAL: 'return areal * breal - aimag * bimag;',\n    IMAG: 'return areal * bimag + aimag * breal;'\n};\nexport class BinaryOpComplexProgram {\n    constructor(op, aShape, bShape) {\n        this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, Multiply } from '@tensorflow/tfjs-core';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from '../binaryop_complex_gpu';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { multiplyImplCPU as cpuMultiply } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nconst MUL = 'return a * b;';\nexport function multiply(args) {\n    const { inputs, backend } = args;\n    const { a, b } = inputs;\n    const dtype = backend_util.upcastType(a.dtype, b.dtype);\n    if (a.dtype === 'complex64') {\n        const aData = backend.texData.get(a.dataId);\n        const bData = backend.texData.get(b.dataId);\n        const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n        const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n        const inputs = [\n            {\n                dataId: aData.complexTensorInfos.real.dataId,\n                dtype: aData.complexTensorInfos.real.dtype,\n                shape: a.shape\n            },\n            {\n                dataId: aData.complexTensorInfos.imag.dataId,\n                dtype: aData.complexTensorInfos.imag.dtype,\n                shape: a.shape\n            },\n            {\n                dataId: bData.complexTensorInfos.real.dataId,\n                dtype: bData.complexTensorInfos.real.dtype,\n                shape: b.shape\n            },\n            {\n                dataId: bData.complexTensorInfos.imag.dataId,\n                dtype: bData.complexTensorInfos.imag.dtype,\n                shape: b.shape\n            }\n        ];\n        const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n        const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n        const complexOutput = complex({ inputs: { real: realPart, imag: imagPart }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        // TODO(annxingyuan): CPU forwarding for complex inputs.\n        return complexOutput;\n    }\n    if (backend.shouldExecuteOnCPU([a, b])) {\n        const aData = backend.texData.get(a.dataId);\n        const bData = backend.texData.get(b.dataId);\n        const [outValues, outShape] = cpuMultiply(a.shape, b.shape, aData.values, bData.values, dtype);\n        const out = backend.makeTensorInfo(outShape, dtype);\n        const outData = backend.texData.get(out.dataId);\n        outData.values = outValues;\n        return out;\n    }\n    let program;\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n    }\n    else {\n        program = new BinaryOpProgram(MUL, a.shape, b.shape);\n    }\n    return backend.runWebGLProgram(program, [a, b], dtype);\n}\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'webgl',\n    kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ReshapePackedProgram } from '../reshape_packed_gpu';\nimport { getBatchDim, getRowsCols } from '../webgl_util';\nexport function packedReshape(input, afterShape, backend) {\n    const input3DShape = [getBatchDim(input.shape),\n        ...getRowsCols(input.shape)];\n    const input3D = {\n        dtype: input.dtype,\n        shape: input3DShape,\n        dataId: input.dataId\n    };\n    const afterShapeAs3D = [getBatchDim(afterShape),\n        ...getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = backend.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n    return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nimport { packedReshape } from '../kernel_utils/reshape';\nimport { isReshapeFree } from '../webgl_util';\nexport function reshape(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { shape } = attrs;\n    const webglBackend = backend;\n    const xSize = util.sizeFromShape(x.shape);\n    const $shape = util.inferFromImplicitShape(shape, xSize);\n    const $xSize = util.sizeFromShape($shape);\n    util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n        `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n        `shape must have the same number of elements.`);\n    const xTexData = webglBackend.texData.get(x.dataId);\n    if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n        !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n        return packedReshape(x, $shape, webglBackend);\n    }\n    webglBackend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: $shape, dtype: x.dtype };\n}\nexport const reshapeConfig = {\n    kernelName: Reshape,\n    backendName: 'webgl',\n    kernelFunc: reshape\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport class MeanProgram {\n    constructor(reduceInfo, divisor) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `sumValue += dot(values, ones);`;\n        if (divisor != null) {\n            const denominator = 1 / divisor;\n            updateSnippet = `sumValue += dot(values * ${util.isInt(denominator) ? denominator.toPrecision(2) :\n                denominator}, ones);`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n        }\n        this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ReduceProgram {\n    constructor(reduceInfo, reduceType) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        let initializationValue = '0.0';\n        let compareOp = ``;\n        if (reduceType === 'prod') {\n            initializationValue = '1.0';\n        }\n        else if (reduceType === 'min') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '1.0 / 1e-20';\n            compareOp = `min`;\n        }\n        else if (reduceType === 'max') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n            compareOp = `max`;\n        }\n        let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (reduceType === 'sum') {\n            returnValue = `sumValue`;\n        }\n        else if (reduceType === 'prod') {\n            returnValue = `prodValue`;\n        }\n        else if (reduceType === 'all') {\n            returnValue = `allValue`;\n        }\n        else if (reduceType === 'any') {\n            returnValue = `anyValue`;\n        }\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n        let vecType = `vec4`;\n        if (reduceType === 'all') {\n            initializationValue = '1.0';\n            updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        else if (reduceType === 'any') {\n            initializationValue = '0.0';\n            updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { MeanProgram } from '../mean_gpu';\nimport { ReduceProgram } from '../reduce_gpu';\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape) {\n    const stages = [];\n    while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n        const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n        const windowSize = backend_util.computeOptimalWindowSize(outSize);\n        stages.push({\n            inSize: outSize,\n            windowSize,\n            outSize: Math.ceil(outSize / windowSize)\n        });\n    }\n    return stages;\n}\nexport function reduce(x, dtype, reductionType, backend) {\n    const reductionStages = getReductionStages(x.shape);\n    let result = x;\n    for (let i = 0; i < reductionStages.length; i++) {\n        const { inSize, windowSize, outSize } = reductionStages[i];\n        let program;\n        let previousResult;\n        if (reductionType === 'mean') {\n            program = i === 0 ?\n                new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, inSize) :\n                new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize });\n        }\n        else {\n            program = new ReduceProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, reductionType);\n        }\n        previousResult = result;\n        result = backend.runWebGLProgram(program, [result], dtype);\n        if (previousResult.dataId !== x.dataId) {\n            backend.disposeIntermediateTensorInfo(previousResult);\n        }\n    }\n    return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposeProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const switched = getSwitchedCoords(newDim);\n        this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n    }\n}\nfunction getSwitchedCoords(newDim) {\n    const rank = newDim.length;\n    if (rank > 6) {\n        throw Error(`Transpose for rank ${rank} is not yet supported`);\n    }\n    const originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n    const switchedCoords = new Array(rank);\n    for (let i = 0; i < newDim.length; i++) {\n        switchedCoords[newDim[i]] = originalOrder[i];\n    }\n    return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getVecChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposePackedProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        if (this.rank > 6) {\n            throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);\n        }\n        const dtype = getCoordsDataType(this.rank);\n        const outputOrder = getVecChannels('rc', this.rank);\n        const switchedOrder = new Array(this.rank);\n        for (let i = 0; i < newDim.length; i++) {\n            switchedOrder[newDim[i]] = outputOrder[i];\n        }\n        const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n        const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n        const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n        this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { transposeImplCPU } from '../kernel_utils/shared';\nimport { TransposeProgram } from '../transpose_gpu';\nimport { TransposePackedProgram } from '../transpose_packed_gpu';\nexport function transposeImpl(x, perm, backend) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new TransposePackedProgram(x.shape, perm) :\n        new TransposeProgram(x.shape, perm);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport { transposeImplCPU };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transposeImpl } from './Transpose_impl';\nexport function sumImpl(x, axis, keepDims, backend) {\n    const reductionIndices = axis;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const sumInputIsTransposed = permutedAxes != null;\n    let sumInput = x;\n    if (sumInputIsTransposed) {\n        sumInput = transposeImpl(x, permutedAxes, backend);\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [sumOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n    let outShape = sumOutShape;\n    if (keepDims) {\n        // rather than reshape at the end, set the target shape here.\n        outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n    }\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = reshape({ inputs: { x: sumInput }, attrs: { shape: [batchSize, inSize] }, backend });\n    const outType = sumOutType(x.dtype);\n    const reduced = reduce(reshapedInput, outType, 'sum', backend);\n    const out = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (sumInputIsTransposed) {\n        backend.disposeIntermediateTensorInfo(sumInput);\n    }\n    return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sum } from '@tensorflow/tfjs-core';\nimport { sumImpl } from './Sum_impl';\nexport function sum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    return sumImpl(x, axis, keepDims, backend);\n}\nexport const sumConfig = {\n    kernelName: Sum,\n    backendName: 'webgl',\n    kernelFunc: sum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { transposeImpl } from './Transpose_impl';\nimport { transposeImplCPU as cpuTranspose } from './Transpose_impl';\nexport function transpose(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    const webglBackend = backend;\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    let out;\n    if (webglBackend.shouldExecuteOnCPU([x])) {\n        const xTexData = webglBackend.texData.get(x.dataId);\n        const values = xTexData.values;\n        const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n        out = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const outData = webglBackend.texData.get(out.dataId);\n        outData.values = outValues;\n    }\n    else {\n        out = transposeImpl(x, perm, webglBackend);\n    }\n    return out;\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'webgl',\n    kernelFunc: transpose\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { broadcast_util, upcastType, util } from '@tensorflow/tfjs-core';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { MatMulPackedProgram } from '../mulmat_packed_gpu';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\nexport function batchMatMulImpl({ a, b, transposeA, transposeB, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    const aRank = a.shape.length;\n    const bRank = b.shape.length;\n    const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n    const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n    const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n    const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n    const outerDimsA = a.shape.slice(0, -2);\n    const outerDimsB = b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n    const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n    const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n    util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n        `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n        `${b.shape} and transposeA=${transposeA}` +\n        ` and transposeB=${transposeB} must match.`);\n    const a3dShape = transposeA ?\n        [batchDimA, innerShapeA, outerShapeA] :\n        [batchDimA, outerShapeA, innerShapeA];\n    const b3dShape = transposeB ?\n        [batchDimB, outerShapeB, innerShapeB] :\n        [batchDimB, innerShapeB, outerShapeB];\n    // The rest of the implementation is designed to operate on rank-3 tensors\n    const a3d = reshape({ inputs: { x: a }, backend, attrs: { shape: a3dShape } });\n    const b3d = reshape({ inputs: { x: b }, backend, attrs: { shape: b3dShape } });\n    const intermediates = [a3d, b3d];\n    const batchDim = Math.max(batchDimA, batchDimB);\n    const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation = activation != null ?\n        mapActivationToShaderProgram(activation, true) :\n        null;\n    const containsFusedOps = hasBias || hasPreluActivationWeights ||\n        hasLeakyreluAlpha || fusedActivation != null;\n    let out;\n    // Since the matrices are vectors, it is faster to call mul().sum()\n    // because sum() is O(sqrt(N)) due to divide-and-conquer.\n    if ((outerShapeA === 1 || outerShapeB === 1) &&\n        sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n        let aVec = a3d;\n        let bVec = b3d;\n        if (transposeA) {\n            aVec = transpose({ inputs: { x: a3d }, backend, attrs: { perm: [0, 2, 1] } });\n            intermediates.push(aVec);\n        }\n        if (transposeB) {\n            bVec = transpose({ inputs: { x: b3d }, backend, attrs: { perm: [0, 2, 1] } });\n            intermediates.push(bVec);\n        }\n        const shouldReshapeA = outerShapeB !== 1;\n        const shouldReshapeB = outerShapeB === 1;\n        let aVec3d = aVec;\n        if (shouldReshapeA) {\n            aVec3d = reshape({\n                inputs: { x: aVec },\n                backend,\n                attrs: { shape: [batchDim, sharedDim, 1] }\n            });\n            intermediates.push(aVec3d);\n        }\n        const axis = outerShapeB === 1 ? 2 : 1;\n        let bVec3d = bVec;\n        if (shouldReshapeB) {\n            bVec3d = reshape({\n                inputs: { x: bVec },\n                backend,\n                attrs: { shape: [batchDim, 1, sharedDim] }\n            });\n            intermediates.push(bVec3d);\n        }\n        const product = multiply({ inputs: { a: aVec3d, b: bVec3d }, backend });\n        out = sum({ inputs: { x: product }, backend, attrs: { axis, keepDims: true } });\n        intermediates.push(product);\n    }\n    else {\n        const dtype = upcastType(a.dtype, b.dtype);\n        const program = new MatMulPackedProgram(a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n        const inputs = [a3d, b3d];\n        if (bias != null) {\n            inputs.push(bias);\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        if (hasLeakyreluAlpha) {\n            const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n            inputs.push($leakyreluAlpha);\n            intermediates.push($leakyreluAlpha);\n        }\n        out = backend.runWebGLProgram(program, inputs, dtype);\n    }\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: outShape } });\n    intermediates.push(out);\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { batchMatMulImpl } from './BatchMatMul_impl';\nexport function _fusedMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b, bias, preluActivationWeights } = inputs;\n    const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;\n    return batchMatMulImpl({\n        a,\n        b,\n        transposeA,\n        transposeB,\n        backend,\n        bias,\n        preluActivationWeights,\n        leakyreluAlpha,\n        activation\n    });\n}\nexport const _fusedMatMulConfig = {\n    kernelName: _FusedMatMul,\n    backendName: 'webgl',\n    kernelFunc: _fusedMatMul,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, env } from '@tensorflow/tfjs-core';\nimport { simpleAbsImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst ABS = `return abs(x);`;\nexport function abs(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    // TODO: handle cases when x is complex. Once the cpu implementation\n    // can handle complex values, refactor to use unaryKernelFunc.\n    if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n        const xData = backend.texData.get(x.dataId);\n        const outValues = simpleAbsImplCPU(xData.values);\n        return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n    }\n    let program;\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        program = new UnaryOpPackedProgram(x.shape, ABS);\n    }\n    else {\n        program = new UnaryOpProgram(x.shape, ABS);\n    }\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'webgl',\n    kernelFunc: abs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acos } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\nexport const acos = unaryKernelFunc({ opSnippet: ACOS });\nexport const acosConfig = {\n    kernelName: Acos,\n    backendName: 'webgl',\n    kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\nexport const acosh = unaryKernelFunc({ opSnippet: ACOSH });\nexport const acoshConfig = {\n    kernelName: Acosh,\n    backendName: 'webgl',\n    kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { addImplCPU as cpuAdd } from '../kernel_utils/shared';\nconst ADD = 'return a + b;';\nexport const addKernelFunc = binaryKernelFunc({\n    opSnippet: ADD,\n    packedOpSnippet: ADD,\n    supportsComplex: true,\n    cpuKernelImpl: cpuAdd\n});\nexport const addConfig = {\n    kernelName: Add,\n    backendName: 'webgl',\n    kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNPackedProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, env, upcastType } from '@tensorflow/tfjs-core';\nimport { AddNProgram } from '../addn_gpu';\nimport { AddNPackedProgram } from '../addn_packed_gpu';\nimport { identity } from './Identity';\nexport function addN(args) {\n    const { inputs, backend } = args;\n    const tensors = inputs;\n    if (tensors.length === 1) {\n        return identity({ inputs: { x: tensors[0] }, backend });\n    }\n    // Limit the number of uploaded textures for optimization.\n    if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n        const midIndex = Math.floor(tensors.length / 2);\n        const leftSide = addN({ inputs: tensors.slice(0, midIndex), backend });\n        const rightSide = addN({ inputs: tensors.slice(midIndex), backend });\n        return addN({ inputs: [leftSide, rightSide], backend });\n    }\n    const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n    const shapes = tensors.map(t => t.shape);\n    // We can make sure shapes are identical in op level.\n    const usePackedOp = env().getBool('WEBGL_PACK');\n    const program = usePackedOp ?\n        new AddNPackedProgram(tensors[0].shape, shapes) :\n        new AddNProgram(tensors[0].shape, shapes);\n    return backend.runWebGLProgram(program, tensors, dtype);\n}\nexport const addNConfig = {\n    kernelName: AddN,\n    backendName: 'webgl',\n    kernelFunc: addN\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { All, backend_util, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function all(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n    let res;\n    if (keepDims) {\n        const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });\n    }\n    else {\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n    }\n    backend.disposeIntermediateTensorInfo(a2D);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return res;\n}\nexport const allConfig = {\n    kernelName: All,\n    backendName: 'webgl',\n    kernelFunc: all\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Any, backend_util, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function any(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n    let res;\n    if (keepDims) {\n        const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });\n    }\n    else {\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n    }\n    backend.disposeIntermediateTensorInfo(a2D);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return res;\n}\nexport const anyConfig = {\n    kernelName: Any,\n    backendName: 'webgl',\n    kernelFunc: any\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ArgMinMaxProgram {\n    constructor(reduceInfo, op, firstPass) {\n        this.variableNames = ['A'];\n        const { windowSize, batchSize, outSize } = reduceInfo;\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        this.outputShape = [batchSize, outSize];\n        const compOp = (op === 'max') ? '>' : '<';\n        const indexSnippet = firstPass ?\n            'inOffset + i;' :\n            'round(getBestIndicesA(batch, inOffset + i));';\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n    constructor(shape, windowSize, op, firstPass) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n        const inSize = shape[shape.length - 1];\n        const outSize = Math.ceil(inSize / windowSize);\n        this.outputShape = shape.slice(0, -1);\n        if (outSize > 1) {\n            this.outputShape.push(outSize);\n        }\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        const outShape = this.outputShape;\n        const rank = outShape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        let sourceLocSetup;\n        let sourceRank;\n        if (outSize === 1) {\n            sourceRank = rank + 1;\n            const sourceLocDType = getCoordsDataType(sourceRank);\n            sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n        }\n        else {\n            sourceRank = rank;\n            sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n        }\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n        const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n        const intChannels = channels.map(x => 'int ' + x);\n        const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n        const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n        const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n        const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n        const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n        const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n        const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n        const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n        this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\nfunction argReduce(backend, x, reduceType, bestIndicesA = null) {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n        batchSize = bestIndicesA.shape[0];\n        inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = { windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize) };\n    const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n    if (bestIndicesA != null) {\n        inputs.push(bestIndicesA);\n    }\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n        return output;\n    }\n    const result = argReduce(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n}\nfunction argReducePacked(backend, x, reduceType, bestIndicesA = null) {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    if (output.shape.length === x.shape.length) {\n        const result = argReducePacked(backend, x, reduceType, output);\n        backend.disposeIntermediateTensorInfo(output);\n        return result;\n    }\n    return output;\n}\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n    if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n        const intermediateTensorInfos = [];\n        // Eagerly unpack x input since it is passed in to all the shaders which\n        // require unpacked inputs.\n        const xtexData = backend.texData.get(x.dataId);\n        const xIsPacked = xtexData !== null && xtexData.isPacked;\n        let xUnPacked = x;\n        if (xIsPacked) {\n            xUnPacked = backend.unpackTensor(x);\n            intermediateTensorInfos.push(xUnPacked);\n        }\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = reshape({ inputs: { x: xUnPacked }, backend, attrs: { shape: [-1, inSize] } });\n        intermediateTensorInfos.push(a2D);\n        const reduced = argReduce(backend, a2D, reduceType);\n        intermediateTensorInfos.push(reduced);\n        const reshaped = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return reshaped;\n    }\n    return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, backend_util, util } from '@tensorflow/tfjs-core';\nimport { argMinMaxReduce } from '../kernel_utils/arg_min_max';\nimport { transpose } from './Transpose';\nexport function argMax(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    let axes = util.parseAxisParam(axis, x.shape);\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n    const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return out;\n}\nexport const argMaxConfig = {\n    kernelName: ArgMax,\n    backendName: 'webgl',\n    kernelFunc: argMax\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin, backend_util, util } from '@tensorflow/tfjs-core';\nimport { argMinMaxReduce } from '../kernel_utils/arg_min_max';\nimport { transpose } from './Transpose';\nexport function argMin(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    let axes = util.parseAxisParam(axis, x.shape);\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n    const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return out;\n}\nexport const argMinConfig = {\n    kernelName: ArgMin,\n    backendName: 'webgl',\n    kernelFunc: argMin\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asin } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\nexport const asin = unaryKernelFunc({ opSnippet: ASIN });\nexport const asinConfig = {\n    kernelName: Asin,\n    backendName: 'webgl',\n    kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\nexport const asinh = unaryKernelFunc({ opSnippet: ASINH });\nexport const asinhConfig = {\n    kernelName: Asinh,\n    backendName: 'webgl',\n    kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\nexport const atan = unaryKernelFunc({ opSnippet: ATAN });\nexport const atanConfig = {\n    kernelName: Atan,\n    backendName: 'webgl',\n    kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc, CHECK_NAN_SNIPPET_BINARY, CHECK_NAN_SNIPPET_BINARY_PACKED } from '../kernel_utils/kernel_funcs_utils';\nconst ATAN2 = CHECK_NAN_SNIPPET_BINARY + `\n  return atan(a, b);\n`;\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_BINARY_PACKED + `\n  return result;\n`;\nexport const atan2 = binaryKernelFunc({ opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED });\nexport const atan2Config = {\n    kernelName: Atan2,\n    backendName: 'webgl',\n    kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\nexport const atanh = unaryKernelFunc({ opSnippet: ATANH });\nexport const atanhConfig = {\n    kernelName: Atanh,\n    backendName: 'webgl',\n    kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Pool2DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                flattenPositionStr) :\n                `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\nexport class Pool3DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${flattenPositions ?\n                (includeBatchInIndex ?\n                    `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` :\n                    `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n                `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool, backend_util, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nimport { identity } from './Identity';\nexport function avgPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'avgPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        return identity({ inputs: { x }, backend });\n    }\n    const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n    return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\nexport const avgPoolConfig = {\n    kernelName: AvgPool,\n    backendName: 'webgl',\n    kernelFunc: avgPool\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util } from '@tensorflow/tfjs-core';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function avgPool3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n    const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n    return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\nexport const avgPool3DConfig = {\n    kernelName: AvgPool3D,\n    backendName: 'webgl',\n    kernelFunc: avgPool3D\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AvgPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class AvgPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3DGrad, backend_util } from '@tensorflow/tfjs-core';\nimport { AvgPool3DBackpropProgram } from '../avg_pool_backprop_gpu';\nexport function avgPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n    return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\nexport const avgPool3DGradConfig = {\n    kernelName: AvgPool3DGrad,\n    backendName: 'webgl',\n    kernelFunc: avgPool3DGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPoolGrad, backend_util } from '@tensorflow/tfjs-core';\nimport { AvgPool2DBackpropProgram } from '../avg_pool_backprop_gpu';\nimport { assertNotComplex } from '../webgl_util';\nexport function avgPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    assertNotComplex([dy, input], 'avgPoolGrad');\n    const { filterSize, strides, pad } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);\n    const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n    return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\nexport const avgPoolGradConfig = {\n    kernelName: AvgPoolGrad,\n    backendName: 'webgl',\n    kernelFunc: avgPoolGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul } from '@tensorflow/tfjs-core';\nimport { batchMatMulImpl } from './BatchMatMul_impl';\nexport function batchMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b } = inputs;\n    const { transposeA, transposeB } = attrs;\n    return batchMatMulImpl({ a, b, transposeA, transposeB, backend });\n}\nexport const batchMatMulConfig = {\n    kernelName: BatchMatMul,\n    backendName: 'webgl',\n    kernelFunc: batchMatMul,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.outputShape = [];\n        this.variableNames = ['x', 'mean', 'variance'];\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = '0.0';\n        if (offsetShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = '1.0';\n        if (scaleShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormPackedProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.variableNames = ['x', 'mean', 'variance'];\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = 'vec4(0.0)';\n        if (offsetShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = 'vec4(1.0)';\n        if (scaleShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = ({ inputs, backend, attrs }) => {\n    const { x, mean, variance, offset, scale } = inputs;\n    util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    let { varianceEpsilon } = attrs;\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const finalInputs = [x, mean, variance];\n    let offsetShape = null;\n    if (offset != null) {\n        offsetShape = offset.shape;\n        finalInputs.push(offset);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n        scaleShape = scale.shape;\n        finalInputs.push(scale);\n    }\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) :\n        new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n    const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n    return output;\n};\nexport const batchNormConfig = {\n    kernelName: FusedBatchNorm,\n    backendName: 'webgl',\n    kernelFunc: batchNorm,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        const dtype = getCoordsDataType(this.rank);\n        this.customUniforms = [{ name: 'start', arrayIndex: this.rank, type: 'int' }];\n        const sourceCoords = getCoords(this.rank);\n        let body;\n        const coordSum = destSize.map((_, i) => {\n            return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n        });\n        body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n        this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n    }\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\nfunction getCoords(rank) {\n    if (rank === 1) {\n        return 'sourceLoc';\n    }\n    else if (rank <= 6) {\n        return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n    }\n    else {\n        throw Error(`Slicing for rank ${rank} is not yet supported`);\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class SlicePackedProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        this.customUniforms = [{ name: 'start', arrayIndex: this.rank, type: 'int' }];\n        const dtype = getCoordsDataType(this.rank);\n        const coords = getChannels('coords', this.rank);\n        const sourceLoc = getChannels('sourceLoc', this.rank);\n        const innerDims = this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n        const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n        const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n        const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n        const sourceLocSetup = this.rank <= 4 ?\n            `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n            destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n                .join('\\n');\n        this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { sliceImplCPU } from '../kernel_utils/shared';\nimport { SliceProgram } from '../slice_gpu';\nimport { SlicePackedProgram } from '../slice_packed_gpu';\nfunction shallowSlice(x, begin, size, backend) {\n    const xTexData = backend.texData.get(x.dataId);\n    const t = backend.makeTensorInfo(size, x.dtype);\n    const newTexData = backend.texData.get(t.dataId);\n    // Copy texture data from the original tensor.\n    Object.assign(newTexData, xTexData);\n    newTexData.refCount = 1;\n    newTexData.shape = size;\n    newTexData.dtype = x.dtype;\n    let flatOffset = slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n    if (xTexData.slice) {\n        // We are slicing an already sliced tensor, so we have to accumulate\n        // the offset.\n        flatOffset += xTexData.slice.flatOffset;\n    }\n    newTexData.slice = {\n        flatOffset,\n        // Point to the original dataId, which is used to do ref counting.\n        origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n    };\n    // Increase the ref count for that data bucket.\n    const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n    backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n    return t;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    if (util.sizeFromShape($size) === 0) {\n        return backend.makeTensorInfo($size, x.dtype, []);\n    }\n    // Run on cpu if dtype is string. For string, the backend represents it\n    // as Uint8Array[], where each Uint8Array is a character. Given that the\n    // computation is only on the outer array, uploading the whole data onto\n    // gpu is wasteful. Also, currently webgl doesn't have a design to\n    // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n    // just run the kernel on cpu if dtype is string.\n    if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n        const xTexData = backend.texData.get(x.dataId);\n        const outValues = sliceImplCPU(xTexData.values, $begin, $size, x.shape, x.dtype);\n        return backend.makeTensorInfo($size, x.dtype, outValues);\n    }\n    const { isPacked } = backend.texData.get(x.dataId);\n    const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n    if (isPacked || !isContinous) {\n        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n            new SlicePackedProgram($size) :\n            new SliceProgram($size);\n        const customValues = [$begin];\n        return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n    }\n    backend.uploadToGPU(x.dataId);\n    return shallowSlice(x, $begin, $size, backend);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'webgl',\n    kernelFunc: slice\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport const batchToSpaceND = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, crops } = attrs;\n    util.assert(x.shape.length <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n        'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n    const toDispose = [];\n    const reshapedIntermediate = reshape({ inputs: { x }, backend, attrs: { shape: reshaped } });\n    const transposedIntermediate = transpose({ inputs: { x: reshapedIntermediate }, backend, attrs: { perm: permuted } });\n    const reshapedIntermediate2 = reshape({\n        inputs: { x: transposedIntermediate },\n        backend,\n        attrs: { shape: reshapedPermuted }\n    });\n    const sliced = slice({\n        inputs: { x: reshapedIntermediate2 },\n        backend,\n        attrs: { begin: sliceBeginCoords, size: sliceSize }\n    });\n    toDispose.push(reshapedIntermediate);\n    toDispose.push(transposedIntermediate);\n    toDispose.push(reshapedIntermediate2);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return sliced;\n};\nexport const batchToSpaceNDConfig = {\n    kernelName: BatchToSpaceND,\n    backendName: 'webgl',\n    kernelFunc: batchToSpaceND\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Bincount } from '@tensorflow/tfjs-core';\nimport { bincountImplCPU } from '../kernel_utils/shared';\nexport function bincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size } = attrs;\n    const xVals = backend.readSync(x.dataId);\n    const weightsVals = backend.readSync(weights.dataId);\n    const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\nexport const bincountConfig = {\n    kernelName: Bincount,\n    backendName: 'webgl',\n    kernelFunc: bincount\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BroadcastArgs } from '@tensorflow/tfjs-core';\nexport function broadcastArgs(args) {\n    const { inputs, backend } = args;\n    const { s0, s1 } = inputs;\n    const s0Vals = backend.readSync(s0.dataId);\n    const s1Vals = backend.readSync(s1.dataId);\n    const broadcastShape = backend_util.assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));\n    return backend.makeTensorInfo([broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\nexport const broadcastArgsConfig = {\n    kernelName: BroadcastArgs,\n    backendName: 'webgl',\n    kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { notEqualImplCPU } from '../kernel_utils/shared';\nconst NOT_EQUAL = `return float(a != b);`;\nexport const notEqual = binaryKernelFunc({ opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool' });\nexport const notEqualConfig = {\n    kernelName: NotEqual,\n    backendName: 'webgl',\n    kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Real } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nexport function real(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputData = backend.texData.get(input.dataId);\n    return identity({ inputs: { x: inputData.complexTensorInfos.real }, backend });\n}\nexport const realConfig = {\n    kernelName: Real,\n    backendName: 'webgl',\n    kernelFunc: real\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnaryOpProgram } from '../unaryop_gpu';\nconst TO_INT = `return float(int(x));`;\nexport function int(input, backend) {\n    const program = new UnaryOpProgram(input.shape, TO_INT);\n    const output = backend.runWebGLProgram(program, [input], 'int32');\n    return { dataId: output.dataId, shape: output.shape, dtype: output.dtype };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { notEqual } from './NotEqual';\nimport { real } from './Real';\nimport { int } from '../kernel_utils/int';\nexport function cast(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dtype } = attrs;\n    // Casting to complex64.\n    if (dtype === 'complex64') {\n        if (x.dtype === 'complex64') {\n            return identity({ inputs: { x }, backend });\n        }\n        // TODO(annxingyuan): Import kernel function once zeros is modularized.\n        const zerosTensor = tf.zeros(x.shape);\n        const floatX = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n        const result = complex({ inputs: { real: floatX, imag: zerosTensor }, backend });\n        zerosTensor.dispose();\n        backend.disposeIntermediateTensorInfo(floatX);\n        return result;\n    }\n    // Casting from complex64\n    if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const result = cast({ inputs: { x: realPart }, backend, attrs: { dtype } });\n        backend.disposeIntermediateTensorInfo(realPart);\n        return result;\n    }\n    if (!util.hasEncodingLoss(x.dtype, dtype)) {\n        // We don't change the underlying data, since we cast to higher\n        // precision.\n        const result = identity({ inputs: { x }, backend });\n        return { dataId: result.dataId, shape: result.shape, dtype };\n    }\n    if (dtype === 'int32') {\n        return int(x, backend);\n    }\n    if (dtype === 'bool') {\n        const zerosTensorInfo = backend.makeTensorInfo([], 'bool', util.getTypedArrayFromDType('bool', 1));\n        const binaryInputs = { a: x, b: zerosTensorInfo };\n        const result = notEqual({ inputs: binaryInputs, backend });\n        backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n        return result;\n    }\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n    kernelName: Cast,\n    backendName: 'webgl',\n    kernelFunc: cast\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { ceilImplCPU } from '../kernel_utils/shared';\nconst CEIL = `return ceil(x);`;\nexport const ceil = unaryKernelFunc({ opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU });\nexport const ceilConfig = {\n    kernelName: Ceil,\n    backendName: 'webgl',\n    kernelFunc: ceil\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ClipProgram {\n    constructor(aShape) {\n        this.variableNames = ['A'];\n        this.customUniforms = [\n            { name: 'minVal', type: 'float' },\n            { name: 'maxVal', type: 'float' }\n        ];\n        this.outputShape = aShape;\n        this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ClipPackedProgram {\n    constructor(aShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [\n            { name: 'minVal', type: 'float' },\n            { name: 'maxVal', type: 'float' }\n        ];\n        this.outputShape = aShape;\n        this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ClipByValue, env } from '@tensorflow/tfjs-core';\nimport { ClipProgram } from '../clip_gpu';\nimport { ClipPackedProgram } from '../clip_packed_gpu';\nexport function clipByValue(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { clipValueMin, clipValueMax } = attrs;\n    let program;\n    if (env().getBool('WEBGL_PACK_CLIP')) {\n        program = new ClipPackedProgram(x.shape);\n    }\n    else {\n        program = new ClipProgram(x.shape);\n    }\n    const customValues = [[clipValueMin], [clipValueMax]];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\nexport const clipByValueConfig = {\n    kernelName: ClipByValue,\n    backendName: 'webgl',\n    kernelFunc: clipByValue\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ComplexAbsProgram {\n    constructor(shape) {\n        this.variableNames = ['real', 'imag'];\n        this.outputShape = shape;\n        this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs } from '@tensorflow/tfjs-core';\nimport { ComplexAbsProgram } from '../complex_abs_gpu';\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(complexTensor, complexPart) {\n    return {\n        dataId: complexPart.dataId,\n        dtype: complexPart.dtype,\n        shape: complexTensor.shape\n    };\n}\nexport function complexAbs(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    const xData = backend.texData.get(x.dataId);\n    const program = new ComplexAbsProgram(x.shape);\n    const programInputs = [\n        makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n        makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n    ];\n    return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);\n}\nexport const complexAbsConfig = {\n    kernelName: ComplexAbs,\n    backendName: 'webgl',\n    kernelFunc: complexAbs\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class ConcatProgram {\n    // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n    constructor(shapes) {\n        this.outputShape = [];\n        this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][1];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][1];\n        }\n        const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            snippets.push(`else if (yC < ${offsets[i]}) ` +\n                `setOutput(getT${i}(yR, yC-${shift}));`);\n        }\n        const lastIndex = offsets.length;\n        const lastShift = offsets[offsets.length - 1];\n        snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ConcatPackedProgram {\n    constructor(shapes, axis) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        this.outputShape = backend_util.computeOutShape(shapes, axis);\n        const shape = this.outputShape;\n        const rank = shape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][axis];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][axis];\n        }\n        const channel = channels[axis];\n        const lastChannels = channels.slice(-2);\n        const allChannels = channels.join();\n        let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            // Note: the >= comparison below may seem unnecessary given the check\n            // above but is needed to workaround branch execution issues on some\n            // devices. It makes all the conditions exclusive without relying on\n            // execution order.\n            getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n        }\n        const lastIndex = offsets.length;\n        const shift = offsets[offsets.length - 1];\n        getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n        this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n    }\n}\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels, channel, shift) {\n    const channelIdx = channels.indexOf(channel);\n    const res = channels.map((c, idx) => {\n        if (idx === channelIdx) {\n            return `${c} - ${shift}`;\n        }\n        else {\n            return c;\n        }\n    });\n    return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Imag } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nexport function imag(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputData = backend.texData.get(input.dataId);\n    return identity({ inputs: { x: inputData.complexTensorInfos.imag }, backend });\n}\nexport const imagConfig = {\n    kernelName: Imag,\n    backendName: 'webgl',\n    kernelFunc: imag\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ConcatProgram } from '../concat_gpu';\nimport { ConcatPackedProgram } from '../concat_packed_gpu';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concatImpl(inputs, axis, backend) {\n    const dtype = inputs[0].dtype;\n    if (dtype === 'complex64') {\n        const reals = inputs.map((t) => real({ inputs: { input: t }, backend }));\n        const imags = inputs.map((t) => imag({ inputs: { input: t }, backend }));\n        const realConcated = concatImpl(reals, axis, backend);\n        const imagConcated = concatImpl(imags, axis, backend);\n        const result = complex({ inputs: { real: realConcated, imag: imagConcated }, backend });\n        reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n        imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n        backend.disposeIntermediateTensorInfo(realConcated);\n        backend.disposeIntermediateTensorInfo(imagConcated);\n        return result;\n    }\n    let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n    // Run on cpu if dtype is string. For string, the backend represents it\n    // as Uint8Array[], where each Uint8Array is a character. Given that the\n    // computation is only on the outer array, uploading the whole data onto\n    // gpu is wasteful. Also, currently webgl doesn't have a design to\n    // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n    // just run the kernel on cpu if dtype is string.\n    if (dtype === 'string') {\n        runOnCpu = true;\n    }\n    if (runOnCpu) {\n        // Any concat of n-dimensional tensors across any axis can be reduced to\n        // a concatenation of two-dimensional tensors across the axis 1 by first\n        // partitioning the axes of the original tensors into those less than the\n        // axis to be concatenated and the rest. Then reshape the tensors\n        // into a two-dimensional tensor by collapsing these two sets of axes and\n        // concatenate the resulting matrices across the axis 1, finally reshaping\n        // the result to have the proper shape.\n        const tensors2D = inputs.map(t => {\n            const innerSize = util.sizeFromShape(t.shape.slice(axis));\n            const shape = [-1, innerSize];\n            return reshape({ inputs: { x: t }, backend, attrs: { shape } });\n        });\n        const inputsValShapes = tensors2D.map(t => {\n            return { vals: backend.readSync(t.dataId), shape: t.shape };\n        });\n        // Concats 2d tensors along axis=1.\n        const outShape = backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n        const simplyConcat = tensors2D[0].shape[0] === 1;\n        const outVals = concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n        const finalOutShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n        const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n        tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return outInfo;\n    }\n    if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n        const midIndex = Math.floor(inputs.length / 2);\n        const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n        const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n        const result = concatImpl([leftSide, rightSide], axis, backend);\n        backend.disposeIntermediateTensorInfo(leftSide);\n        backend.disposeIntermediateTensorInfo(rightSide);\n        return result;\n    }\n    if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n        inputs[0].shape.length > 1) {\n        const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n        return backend.runWebGLProgram(program, inputs, dtype);\n    }\n    const { tensors2D, outShape } = computeTensors2D(inputs, axis, backend);\n    const program = new ConcatProgram(tensors2D.map(t => t.shape));\n    const result = backend.runWebGLProgram(program, tensors2D, dtype);\n    tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    const reshapedResult = reshape({ inputs: { x: result }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n}\nfunction computeTensors2D(inputs, axis, backend) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n    const tensors2D = inputs.map(x => reshape({\n        inputs: { x },\n        attrs: { shape: [-1, util.sizeFromShape(x.shape.slice(axis))] },\n        backend\n    }));\n    return { tensors2D, outShape };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nexport function concat(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n    const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n    if (util.sizeFromShape(outShape) === 0) {\n        return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n    }\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n    if ($inputs.length === 1) {\n        return identity({ inputs: { x: $inputs[0] }, backend });\n    }\n    const shapes = $inputs.map(t => t.shape);\n    backend_util.assertParamsConsistent(shapes, $axis);\n    return concatImpl($inputs, $axis, backend);\n}\nexport const concatConfig = {\n    kernelName: Concat,\n    backendName: 'webgl',\n    kernelFunc: concat\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Conv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false, hasLeakyreluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n        const inputDepthVec4Remainder = convInfo.inChannels % 4;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const channelDim = isChannelsLast ? 3 : 1;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivationWeights) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyreluAlpha) {\n                activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivationWeights) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyreluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\nexport class Conv3DProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n        const inputDepthVec4Remainder = convInfo.inChannels % 4;\n        this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class Im2ColPackedProgram {\n    constructor(outputShape, convInfo) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [\n            { name: 'inputShape', type: 'ivec3' },\n            { name: 'pad', type: 'ivec2' },\n            { name: 'stride', type: 'ivec2' },\n            { name: 'dilation', type: 'ivec2' },\n            { name: 'inChannels', type: 'int' },\n            { name: 'itemsPerBlockRow', type: 'int' },\n            { name: 'outWidth', type: 'int' },\n        ];\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const { dataFormat } = convInfo;\n        const glsl = getGlslDifferences();\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 0 : 1;\n        const colDim = isChannelsLast ? 1 : 2;\n        const boundsCheckingSnippet = this.enableShapeUniforms ?\n            'if(blockIndex < outShape[1] && pos < outShape[0]) {' :\n            `if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {`;\n        let unrolled = ``;\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n            }\n        }\n        this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { Im2ColPackedProgram } from '../im2col_packed_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { MatMulPackedProgram } from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\nimport { batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD } from './BatchMatMul_impl';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({ x, filter, convInfo, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n    // result from 2D to 4D.\n    const xShape = x.shape;\n    const xTexData = backend.texData.get(x.dataId);\n    const sharedMatMulDim = convInfo.inChannels;\n    const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n    const outerShapeFilter = convInfo.outChannels;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const transposeA = false;\n    const transposeB = false;\n    let out;\n    const intermediates = [];\n    // TODO: Once reduction ops are packed, batchMatMul will always be packed\n    // and we can remove this condition.\n    const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) &&\n        sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n    // The algorithm in the if condition assumes (1) the output will be packed,\n    // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n    // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n    // for xTexData.shape and xShape.\n    const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&\n        isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&\n        util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n    if (canOptimize) {\n        // We avoid expensive packed 2x2 reshape by padding col count to next,\n        // even number. When col is odd, the result of packed batchMatMul is\n        // the same (has the same texture layout and and values in the texture) as\n        // it is for next even col. We make the odd-cols tensor to look like\n        // even-cols tensor before the operation and, after the batchMatMul,\n        // fix the even-cols result to have odd number of cols.\n        const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n        const xReshaped = {\n            dataId: x.dataId,\n            shape: [1, targetShape, convInfo.inChannels],\n            dtype: x.dtype\n        };\n        // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n        // Decrementing col count, after batchMatMul->...->compileProgram leads to\n        // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n        // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n        // in compileProgram method, but that would affect compilation of all\n        // programs - instead, provide a copy here, with even col count, before\n        // calling batchMatMul->...->compileProgram and after that, the original\n        // xTexData.shape is restored.\n        const originalXTexDataShape = xTexData.shape;\n        xTexData.shape = xTexData.shape.slice();\n        xTexData.shape[xTexData.shape.length - 2]++;\n        util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);\n        const filterReshaped = reshape({\n            inputs: { x: filter },\n            backend,\n            attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }\n        });\n        intermediates.push(filterReshaped);\n        const pointwiseConv = batchMatMulImpl({\n            a: xReshaped,\n            b: filterReshaped,\n            backend,\n            transposeA,\n            transposeB,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n        const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n        util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed');\n        // Restore the input shape to original.\n        xTexData.shape = originalXTexDataShape;\n        // Set the output shape - there is no need for expensive reshape as data\n        // layout is already correct.\n        pointwiseConvTexData.shape = convInfo.outShape;\n        out = identity({ inputs: { x: pointwiseConv }, backend });\n        out.shape = convInfo.outShape;\n        intermediates.push(pointwiseConv);\n    }\n    else {\n        const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n            xShape[0] * xShape[2] * xShape[3];\n        const xReshaped = reshape({\n            inputs: { x },\n            backend,\n            attrs: { shape: [1, targetShape, convInfo.inChannels] }\n        });\n        const filterReshaped = reshape({\n            inputs: { x: filter },\n            backend,\n            attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }\n        });\n        const result = batchMatMulImpl({\n            a: xReshaped,\n            b: filterReshaped,\n            transposeA,\n            transposeB,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n        out = reshape({ inputs: { x: result }, backend, attrs: { shape: convInfo.outShape } });\n        intermediates.push(xReshaped);\n        intermediates.push(filterReshaped);\n        intermediates.push(result);\n    }\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return out;\n}\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({ x, filter, convInfo, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    // Rearranges conv2d input so each block to be convolved over forms the\n    // column of a new matrix with shape [filterWidth * filterHeight *\n    // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n    // output channel forms a row of a new matrix with shape [outChannels,\n    // filterWidth * filterHeight * inChannels]. The convolution is then\n    // computed by multiplying these matrices and reshaping the result.\n    const { filterWidth, filterHeight, inChannels, outWidth, outHeight, dataFormat } = convInfo;\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const sharedDim = filterWidth * filterHeight * inChannels;\n    const numCols = outHeight * outWidth;\n    const x2ColShape = [sharedDim, numCols];\n    const transposeA = true;\n    const transposeB = false;\n    const intermediates = [];\n    const xSqueezed = reshape({ inputs: { x }, backend, attrs: { shape: x.shape.slice(1) } });\n    const w2Row = reshape({\n        inputs: { x: filter },\n        backend,\n        attrs: { shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim] }\n    });\n    intermediates.push(xSqueezed);\n    intermediates.push(w2Row);\n    const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n    const customValues = [\n        xSqueezed.shape, [convInfo.padInfo.top, convInfo.padInfo.left],\n        [convInfo.strideHeight, convInfo.strideWidth],\n        [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],\n        [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]\n    ];\n    const im2Col = backend.runWebGLProgram(im2ColProgram, [xSqueezed], 'float32', customValues);\n    const im2ColReshaped = reshape({\n        inputs: { x: im2Col },\n        backend,\n        attrs: { shape: [1, x2ColShape[0], x2ColShape[1]] }\n    });\n    intermediates.push(im2Col);\n    intermediates.push(im2ColReshaped);\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n    const matmulProgram = new MatMulPackedProgram(im2ColReshaped.shape, w2Row.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = [im2ColReshaped, w2Row];\n    if (bias) {\n        inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n        inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n        const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n        inputs.push($leakyreluAlpha);\n        intermediates.push($leakyreluAlpha);\n    }\n    const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n    const outShape = isChannelsLast ?\n        [1, outHeight, outWidth, convInfo.outChannels] :\n        [1, convInfo.outChannels, outHeight, outWidth];\n    const out = reshape({ inputs: { x: product }, backend, attrs: { shape: outShape } });\n    intermediates.push(product);\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, env } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function conv2d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    let out;\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        out = conv2dByMatMul({ x, filter, convInfo, backend });\n    }\n    else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n        out = conv2dWithIm2Row({ x, filter, convInfo, backend });\n    }\n    else {\n        const program = new Conv2DProgram(convInfo);\n        out = backend.runWebGLProgram(program, [x, filter], 'float32');\n    }\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    backend.disposeIntermediateTensorInfo(out);\n    return outReshaped;\n}\nexport const conv2DConfig = {\n    kernelName: Conv2D,\n    backendName: 'webgl',\n    kernelFunc: conv2d,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Conv2DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv2DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const channelDim = isChannelsLast ? 3 : 1;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv3DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv3DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padFront = filterDepth - 1 - convInfo.padInfo.front;\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropFilter } from '@tensorflow/tfjs-core';\nimport { Conv2DDerFilterProgram } from '../conv_backprop_gpu';\nexport function conv2DBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, dataFormat, dimRoundingMode, filterShape } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    const program = new Conv2DDerFilterProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nexport const conv2DBackpropFilterConfig = {\n    kernelName: Conv2DBackpropFilter,\n    backendName: 'webgl',\n    kernelFunc: conv2DBackpropFilter,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput } from '@tensorflow/tfjs-core';\nimport { Conv2DDerInputProgram } from '../conv_backprop_gpu';\nexport function conv2DBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { inputShape, strides, pad, dataFormat, dimRoundingMode } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n    const program = new Conv2DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\nexport const conv2DBackpropInputConfig = {\n    kernelName: Conv2DBackpropInput,\n    backendName: 'webgl',\n    kernelFunc: conv2DBackpropInput,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D } from '@tensorflow/tfjs-core';\nimport { Conv3DProgram } from '../conv_gpu';\nexport function conv3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations } = attrs;\n    const convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n    const program = new Conv3DProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\nexport const conv3DConfig = {\n    kernelName: Conv3D,\n    backendName: 'webgl',\n    kernelFunc: conv3D,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropFilterV2 } from '@tensorflow/tfjs-core';\nimport { Conv3DDerFilterProgram } from '../conv_backprop_gpu';\nexport function conv3DBackpropFilterV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, filterShape } = attrs;\n    const convInfo = backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);\n    const program = new Conv3DDerFilterProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nexport const conv3DBackpropFilterV2Config = {\n    kernelName: Conv3DBackpropFilterV2,\n    backendName: 'webgl',\n    kernelFunc: conv3DBackpropFilterV2\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2 } from '@tensorflow/tfjs-core';\nimport { Conv3DDerInputProgram } from '../conv_backprop_gpu';\nexport function conv3DBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { pad, strides, inputShape } = attrs;\n    const convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);\n    const program = new Conv3DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\nexport const conv3DBackpropInputConfig = {\n    kernelName: Conv3DBackpropInputV2,\n    backendName: 'webgl',\n    kernelFunc: conv3DBackpropInput,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cos } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\nexport const cos = unaryKernelFunc({ opSnippet: COS });\nexport const cosConfig = {\n    kernelName: Cos,\n    backendName: 'webgl',\n    kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\nexport const cosh = unaryKernelFunc({ opSnippet: COSH });\nexport const coshConfig = {\n    kernelName: Cosh,\n    backendName: 'webgl',\n    kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class CropAndResizeProgram {\n    constructor(imageShape, boxShape, cropSize, method, extrapolationValue) {\n        this.variableNames = ['Image', 'Boxes', 'BoxInd'];\n        this.outputShape = [];\n        const [batch, imageHeight, imageWidth, depth] = imageShape;\n        const [numBoxes,] = boxShape;\n        const [cropHeight, cropWidth] = cropSize;\n        this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n        const methodId = method === 'bilinear' ? 1 : 0;\n        const [inputHeightFloat, inputWidthFloat] = [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n        const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n            [\n                `${(imageHeight - 1) / (cropHeight - 1)}`,\n                '(y2-y1) * height_ratio',\n                `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n            ] :\n            [\n                '0.0',\n                '0.0',\n                `0.5 * (y1+y2) * ${inputHeightFloat}`,\n            ];\n        const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n            [\n                `${(imageWidth - 1) / (cropWidth - 1)}`,\n                '(x2-x1) * width_ratio',\n                `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n            ] :\n            [\n                '0.0',\n                '0.0',\n                `0.5 * (x1+x2) * ${inputWidthFloat}`,\n            ];\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n        this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { CropAndResize } from '@tensorflow/tfjs-core';\nimport { CropAndResizeProgram } from '../crop_and_resize_gpu';\nexport const cropAndResize = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { image, boxes, boxInd } = inputs;\n    const { cropSize, method, extrapolationValue } = attrs;\n    const program = new CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);\n    return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\nexport const cropAndResizeConfig = {\n    kernelName: CropAndResize,\n    backendName: 'webgl',\n    kernelFunc: cropAndResize\n};\n","import { getCoordsDataType } from './shader_compiler';\nexport class CumSumProgram {\n    constructor(shape, exclusive, reverse) {\n        this.variableNames = ['x'];\n        this.customUniforms = [{ name: 'index', type: 'float' }];\n        this.outputShape = shape;\n        const rank = shape.length;\n        const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n        const length = shape[shape.length - 1];\n        let condition = '';\n        let idxString = '';\n        // When exclusive is set, the cumsum op becomes roll op that copies the\n        // value from the previous index based on the direction specified by the\n        // reverse flag.\n        if (exclusive) {\n            condition = reverse ? `end != ${length - 1}` : 'end != 0';\n            idxString = reverse ? 'end + 1' : 'end - 1';\n        }\n        else {\n            condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n            idxString = (reverse ? 'end + pow2' : 'end - pow2');\n        }\n        this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n    }\n}\nfunction getCoords(rank, name) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.x, ${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.x, ${name}.y, ${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n    }\n    else {\n        throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n    }\n}\nfunction getFinalCoord(rank, name) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.w`;\n    }\n    else {\n        throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum } from '@tensorflow/tfjs-core';\nimport { CumSumProgram } from '../cumsum_gpu';\nimport { identity } from './Identity';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, exclusive, reverse } = attrs;\n    const xRank = x.shape.length;\n    const permutation = backend_util.getAxesPermutation([axis], xRank);\n    let permutedX = x;\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n    }\n    const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n    if (permutedAxis !== xRank - 1) {\n        throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.shape.length - 1} ` +\n            `but got axis=${axis}`);\n    }\n    const size = permutedX.shape[permutedAxis];\n    let result = identity({ inputs: { x: permutedX }, backend });\n    // Use cumsum parallel algorithm, ref:\n    // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n    for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n        const program = new CumSumProgram(permutedX.shape, false, reverse);\n        const customValues = [[i]];\n        const prevResult = result;\n        result =\n            backend.runWebGLProgram(program, [result], result.dtype, customValues);\n        backend.disposeIntermediateTensorInfo(prevResult);\n    }\n    // For exclusive cumsum, shift the end result in the direction of sum\n    // and add 0 to the front index.\n    if (exclusive) {\n        const program = new CumSumProgram(permutedX.shape, exclusive, reverse);\n        const prevResult = result;\n        result = backend.runWebGLProgram(program, [result], result.dtype);\n        backend.disposeIntermediateTensorInfo(prevResult);\n    }\n    if (permutation != null) {\n        const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n        const reverseTransposedResult = transpose({ inputs: { x: result }, backend, attrs: { perm: reversePermutation } });\n        backend.disposeIntermediateTensorInfo(result);\n        backend.disposeIntermediateTensorInfo(permutedX);\n        return reverseTransposedResult;\n    }\n    return result;\n}\nexport const cumsumConfig = {\n    kernelName: Cumsum,\n    backendName: 'webgl',\n    kernelFunc: cumsum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImplCPU, bincountReduceImplCPU } from '../kernel_utils/shared';\nexport function denseBincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size, binaryOutput } = attrs;\n    if (x.shape.length === 1) {\n        const xVals = backend.readSync(x.dataId);\n        const weightsVals = backend.readSync(weights.dataId);\n        const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n        return backend.makeTensorInfo([size], weights.dtype, outVals);\n    }\n    else if (x.shape.length === 2) {\n        const xBuf = backend.bufferSync(x);\n        const weightsBuf = backend.bufferSync(weights);\n        const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n        return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n    }\n    throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` +\n        `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n    kernelName: DenseBincount,\n    backendName: 'webgl',\n    kernelFunc: denseBincount\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthToSpaceProgram {\n    constructor(outputShape, blockSize, dataFormat) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        this.outputShape = outputShape;\n        this.blockSize = blockSize;\n        this.dataFormat = dataFormat;\n        this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n    }\n    getHeightCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[1]`;\n        }\n        else {\n            return `coords[2]`;\n        }\n    }\n    getWidthCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[2]`;\n        }\n        else {\n            return `coords[3]`;\n        }\n    }\n    getDepthCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[3]`;\n        }\n        else {\n            return `coords[1]`;\n        }\n    }\n    getOutputDepthSize() {\n        if (this.dataFormat === 'NHWC') {\n            return this.outputShape[3];\n        }\n        else {\n            return this.outputShape[1];\n        }\n    }\n    getInputSamplingString() {\n        if (this.dataFormat === 'NHWC') {\n            return `getX(b, in_h, in_w, in_d)`;\n        }\n        else {\n            return `getX(b, in_d, in_h, in_w)`;\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace } from '@tensorflow/tfjs-core';\nimport { DepthToSpaceProgram } from '../depth_to_space_gpu';\nexport function depthToSpace(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockSize, dataFormat } = attrs;\n    const batchSize = x.shape[0];\n    const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n    const outputShape = (dataFormat === 'NHWC') ?\n        [batchSize, outputHeight, outputWidth, outputDepth] :\n        [batchSize, outputDepth, outputHeight, outputWidth];\n    const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const depthToSpaceConfig = {\n    kernelName: DepthToSpace,\n    backendName: 'webgl',\n    kernelFunc: depthToSpace\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.customUniforms = [\n            { name: 'pads', type: 'ivec2' },\n            { name: 'strides', type: 'ivec2' },\n            { name: 'dilations', type: 'ivec2' },\n            { name: 'inDims', type: 'ivec2' },\n        ];\n        this.outputShape = convInfo.outShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConvPacked2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [\n            { name: 'pads', type: 'ivec2' },\n            { name: 'strides', type: 'ivec2' },\n            { name: 'dilations', type: 'ivec2' },\n            { name: 'inDims', type: 'ivec2' },\n        ];\n        this.outputShape = convInfo.outShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        const padLeft = convInfo.padInfo.left;\n        const strideWidth = convInfo.strideWidth;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const texelsAcross = filterWidth;\n        let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n        for (let c = 0; c < filterWidth; c++) {\n            mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n        }\n        /**\n         * This vectorized implementation works by gathering the values needed for\n         * each output channel's dot product into vec4's and then multiplying them\n         * all together (this happens in the final double for-loop below). Most of\n         * the main loop consists of constructing these vec4's with the minimum\n         * number of texture2D calls, which means making use of all four returned\n         * values from a texture2D call at once.\n         */\n        mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n        for (let c = 0; c < filterWidth; c++) {\n            mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n        }\n        mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n        for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n            const colIndex = texelC * 2;\n            mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n            if (strideWidth === 1) {\n                if (colIndex < filterWidth) {\n                    // If padding is odd, the outer texels have to be composed.\n                    if (padLeft % 2 === 1) {\n                        // TODO: Ensure vec4 previous does not result in redundant sample,\n                        // and avoid setting xTexelRC's that exceed the boundary in the\n                        // first place rather than resetting them to vec4(0)).\n                        // To compute xCOffset:\n                        // - If padding is odd, we must add 1 to ensure we ask for an\n                        // even-numbered row.\n                        // - We subtract 2 to access the previous texel.\n                        mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n                        // This texel has been read in previous iteration if the dilation\n                        // is 1.\n                        if (dilationWidth === 1 && colIndex > 0) {\n                            mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);\n                `;\n                        }\n                        else {\n                            mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n                        }\n                    }\n                    else {\n                        // Padding is even, so xRC corresponds to a single texel.\n                        mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n                    }\n                    if (colIndex + 1 < filterWidth) {\n                        // If dilation is even, the second entry should match the first\n                        // (either both are composed or both are single samples). But if\n                        // dilation is odd, then the second entry should be the opposite\n                        // of the first (if the first is composed, the second is a single\n                        // sample, and vice versa.)\n                        const nextTexelOffset = padLeft % 2 === 0 ?\n                            util.nearestLargerEven(dilationWidth) :\n                            dilationWidth;\n                        if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                            (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                            mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n                            // If dilation > 1 then the xRC's will not be able to share any\n                            // values, so each xRC will require two unique calls to getX.\n                            if (dilationWidth > 1) {\n                                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                      xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${colIndex}Ready = 1;\n                    }\n                    `;\n                            }\n                            mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);\n                  `;\n                        }\n                        else {\n                            // If dilation is 1 and padding is odd, we have already read the\n                            // texel when constructing the previous x value. Here we can\n                            // simply skip the texture read.\n                            if (nextTexelOffset === 1) {\n                                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n                            }\n                            else {\n                                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n                            }\n                        }\n                    }\n                }\n            }\n            else { // stride === 2\n                if (colIndex < filterWidth) {\n                    // Depending on whether padLeft is even or odd, we want either the\n                    // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n                    // even, xC${colIndex +1} is simply the zw channels of texels we've\n                    // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n                    // need to come from the xy channels of a new texel, hence the `\n                    // vec4\n                    // final` initialized below.\n                    if (padLeft % 2 === 1) {\n                        mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n              `;\n                        if (colIndex + 1 < filterWidth) {\n                            mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n                        }\n                    }\n                    else {\n                        mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n                        if (colIndex + 1 < filterWidth) {\n                            mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n                `;\n                        }\n                    }\n                }\n            }\n            // localize the dotProd accumulation within the loop, the theory is for\n            // GPU with limited cache, accumulate sum across large amount of\n            // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n            // 50 variables)\n            if (colIndex < filterWidth) {\n                mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n                if (colIndex + 1 < filterWidth) {\n                    mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n                }\n            }\n        }\n        mainLoop += `\n    }\n  `;\n        mainLoop += `\n      }\n    `;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, env, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nexport function depthwiseConv2dNative(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations, dimRoundingMode } = attrs;\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    let program;\n    if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1) {\n        program = new DepthwiseConvPacked2DProgram(convInfo);\n    }\n    else {\n        program = new DepthwiseConv2DProgram(convInfo);\n    }\n    const customValues = [\n        [convInfo.padInfo.top, convInfo.padInfo.left],\n        [convInfo.strideHeight, convInfo.strideWidth],\n        [convInfo.dilationHeight, convInfo.dilationWidth],\n        [convInfo.inHeight, convInfo.inWidth]\n    ];\n    return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\nexport const depthwiseConv2dNativeConfig = {\n    kernelName: DepthwiseConv2dNative,\n    backendName: 'webgl',\n    kernelFunc: depthwiseConv2dNative,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthwiseConv2DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class DepthwiseConv2DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropFilter } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DDerFilterProgram } from '../conv_backprop_gpu_depthwise';\nexport function depthwiseConv2dNativeBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, filterShape } = attrs;\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nexport const depthwiseConv2dNativeBackpropFilterConfig = {\n    kernelName: DepthwiseConv2dNativeBackpropFilter,\n    backendName: 'webgl',\n    kernelFunc: depthwiseConv2dNativeBackpropFilter\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DDerInputProgram } from '../conv_backprop_gpu_depthwise';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, inputShape } = attrs;\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const program = new DepthwiseConv2DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\nexport const depthwiseConv2dNativeBackpropInputConfig = {\n    kernelName: DepthwiseConv2dNativeBackpropInput,\n    backendName: 'webgl',\n    kernelFunc: depthwiseConv2dNativeBackpropInput\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DiagProgram {\n    constructor(size) {\n        this.variableNames = ['X'];\n        this.outputShape = [size, size];\n        this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Diag, util } from '@tensorflow/tfjs-core';\nimport { DiagProgram } from '../diag_gpu';\nimport { reshape } from './Reshape';\nexport function diag(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    const outShape = [...x.shape, ...x.shape];\n    const xSize = util.sizeFromShape(x.shape);\n    const flat = reshape({ inputs: { x }, backend, attrs: { shape: [xSize] } });\n    const program = new DiagProgram(xSize);\n    const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n    const out = reshape({ inputs: { x: res }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo(flat);\n    backend.disposeIntermediateTensorInfo(res);\n    return out;\n}\nexport const diagConfig = {\n    kernelName: Diag,\n    backendName: 'webgl',\n    kernelFunc: diag\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Dilation2DProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const { inHeight, inWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth } = convInfo;\n        const { top: padTop, left: padLeft } = padInfo;\n        this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D } from '@tensorflow/tfjs-core';\nimport { Dilation2DProgram } from '../dilation_gpu';\nimport { reshape } from './Reshape';\nexport function dilation2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations } = attrs;\n    const convInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n    let out;\n    const program = new Dilation2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    backend.disposeIntermediateTensorInfo(out);\n    return outReshaped;\n}\nexport const dilation2DConfig = {\n    kernelName: Dilation2D,\n    backendName: 'webgl',\n    kernelFunc: dilation2D,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Einsum, util } from '@tensorflow/tfjs-core';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\nexport function einsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { equation } = attrs;\n    const tensors = inputs;\n    const { allDims, summedDims, idDims } = backend_util.decodeEinsumEquation(equation, tensors.length);\n    backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n    const { path, steps } = backend_util.getEinsumComputePath(summedDims, idDims);\n    const nSteps = steps.length;\n    let out = null;\n    let numDimsRemaining = allDims.length;\n    const tensorsToDispose = [];\n    for (let i = 0; i < nSteps; ++i) {\n        for (const idTerm of steps[i]) {\n            const { permutationIndices: perm, expandDims: dimsToExpand } = backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n            let x;\n            if (backend_util.isIdentityPermutation(perm)) {\n                x = tensors[idTerm];\n            }\n            else {\n                x = transpose({ inputs: { x: tensors[idTerm] }, backend, attrs: { perm } });\n                tensorsToDispose.push(x);\n            }\n            const targetShape = x.shape.slice();\n            for (let k = 0; k < dimsToExpand.length; ++k) {\n                targetShape.splice(dimsToExpand[k], 0, 1);\n            }\n            if (!util.arraysEqual(x.shape, targetShape)) {\n                x = reshape({ inputs: { x }, backend, attrs: { shape: targetShape } });\n                tensorsToDispose.push(x);\n            }\n            if (out === null) {\n                out = x;\n            }\n            else {\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                out = multiply({ inputs: { a: x, b: out }, backend });\n                tensorsToDispose.push(out);\n            }\n        }\n        if (i < nSteps - 1) {\n            if (path[i] >= 0) {\n                out = sum({\n                    inputs: { x: out },\n                    backend,\n                    attrs: {\n                        axis: path[i] - (allDims.length - numDimsRemaining),\n                        keepDims: false\n                    }\n                });\n                tensorsToDispose.push(out);\n            }\n            numDimsRemaining--;\n        }\n    }\n    // Clean up intermediate tensors.\n    for (const tensorInfo of tensorsToDispose) {\n        if (tensorInfo === out) {\n            continue;\n        }\n        backend.disposeIntermediateTensorInfo(tensorInfo);\n    }\n    return out;\n}\nexport const einsumConfig = {\n    kernelName: Einsum,\n    backendName: 'webgl',\n    kernelFunc: einsum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Elu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nconst elu = unaryKernelFunc({ opSnippet: ELU, packedOpSnippet: ELU_PACKED });\nexport const eluConfig = {\n    kernelName: Elu,\n    backendName: 'webgl',\n    kernelFunc: elu\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { EluGrad, env } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nexport const eluGrad = (args) => {\n    const { inputs, backend } = args;\n    const { dy, y } = inputs;\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n        new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n    return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n};\nexport const eluGradConfig = {\n    kernelName: EluGrad,\n    backendName: 'webgl',\n    kernelFunc: eluGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { equalImplCPU } from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\nconst EQUAL = `return float(a == b);`;\nexport const equal = binaryKernelFunc({\n    opSnippet: EQUAL,\n    packedOpSnippet: PACKED_EQUAL,\n    dtype: 'bool',\n    cpuKernelImpl: equalImplCPU,\n});\nexport const equalConfig = {\n    kernelName: Equal,\n    backendName: 'webgl',\n    kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Erf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\nexport const erf = unaryKernelFunc({ opSnippet: ERF });\nexport const erfConfig = {\n    kernelName: Erf,\n    backendName: 'webgl',\n    kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { expImplCPU } from '../kernel_utils/shared';\nexport const EXP = CHECK_NAN_SNIPPET_UNARY + `\n  return exp(x);\n`;\nconst EXP_PACKED = `\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const exp = unaryKernelFunc({\n    opSnippet: EXP,\n    packedOpSnippet: EXP_PACKED,\n    cpuKernelImpl: expImplCPU,\n    dtype: 'float32',\n});\nexport const expConfig = {\n    kernelName: Exp,\n    backendName: 'webgl',\n    kernelFunc: exp\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n    const { inputs, attrs, backend } = args;\n    const { dim } = attrs;\n    const { input } = inputs;\n    const inputRank = input.shape.length;\n    const newShape = input.shape.slice();\n    let $dim = dim;\n    if (dim < 0) {\n        // Negative value is counted from the tail of rank.\n        util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n        $dim = inputRank + dim + 1;\n    }\n    newShape.splice($dim, 0, 1);\n    return reshape({ inputs: { x: input }, backend, attrs: { shape: newShape } });\n}\nexport const expandDimsConfig = {\n    kernelName: ExpandDims,\n    backendName: 'webgl',\n    kernelFunc: expandDims,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { expm1ImplCPU } from '../kernel_utils/shared';\nconst EXPM1 = `return exp(x) - 1.0;`;\nexport const expm1 = unaryKernelFunc({ opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU });\nexport const expm1Config = {\n    kernelName: Expm1,\n    backendName: 'webgl',\n    kernelFunc: expm1\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FFTProgram {\n    constructor(component, inputShape, inverse) {\n        this.variableNames = ['real', 'imag'];\n        const innerDim = inputShape[1];\n        this.outputShape = inputShape;\n        const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n        const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n        let opString;\n        if (component === 'real') {\n            opString = 'return real * expR - imag * expI;';\n        }\n        else if (component === 'imag') {\n            opString = 'return real * expI + imag * expR;';\n        }\n        else {\n            throw new Error(`FFT component must be either \"real\" or \"imag\", got ${component}.`);\n        }\n        this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from '../fft_gpu';\nimport { complex } from './Complex';\nimport { reshape } from './Reshape';\nexport function fftImpl(x, inverse, backend) {\n    const xData = backend.texData.get(x.dataId);\n    const inputSize = util.sizeFromShape(x.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = x.shape[x.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = reshape({ inputs: { x }, backend, attrs: { shape: [batch, innerDimensionSize] } });\n    const xShape = input2D.shape;\n    const realProgram = new FFTProgram('real', xShape, inverse);\n    const imagProgram = new FFTProgram('imag', xShape, inverse);\n    const inputs = [\n        {\n            dataId: xData.complexTensorInfos.real.dataId,\n            dtype: xData.complexTensorInfos.real.dtype,\n            shape: xShape\n        },\n        {\n            dataId: xData.complexTensorInfos.imag.dataId,\n            dtype: xData.complexTensorInfos.imag.dtype,\n            shape: xShape\n        }\n    ];\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n    const complexOutput = complex({ inputs: { real: realPart, imag: imagPart }, backend });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    const complexOutputReshaped = reshape({ inputs: { x: complexOutput }, backend, attrs: { shape: x.shape } });\n    backend.disposeIntermediateTensorInfo(input2D);\n    backend.disposeIntermediateTensorInfo(complexOutput);\n    return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FFT } from '@tensorflow/tfjs-core';\nimport { fftImpl } from './FFT_impl';\nexport function fft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    return fftImpl(input, false /* inverse */, backend);\n}\nexport const fftConfig = {\n    kernelName: FFT,\n    backendName: 'webgl',\n    kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FillProgram {\n    constructor(shape, value) {\n        this.outputShape = [];\n        this.customUniforms = [{ name: 'value', type: 'float' }];\n        this.variableNames = ['x'];\n        this.outputShape = shape;\n        this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Fill, util } from '@tensorflow/tfjs-core';\nimport { FillProgram } from '../fill_gpu';\nexport function fill(args) {\n    const { backend, attrs } = args;\n    const { shape, value } = attrs;\n    let { dtype } = attrs;\n    dtype = dtype || util.inferDtype(value);\n    if (dtype === 'string') {\n        // String type should be handled in CPU memory.\n        const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n        values.fill(value);\n        return backend.makeTensorInfo(shape, dtype, values);\n    }\n    else {\n        const program = new FillProgram(shape, value);\n        const customValues = [[value]];\n        return backend.runWebGLProgram(program, [], dtype, customValues);\n    }\n}\nexport const fillConfig = {\n    kernelName: Fill,\n    backendName: 'webgl',\n    kernelFunc: fill\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FlipLeftRightProgram {\n    constructor(imageShape) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        const imageWidth = imageShape[2];\n        this.outputShape = imageShape;\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight } from '@tensorflow/tfjs-core';\nimport { FlipLeftRightProgram } from '../flip_left_right_gpu';\nexport const flipLeftRightConfig = {\n    kernelName: FlipLeftRight,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, backend }) => {\n        const { image } = inputs;\n        const webglBackend = backend;\n        const program = new FlipLeftRightProgram(image.shape);\n        const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n        return output;\n    }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { floorImplCPU } from '../kernel_utils/shared';\nconst FLOOR = `return floor(x);`;\nexport const floor = unaryKernelFunc({ opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU });\nexport const floorConfig = {\n    kernelName: Floor,\n    backendName: 'webgl',\n    kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FloorDiv } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\nexport const floorDiv = binaryKernelFunc({ opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32' });\nexport const floorDivConfig = {\n    kernelName: FloorDiv,\n    backendName: 'webgl',\n    kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from '../../glsl_version';\nexport class FromPixelsProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        const glsl = getGlslDifferences();\n        const [height, width,] = outputShape;\n        this.outputShape = outputShape;\n        this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from '../../glsl_version';\nexport class FromPixelsPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        const glsl = getGlslDifferences();\n        const [height, width,] = outputShape;\n        this.outputShape = outputShape;\n        this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n    kernelName: FromPixels,\n    backendName: 'webgl',\n    kernelFunc: fromPixels,\n};\nlet fromPixels2DContext;\nfunction fromPixels(args) {\n    const { inputs, backend, attrs } = args;\n    let { pixels } = inputs;\n    const { numChannels } = attrs;\n    const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement;\n    const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement;\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    const texShape = [height, width];\n    const outShape = [height, width, numChannels];\n    if (isImage || isVideo) {\n        if (fromPixels2DContext == null) {\n            fromPixels2DContext = document.createElement('canvas').getContext('2d');\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n    }\n    const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n    // This is a byte texture with pixels.\n    backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n    backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n    const program = env().getBool('WEBGL_PACK') ?\n        new FromPixelsPackedProgram(outShape) :\n        new FromPixelsProgram(outShape);\n    const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n    backend.disposeData(tempPixelHandle.dataId);\n    return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedConv2D, util } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function fusedConv2d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    let out;\n    const intermediates = [];\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        out = conv2dByMatMul({\n            x,\n            filter,\n            convInfo,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n    }\n    else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n        out = conv2dWithIm2Row({\n            x,\n            filter,\n            convInfo,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n    }\n    else {\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const hasLeakyreluAlpha = activation === 'leakyrelu';\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n        const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n        const inputs = [x, filter];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (preluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        if (hasLeakyreluAlpha) {\n            const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n            inputs.push($leakyreluAlpha);\n            intermediates.push($leakyreluAlpha);\n        }\n        out = backend.runWebGLProgram(program, inputs, 'float32');\n    }\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    intermediates.push(out);\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outReshaped;\n}\nexport const fusedConv2DConfig = {\n    kernelName: FusedConv2D,\n    backendName: 'webgl',\n    kernelFunc: fusedConv2d,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nexport function fusedDepthwiseConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    const intermediates = [];\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1;\n    const fusedActivation = activation ?\n        mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n        null;\n    const programInputs = [x, filter];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    if (hasBias) {\n        programInputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n        programInputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n        const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n        programInputs.push($leakyreluAlpha);\n        intermediates.push($leakyreluAlpha);\n    }\n    let program;\n    if (shouldPackDepthwiseConv) {\n        program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    }\n    else {\n        program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    }\n    const customValues = [\n        [convInfo.padInfo.top, convInfo.padInfo.left],\n        [convInfo.strideHeight, convInfo.strideWidth],\n        [convInfo.dilationHeight, convInfo.dilationWidth],\n        [convInfo.inHeight, convInfo.inWidth]\n    ];\n    const result = backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n    kernelName: FusedDepthwiseConv2D,\n    backendName: 'webgl',\n    kernelFunc: fusedDepthwiseConv2D,\n};\n","import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n    constructor(sliceDim, strides, shape) {\n        this.sliceDim = sliceDim;\n        this.strides = strides;\n        this.variableNames = ['x', 'indices'];\n        this.outputShape = shape;\n        const stridesType = getCoordsDataType(strides.length);\n        const dtype = getCoordsDataType(shape.length);\n        const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { GatherNDProgram } from '../gather_nd_gpu';\nimport { gatherNdImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherNd(args) {\n    const { inputs, backend } = args;\n    const { params, indices } = inputs;\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    const paramsSize = util.sizeFromShape(params.shape);\n    const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n    const flattenIndices = reshape({ inputs: { x: indices }, backend, attrs: { shape: [numSlices, sliceRank] } });\n    const flattenX = reshape({\n        inputs: { x: params },\n        backend,\n        attrs: { shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize] }\n    });\n    if (backend.shouldExecuteOnCPU([params, indices]) ||\n        params.dtype === 'string') {\n        const indicesData = backend.readSync(indices.dataId);\n        const paramsBuf = backend.bufferSync(params);\n        const outValue = gatherNdImplCPU(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n        return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n    }\n    const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: resultShape } });\n    backend.disposeIntermediateTensorInfo(flattenIndices);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(res);\n    return reshaped;\n}\nexport const gatherNdConfig = {\n    kernelName: GatherNd,\n    backendName: 'webgl',\n    kernelFunc: gatherNd\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class GatherProgram {\n    constructor(aShape, outputShape) {\n        this.variableNames = ['A', 'indices'];\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const sourceCoords = getSourceCoords(aShape, 2);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n    }\n}\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape, axis) {\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        if (i === 2) {\n            sourceCoords.push('index');\n        }\n        else {\n            sourceCoords.push(`${currentCoords[i]}`);\n        }\n    }\n    return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util, env } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from '../gather_gpu';\nimport { gatherV2ImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, indices } = inputs;\n    const { axis, batchDims } = attrs;\n    const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n    if (env().get('DEBUG')) {\n        // In debug mode, throw error when any index is out of bound.\n        // Otherwise, just fill out of bounds with zeroes.\n        const indicesVals = backend.readSync(indices.dataId);\n        const axisDim = x.shape[parsedAxis];\n        for (let i = 0; i < indicesVals.length; ++i) {\n            const index = indicesVals[i];\n            util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n        }\n    }\n    const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const toDispose = [];\n    const flattenX = reshape({\n        inputs: { x },\n        backend,\n        attrs: {\n            shape: [\n                shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n                shapeInfo.sliceSize\n            ]\n        }\n    });\n    const flattenIndex = reshape({\n        inputs: { x: indices },\n        backend,\n        attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }\n    });\n    toDispose.push(flattenX);\n    toDispose.push(flattenIndex);\n    const flattenOutputShape = [\n        shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n        shapeInfo.sliceSize\n    ];\n    if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n        const indicesBuf = backend.bufferSync(flattenIndex);\n        const xBuf = backend.bufferSync(flattenX);\n        const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n    }\n    const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n    toDispose.push(res);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: shapeInfo.outputShape } });\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n}\nexport const gatherV2Config = {\n    kernelName: GatherV2,\n    backendName: 'webgl',\n    kernelFunc: gatherV2\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { greaterImplCPU } from '../kernel_utils/shared';\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\nexport const greater = binaryKernelFunc({\n    opSnippet: GREATER,\n    packedOpSnippet: GREATER_PACKED,\n    cpuKernelImpl: greaterImplCPU,\n    dtype: 'bool'\n});\nexport const greaterConfig = {\n    kernelName: Greater,\n    backendName: 'webgl',\n    kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { greaterEqualImplCPU } from '../kernel_utils/shared';\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\nexport const greaterEqual = binaryKernelFunc({\n    opSnippet: GREATER_EQUAL,\n    packedOpSnippet: GREATER_EQUAL_PACKED,\n    dtype: 'bool',\n    cpuKernelImpl: greaterEqualImplCPU\n});\nexport const greaterEqualConfig = {\n    kernelName: GreaterEqual,\n    backendName: 'webgl',\n    kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IFFT } from '@tensorflow/tfjs-core';\nimport { fftImpl } from './FFT_impl';\nexport function ifft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    return fftImpl(input, true /* inverse */, backend);\n}\nexport const ifftConfig = {\n    kernelName: IFFT,\n    backendName: 'webgl',\n    kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsFinite } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\nexport const isFinite = unaryKernelFunc({ opSnippet: IS_FINITE, dtype: 'bool' });\nexport const isFiniteConfig = {\n    kernelName: IsFinite,\n    backendName: 'webgl',\n    kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsInf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst IS_INF = `return float(isinf(x));`;\nexport const isInf = unaryKernelFunc({ opSnippet: IS_INF, dtype: 'bool' });\nexport const isInfConfig = {\n    kernelName: IsInf,\n    backendName: 'webgl',\n    kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsNan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst IS_NAN = `return float(isnan(x));`;\nexport const isNaN = unaryKernelFunc({ opSnippet: IS_NAN, dtype: 'bool' });\nexport const isNaNConfig = {\n    kernelName: IsNan,\n    backendName: 'webgl',\n    kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { lessImplCPU } from '../kernel_utils/shared';\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\nexport const less = binaryKernelFunc({\n    opSnippet: LESS,\n    packedOpSnippet: LESS_PACKED,\n    cpuKernelImpl: lessImplCPU,\n    dtype: 'bool'\n});\nexport const lessConfig = {\n    kernelName: Less,\n    backendName: 'webgl',\n    kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { lessEqualImplCPU } from '../kernel_utils/shared';\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\nexport const lessEqual = binaryKernelFunc({\n    opSnippet: LESS_EQUAL,\n    packedOpSnippet: LESS_EQUAL_PACKED,\n    cpuKernelImpl: lessEqualImplCPU,\n    dtype: 'bool'\n});\nexport const lessEqualConfig = {\n    kernelName: LessEqual,\n    backendName: 'webgl',\n    kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LinSpace } from '@tensorflow/tfjs-core';\nimport { linSpaceImplCPU } from '../kernel_utils/shared';\nexport function linSpace(args) {\n    const { backend, attrs } = args;\n    const { start, stop, num } = attrs;\n    // TODO: Use CPU implementation due to the precision problem in Safari.\n    const outVals = linSpaceImplCPU(start, stop, num);\n    return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\nexport const linSpaceConfig = {\n    kernelName: LinSpace,\n    backendName: 'webgl',\n    kernelFunc: linSpace\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { logImplCPU } from '../kernel_utils/shared';\n// Windows chrome return 0 if the input is negative value. We will specifically\n// return NaN if the input is 0 to solve compatiblity issue.\nconst LOG = CHECK_NAN_SNIPPET_UNARY + `\n  return x < 0.0 ? 0./0. : log(x);\n`;\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n`;\nexport const log = unaryKernelFunc({ opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU });\nexport const logConfig = {\n    kernelName: Log,\n    backendName: 'webgl',\n    kernelFunc: log\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log1p } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOG1P = CHECK_NAN_SNIPPET_UNARY + `\n  return log(1.0 + x);\n`;\nexport const log1p = unaryKernelFunc({ opSnippet: LOG1P });\nexport const log1pConfig = {\n    kernelName: Log1p,\n    backendName: 'webgl',\n    kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalAnd } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\nexport const logicalAnd = binaryKernelFunc({\n    opSnippet: LOGICAL_AND,\n    packedOpSnippet: LOGICAL_AND_PACKED,\n    dtype: 'bool'\n});\nexport const logicalAndConfig = {\n    kernelName: LogicalAnd,\n    backendName: 'webgl',\n    kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalNot } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\nexport const logicalNot = unaryKernelFunc({ opSnippet: LOGICAL_NOT });\nexport const logicalNotConfig = {\n    kernelName: LogicalNot,\n    backendName: 'webgl',\n    kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalOr } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\nexport const logicalOr = binaryKernelFunc({ opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool' });\nexport const logicalOrConfig = {\n    kernelName: LogicalOr,\n    backendName: 'webgl',\n    kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNProgram {\n    constructor(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        const rad = radius;\n        const maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        // optimize pow(bias + alpha * sum, -beta)\n        // src: https://github.com/tensorflow/tensorflow/..\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n        let powOperator;\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\n        if (beta === 0.5) {\n            powOperator = `inversesqrt(${basis})`;\n        }\n        else if (beta === 1.0) {\n            powOperator = `1.0/(${basis})`;\n        }\n        else {\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\n        }\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNPackedProgram {\n    constructor(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const rad = radius;\n        const maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        // optimize pow(bias + alpha * sum, -beta)\n        // src: https://github.com/tensorflow/tensorflow/..\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n        let powOperator;\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\n        if (beta === 0.5) {\n            powOperator = `inversesqrt(${basis})`;\n        }\n        else if (beta === 1.0) {\n            powOperator = `1.0/(${basis})`;\n        }\n        else {\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\n        }\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, LRN } from '@tensorflow/tfjs-core';\nimport { LRNProgram } from '../lrn_gpu';\nimport { LRNPackedProgram } from '../lrn_packed_gpu';\nexport const lrn = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n        new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n};\n// tslint:disable-next-line: variable-name\nexport const LRNConfig = {\n    kernelName: LRN,\n    backendName: 'webgl',\n    kernelFunc: lrn\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNGradProgram {\n    constructor(inputShape, depthRadius, bias, alpha, beta) {\n        this.variableNames = ['inputImage', 'outputImage', 'dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        this.depth = inputShape[3];\n        this.depthRadius = depthRadius;\n        this.bias = bias;\n        this.alpha = alpha;\n        this.beta = beta;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRNGrad } from '@tensorflow/tfjs-core';\nimport { LRNGradProgram } from '../lrn_grad_gpu';\nexport const lrnGrad = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x, y, dy } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n    return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig = {\n    kernelName: LRNGrad,\n    backendName: 'webgl',\n    kernelFunc: lrnGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from '../kernels/Reshape';\nexport function maxImpl(x, reduceShape, outShape, backend) {\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = reshape({ inputs: { x }, attrs: { shape: [batchSize, inSize] }, backend });\n    const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n    const reshapedOutput = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxImplCPU } from '../kernel_utils/shared';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport function max(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { reductionIndices, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const maxInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    let maxInput = x;\n    if (maxInputIsTransposed) {\n        if (shouldExecuteOnCPU) {\n            const xTexData = backend.texData.get(maxInput.dataId);\n            const values = xTexData.values;\n            const newShape = new Array(xRank);\n            for (let i = 0; i < newShape.length; i++) {\n                newShape[i] = x.shape[permutedAxes[i]];\n            }\n            const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n            maxInput = backend.makeTensorInfo(newShape, x.dtype);\n            const maxInputData = backend.texData.get(maxInput.dataId);\n            maxInputData.values = maxInputValues;\n        }\n        else {\n            maxInput = transposeImpl(x, permutedAxes, backend);\n        }\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n    let outShape = maxOutShape;\n    if (keepDims) {\n        // rather than reshape at the end, set the target shape here.\n        outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    }\n    let out;\n    if (shouldExecuteOnCPU) {\n        const xTexData = backend.texData.get(maxInput.dataId);\n        const values = xTexData.values;\n        const outValues = maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n        out = backend.makeTensorInfo(outShape, x.dtype);\n        const outData = backend.texData.get(out.dataId);\n        outData.values = outValues;\n    }\n    else {\n        out = maxImpl(maxInput, reduceShape, outShape, backend);\n    }\n    if (maxInputIsTransposed) {\n        backend.disposeIntermediateTensorInfo(maxInput);\n    }\n    return out;\n}\nexport const maxConfig = {\n    kernelName: Max,\n    backendName: 'webgl',\n    kernelFunc: max\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET } from '../binaryop_gpu';\nimport { CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { maximumImplCPU } from '../kernel_utils/shared';\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const maximum = binaryKernelFunc({\n    opSnippet: MAXIMUM,\n    packedOpSnippet: MAXIMUM_PACKED,\n    cpuKernelImpl: maximumImplCPU\n});\nexport const maximumConfig = {\n    kernelName: Maximum,\n    backendName: 'webgl',\n    kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'maxPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        return identity({ inputs: { x }, backend });\n    }\n    const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n    return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nexport const maxPoolConfig = {\n    kernelName: MaxPool,\n    backendName: 'webgl',\n    kernelFunc: maxPool\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3D } from '@tensorflow/tfjs-core';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function maxPool3d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dataFormat, dimRoundingMode } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n    const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n    return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nexport const maxPool3DConfig = {\n    kernelName: MaxPool3D,\n    backendName: 'webgl',\n    kernelFunc: maxPool3d\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MaxPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'maxPos'];\n        this.outputShape = convInfo.inShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class MaxPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'maxPos'];\n        this.outputShape = convInfo.inShape;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool3DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function maxPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', true /* get positions */);\n    const maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n    const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n    const result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n    backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n    return result;\n}\nexport const maxPool3DGradConfig = {\n    kernelName: MaxPool3DGrad,\n    backendName: 'webgl',\n    kernelFunc: maxPool3DGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool2DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nexport function maxPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input, output } = inputs;\n    const x = input;\n    assertNotComplex([input, output], 'maxPoolGrad');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const getPositions = true;\n    const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);\n    const maxPoolPositions = backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n    const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n    const result = backend.runWebGLProgram(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n    backend.disposeIntermediateTensorInfo(maxPoolPositions);\n    return result;\n}\nexport const maxPoolGradConfig = {\n    kernelName: MaxPoolGrad,\n    backendName: 'webgl',\n    kernelFunc: maxPoolGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pool2DProgram } from '../pool_gpu';\nexport function maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, backend) {\n    let program = new Pool2DProgram(convInfo, 'max', false);\n    const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n    program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n    const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n    return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n    kernelName: MaxPoolWithArgmax,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { filterSize, strides, pad, includeBatchInIndex } = attrs;\n        const webglBackend = backend;\n        util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\n        const dilations = [1, 1];\n        util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n        const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n        const [result, indexes] = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n        return [result, indexes];\n    }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from '../kernels/Reshape';\nexport function meanImpl(x, reduceShape, outShape, backend) {\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = reshape({ inputs: { x }, attrs: { shape: [batchSize, inSize] }, backend });\n    const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n    const reshapedOutput = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { meanImpl } from './Mean_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport const meanConfig = {\n    kernelName: Mean,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { keepDims, axis } = attrs;\n        const webglBackend = backend;\n        const xRank = x.shape.length;\n        const origAxes = util.parseAxisParam(axis, x.shape);\n        let axes = origAxes;\n        const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n        const meanInputIsTransposed = permutedAxes != null;\n        const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n        const intermediates = [];\n        let meanInput = x;\n        if (meanInputIsTransposed) {\n            if (shouldExecuteOnCPU) {\n                const xTexData = webglBackend.texData.get(meanInput.dataId);\n                const values = xTexData.values;\n                const newShape = new Array(xRank);\n                for (let i = 0; i < newShape.length; i++) {\n                    newShape[i] = x.shape[permutedAxes[i]];\n                }\n                const meanInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n                meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n                const meanInputData = webglBackend.texData.get(meanInput.dataId);\n                meanInputData.values = meanInputValues;\n            }\n            else {\n                meanInput = transposeImpl(x, permutedAxes, webglBackend);\n            }\n            intermediates.push(meanInput);\n            axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        }\n        backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n        const [meanOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n        let outShape = meanOutShape;\n        if (keepDims) {\n            // rather than reshape at the end, set the target shape here.\n            outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n        }\n        const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n        for (const i of intermediates) {\n            webglBackend.disposeIntermediateTensorInfo(i);\n        }\n        return out;\n    }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Min, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function min(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n    let res;\n    if (keepDims) {\n        const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });\n    }\n    else {\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n    }\n    backend.disposeIntermediateTensorInfo(a2D);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return res;\n}\nexport const minConfig = {\n    kernelName: Min,\n    backendName: 'webgl',\n    kernelFunc: min\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET } from '../binaryop_gpu';\nimport { CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { minimumImplCPU } from '../kernel_utils/shared';\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const minimum = binaryKernelFunc({\n    opSnippet: MINIMUM,\n    packedOpSnippet: MINIMUM_PACKED,\n    cpuKernelImpl: minimumImplCPU\n});\nexport const minimumConfig = {\n    kernelName: Minimum,\n    backendName: 'webgl',\n    kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class MirrorPadProgram {\n    constructor(xShape, paddings, mode) {\n        this.variableNames = ['x'];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        const offset = mode === 'reflect' ? 0 : 1;\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram {\n    constructor(xShape, paddings, mode) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const coords = getChannels('rc', rank);\n        const source = getChannels('source', rank);\n        const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n        const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n        const offset = mode === 'reflect' ? 0 : 1;\n        let mainLoop = '';\n        if (rank === 1) {\n            const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n            mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n        }\n        else {\n            const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n            mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n        }\n        this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, MirrorPad } from '@tensorflow/tfjs-core';\nimport { MirrorPadProgram } from '../mirror_pad_gpu';\nimport { MirrorPadPackedProgram } from '../mirror_pad_packed_gpu';\nexport const mirrorPadKernelFunc = ({ inputs, backend, attrs }) => {\n    const { x } = inputs;\n    const { paddings, mode } = attrs;\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new MirrorPadPackedProgram(x.shape, paddings, mode) :\n        new MirrorPadProgram(x.shape, paddings, mode);\n    const output = backend.runWebGLProgram(program, [x], x.dtype);\n    return output;\n};\nexport const mirrorPadConfig = {\n    kernelName: MirrorPad,\n    backendName: 'webgl',\n    kernelFunc: mirrorPadKernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mod } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\nexport const mod = binaryKernelFunc({\n    opSnippet: MOD,\n    packedOpSnippet: MOD_PACKED,\n});\nexport const modConfig = {\n    kernelName: Mod,\n    backendName: 'webgl',\n    kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MultinomialProgram {\n    constructor(batchSize, numOutcomes, numSamples) {\n        this.variableNames = ['probs'];\n        this.customUniforms = [{ name: 'seed', type: 'float' }];\n        this.outputShape = [batchSize, numSamples];\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\nexport const realDiv = binaryKernelFunc({ opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true });\nexport const realDivConfig = {\n    kernelName: RealDiv,\n    backendName: 'webgl',\n    kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { subImplCPU as cpuSub } from '../kernel_utils/shared';\nconst SUB = 'return a - b;';\nexport const sub = binaryKernelFunc({\n    opSnippet: SUB,\n    packedOpSnippet: SUB,\n    supportsComplex: true,\n    cpuKernelImpl: cpuSub\n});\nexport const subConfig = {\n    kernelName: Sub,\n    backendName: 'webgl',\n    kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { realDiv } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { dim } = attrs;\n    const axes = util.parseAxisParam([dim], logits.shape);\n    const maxLogit = max({\n        inputs: { x: logits },\n        backend,\n        attrs: { reductionIndices: axes, keepDims: false }\n    });\n    const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const maxLogitsReshaped = reshape({ inputs: { x: maxLogit }, backend, attrs: { shape: expandedShape } });\n    const a = sub({ inputs: { a: logits, b: maxLogitsReshaped }, backend });\n    const b = exp({ inputs: { x: a }, backend });\n    const sumExp = sum({ inputs: { x: b }, backend, attrs: { axis: axes, keepDims: false } });\n    const sumExpReshaped = reshape({ inputs: { x: sumExp }, backend, attrs: { shape: expandedShape } });\n    const res = realDiv({ inputs: { a: b, b: sumExpReshaped }, backend });\n    backend.disposeIntermediateTensorInfo(maxLogit);\n    backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n    backend.disposeIntermediateTensorInfo(a);\n    backend.disposeIntermediateTensorInfo(b);\n    backend.disposeIntermediateTensorInfo(sumExp);\n    backend.disposeIntermediateTensorInfo(sumExpReshaped);\n    return res;\n}\nexport const softmaxConfig = {\n    kernelName: Softmax,\n    backendName: 'webgl',\n    kernelFunc: softmax\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { MultinomialProgram } from '../multinomial_gpu';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { numSamples, seed, normalized } = attrs;\n    const probs = normalized ?\n        logits :\n        softmax({ inputs: { logits }, backend, attrs: { dim: logits.shape.length - 1 } });\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const customValues = [[seed]];\n    const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n    if (!normalized) {\n        backend.disposeIntermediateTensorInfo(probs);\n    }\n    return res;\n}\nexport const multinomialConfig = {\n    kernelName: Multinomial,\n    backendName: 'webgl',\n    kernelFunc: multinomial\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Neg } from '@tensorflow/tfjs-core';\nimport { negImplCPU } from '../kernel_utils/shared';\nimport { CHECK_NAN_SNIPPET, UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (backend.shouldExecuteOnCPU([x])) {\n        const xData = backend.texData.get(x.dataId);\n        const [outValues, newShape] = negImplCPU(xData.values, x.shape, x.dtype);\n        return backend.makeTensorInfo(newShape, x.dtype, outValues);\n    }\n    let program;\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n    }\n    else {\n        program = new UnaryOpProgram(x.shape, NEG);\n    }\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const negConfig = {\n    kernelName: Neg,\n    backendName: 'webgl',\n    kernelFunc: neg\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV3 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nexport function nonMaxSuppressionV3(args) {\n    backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold } = attrs;\n    const boxesVals = backend.readSync(boxes.dataId);\n    const scoresVals = backend.readSync(scores.dataId);\n    const { selectedIndices } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\nexport const nonMaxSuppressionV3Config = {\n    kernelName: NonMaxSuppressionV3,\n    backendName: 'webgl',\n    kernelFunc: nonMaxSuppressionV3\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nexport function nonMaxSuppressionV4(args) {\n    backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;\n    const boxesVals = backend.readSync(boxes.dataId);\n    const scoresVals = backend.readSync(scores.dataId);\n    const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n    ];\n}\nexport const nonMaxSuppressionV4Config = {\n    kernelName: NonMaxSuppressionV4,\n    backendName: 'webgl',\n    kernelFunc: nonMaxSuppressionV4\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nexport function nonMaxSuppressionV5(args) {\n    backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;\n    const boxesVals = backend.readSync(boxes.dataId);\n    const scoresVals = backend.readSync(scores.dataId);\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n    const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))\n    ];\n}\nexport const nonMaxSuppressionV5Config = {\n    kernelName: NonMaxSuppressionV5,\n    backendName: 'webgl',\n    kernelFunc: nonMaxSuppressionV5\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class OneHotProgram {\n    constructor(numIndices, depth, onValue, offValue) {\n        this.variableNames = ['indices'];\n        this.outputShape = [numIndices, depth];\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { OneHotProgram } from '../onehot_gpu';\nimport { reshape } from './Reshape';\nexport const oneHot = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { indices } = inputs;\n    const { depth, onValue, offValue } = attrs;\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n    const reshaped = reshape({ inputs: { x: indices }, backend, attrs: { shape: [indicesSize] } });\n    const result = backend.runWebGLProgram(program, [reshaped], indices.dtype);\n    backend.disposeIntermediateTensorInfo(reshaped);\n    const outShape = [...indices.shape, depth];\n    const out = reshape({ inputs: { x: result }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo(result);\n    return out;\n};\nexport const oneHotConfig = {\n    kernelName: OneHot,\n    backendName: 'webgl',\n    kernelFunc: oneHot\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ZerosLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nexport function zerosLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const r = zerosLike({ inputs: { x: realPart }, backend });\n        const imagPart = imag({ inputs: { input: x }, backend });\n        const i = zerosLike({ inputs: { x: imagPart }, backend });\n        const result = complex({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        return fill({\n            attrs: {\n                shape: x.shape,\n                dtype: x.dtype,\n                value: x.dtype === 'string' ? '' : 0\n            },\n            backend\n        });\n    }\n}\nexport const zerosLikeConfig = {\n    kernelName: ZerosLike,\n    backendName: 'webgl',\n    kernelFunc: zerosLike\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OnesLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { zerosLike } from './ZerosLike';\nexport function onesLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'string') {\n        throw new Error('onesLike is not supported under string dtype');\n    }\n    else if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const r = onesLike({ inputs: { x: realPart }, backend });\n        const imagPart = imag({ inputs: { input: x }, backend });\n        const i = zerosLike({ inputs: { x: imagPart }, backend });\n        const result = complex({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        // TODO(cais, smilkov): Add WebGL shader for onesLike:\n        //   https://github.com/tensorflow/tfjs/issues/1293\n        return fill({ attrs: { shape: x.shape, dtype: x.dtype, value: 1 }, backend });\n    }\n}\nexport const onesLikeConfig = {\n    kernelName: OnesLike,\n    backendName: 'webgl',\n    kernelFunc: onesLike\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from './Concat';\nimport { expandDims } from './ExpandDims';\nexport function pack(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    if (inputs.length === 1) {\n        return expandDims({ inputs: { input: inputs[0] }, backend, attrs: { dim: axis } });\n    }\n    const shape = inputs[0].shape;\n    const dtype = inputs[0].dtype;\n    inputs.forEach(t => {\n        util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n    });\n    const intermediateTensorInfos = [];\n    const expandedTensors = inputs.map(t => {\n        const expandedT = expandDims({ inputs: { input: t }, backend, attrs: { dim: axis } });\n        intermediateTensorInfos.push(expandedT);\n        return expandedT;\n    });\n    const result = concat({ inputs: expandedTensors, backend, attrs: { axis } });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const packConfig = {\n    kernelName: Pack,\n    backendName: 'webgl',\n    kernelFunc: pack\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.customUniforms = [{ name: 'value', type: 'float' }];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const type = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadPackedProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [{ name: 'value', type: 'float' }];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const coords = getChannels('rc', rank);\n        const source = getChannels('source', rank);\n        const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n        const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n        const componentSetup = [\n            `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n            rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n            rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n        ];\n        const paddingArea = rank === 1 ?\n            'rc < start || rc >= end' :\n            'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n        let mainLoop = '';\n        for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n            mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n        }\n        mainLoop += (rank === 1 ? `} ` : `}}`);\n        this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, PadV2, util } from '@tensorflow/tfjs-core';\nimport { PadProgram } from '../pad_gpu';\nimport { PadPackedProgram } from '../pad_packed_gpu';\nimport { fill } from './Fill';\nexport const padV2 = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, constantValue } = attrs;\n    if (util.sizeFromShape(x.shape) === 0) {\n        // Short-circuit the computation, since x doesn't have value, only\n        // the shape is used to compute output shape to pad.\n        const outputShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n        return fill({\n            backend,\n            attrs: { shape: outputShape, value: constantValue, dtype: x.dtype }\n        });\n    }\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new PadPackedProgram(x.shape, paddings, constantValue) :\n        new PadProgram(x.shape, paddings, constantValue);\n    const customValues = [[constantValue]];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n};\nexport const padV2Config = {\n    kernelName: PadV2,\n    backendName: 'webgl',\n    kernelFunc: padV2\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pow } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\nexport const pow = binaryKernelFunc({ opSnippet: POW, packedOpSnippet: POW_PACKED });\nexport const powConfig = {\n    kernelName: Pow,\n    backendName: 'webgl',\n    kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { prodImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const toDispose = [];\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        toDispose.push(permutedX);\n    }\n    backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n    let res;\n    if (backend.shouldExecuteOnCPU([permutedX])) {\n        const xVals = backend.texData.get(permutedX.dataId).values;\n        const { outVals, outShape, outDtype } = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n        res = backend.makeTensorInfo(outShape, outDtype, outVals);\n    }\n    else {\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n        const outputDType = sumOutType(x.dtype);\n        const reduced = reduce(a2D, outputDType, 'prod', backend);\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        toDispose.push(a2D);\n        toDispose.push(reduced);\n    }\n    if (keepDims) {\n        toDispose.push(res);\n        const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n        res = reshape({ inputs: { x: res }, backend, attrs: { shape: newShape } });\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return res;\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'webgl',\n    kernelFunc: prod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Range } from '@tensorflow/tfjs-core';\nimport { rangeImplCPU } from '../kernel_utils/shared';\nexport const range = (args) => {\n    const { backend, attrs } = args;\n    const { start, stop, step, dtype } = attrs;\n    const values = rangeImplCPU(start, stop, step, dtype);\n    return backend.makeTensorInfo([values.length], dtype, values);\n};\nexport const rangeConfig = {\n    kernelName: Range,\n    backendName: 'webgl',\n    kernelFunc: range\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reciprocal } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst RECIPROCAL = `return 1.0 / x;`;\nexport const reciprocal = unaryKernelFunc({ opSnippet: RECIPROCAL });\nexport const reciprocalConfig = {\n    kernelName: Reciprocal,\n    backendName: 'webgl',\n    kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const relu = unaryKernelFunc({ opSnippet: RELU, packedOpSnippet: RELU_PACKED });\nexport const reluConfig = {\n    kernelName: Relu,\n    backendName: 'webgl',\n    kernelFunc: relu\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu6 } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const relu6 = unaryKernelFunc({ opSnippet: RELU6, packedOpSnippet: RELU6_PACKED });\nexport const relu6Config = {\n    kernelName: Relu6,\n    backendName: 'webgl',\n    kernelFunc: relu6\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC =\n                `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n                    ` - vec2(0.5)`;\n        }\n        else {\n            sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearPackedProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n                `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n        }\n        else {\n            sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, ResizeBilinear } from '@tensorflow/tfjs-core';\nimport { ResizeBilinearProgram } from '../resize_bilinear_gpu';\nimport { ResizeBilinearPackedProgram } from '../resize_bilinear_packed_gpu';\nexport function resizeBilinear(args) {\n    const { inputs, backend, attrs } = args;\n    const { images } = inputs;\n    const { alignCorners, halfPixelCenters, size } = attrs;\n    const [newHeight, newWidth] = size;\n    const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n        new ResizeBilinearPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) :\n        new ResizeBilinearProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);\n    return backend.runWebGLProgram(program, [images], 'float32');\n}\nexport const resizeBilinearConfig = {\n    kernelName: ResizeBilinear,\n    backendName: 'webgl',\n    kernelFunc: resizeBilinear\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearBackpropProgram {\n    constructor(dyShape, inputShape, alignCorners) {\n        this.variableNames = ['dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        const [, xHeight, xWidth,] = inputShape;\n        const [, yHeight, yWidth] = dyShape;\n        // In the backwards pass, we want to find the pixels that were generated for\n        // each pixel in the input image the forward pass and add the corresponding\n        // coefficient from dy to the gradient (with some interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinearGrad } from '@tensorflow/tfjs-core';\nimport { ResizeBilinearBackpropProgram } from '../resize_bilinear_backprop_gpu';\nexport function resizeBilinearGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { images, dy } = inputs;\n    const { alignCorners } = attrs;\n    const program = new ResizeBilinearBackpropProgram(dy.shape, images.shape, alignCorners);\n    return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\nexport const resizeBilinearGradConfig = {\n    kernelName: ResizeBilinearGrad,\n    backendName: 'webgl',\n    kernelFunc: resizeBilinearGrad\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        // When align corners is false, we rounds the value with floor.\n        const roundBase = alignCorners ? '0.5' : '0.0';\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC =\n                `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n                    `, vec2(0.0))`;\n        }\n        else {\n            sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborPackedProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        // When align corners is false, we rounds the value with floor.\n        const roundBase = alignCorners ? '0.5' : '0.0';\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n                `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n        }\n        else {\n            sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, ResizeNearestNeighbor } from '@tensorflow/tfjs-core';\nimport { ResizeNearestNeighborProgram } from '../resize_nearest_neighbor_gpu';\nimport { ResizeNearestNeighborPackedProgram } from '../resize_nearest_neighbor_packed_gpu';\nexport function resizeNearestNeighbor(args) {\n    const { inputs, backend, attrs } = args;\n    const { images } = inputs;\n    const { alignCorners, halfPixelCenters, size } = attrs;\n    const [newHeight, newWidth] = size;\n    const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n        new ResizeNearestNeighborPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) :\n        new ResizeNearestNeighborProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);\n    return backend.runWebGLProgram(program, [images], images.dtype);\n}\nexport const resizeNearestNeighborConfig = {\n    kernelName: ResizeNearestNeighbor,\n    backendName: 'webgl',\n    kernelFunc: resizeNearestNeighbor\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeigborBackpropProgram {\n    constructor(dyShape, inputShape, alignCorners) {\n        this.variableNames = ['dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        const [, xHeight, xWidth,] = inputShape;\n        const [, yHeight, yWidth] = dyShape;\n        // In the backwards pass, we want to find the pixels that were generated for\n        // each pixel in the input image the forward pass and add the corresponding\n        // coefficient from dy to the gradient (with some interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighborGrad } from '@tensorflow/tfjs-core';\nimport { ResizeNearestNeigborBackpropProgram } from '../resize_nearest_neighbor_backprop_gpu';\nexport function resizeNearestNeighborGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { images, dy } = inputs;\n    const { alignCorners } = attrs;\n    const program = new ResizeNearestNeigborBackpropProgram(dy.shape, images.shape, alignCorners);\n    return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\nexport const resizeNearestNeighborGradConfig = {\n    kernelName: ResizeNearestNeighborGrad,\n    backendName: 'webgl',\n    kernelFunc: resizeNearestNeighborGrad\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReverseProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        if (rank === 1) {\n            this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n            return;\n        }\n        const getInCoord = (i) => {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - coords[${i}] - 1`;\n            }\n            return `coords[${i}]`;\n        };\n        const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n        const type = getCoordsDataType(rank);\n        this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReversePackedProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        const channels = getChannels('rc', rank);\n        const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n        const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n        const type = getCoordsDataType(rank);\n        if (rank === 1) {\n            this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n        }\n        else {\n            this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n        }\n        function getR(channels) {\n            return getChannel(channels);\n        }\n        function getG(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getB(channels) {\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getA(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getChannel(channels) {\n            const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n            const inCoords = inCoordsArray.join(',');\n            const innerDims = inCoordsArray.slice(-2).join(',');\n            return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n        }\n        function getInCoord(i, channels1) {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - ${channels1[i]} - 1`;\n            }\n            else {\n                return `${channels1[i]}`;\n            }\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Reverse, util } from '@tensorflow/tfjs-core';\nimport { ReverseProgram } from '../reverse_gpu';\nimport { ReversePackedProgram } from '../reverse_packed_gpu';\nimport { identity } from './Identity';\nexport function reverse(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dims } = attrs;\n    const xRank = x.shape.length;\n    const $dims = util.parseAxisParam(dims, x.shape);\n    if (xRank === 0) {\n        return identity({ inputs: { x }, backend });\n    }\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new ReversePackedProgram(x.shape, $dims) :\n        new ReverseProgram(x.shape, $dims);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const reverseConfig = {\n    kernelName: Reverse,\n    backendName: 'webgl',\n    kernelFunc: reverse\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class RotateProgram {\n    constructor(imageShape, fillValue) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        this.customUniforms = [{ name: 'params', type: 'vec4' }];\n        const imageHeight = imageShape[1];\n        const imageWidth = imageShape[2];\n        this.outputShape = imageShape;\n        let fillSnippet = '';\n        if (typeof fillValue === 'number') {\n            fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n        }\n        else {\n            fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n        }\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { RotateWithOffset } from '@tensorflow/tfjs-core';\nimport { RotateProgram } from '../rotate_gpu';\nexport const rotateWithOffsetConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const { radians, fillValue, center } = attrs;\n        const webglBackend = backend;\n        const program = new RotateProgram(image.shape, fillValue);\n        const [centerX, centerY] = backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n        const customValues = [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n        const output = webglBackend.runWebGLProgram(program, [image], image.dtype, customValues);\n        return output;\n    }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Round } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\nexport const round = unaryKernelFunc({ opSnippet: ROUND });\nexport const roundConfig = {\n    kernelName: Round,\n    backendName: 'webgl',\n    kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { rsqrtImplCPU } from '../kernel_utils/shared';\nconst RSQRT = `return inversesqrt(x);`;\nexport const rsqrt = unaryKernelFunc({ opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU });\nexport const rsqrtConfig = {\n    kernelName: Rsqrt,\n    backendName: 'webgl',\n    kernelFunc: rsqrt\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterProgram {\n    constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\n        this.variableNames = ['updates', 'indices', 'defaultValue'];\n        this.outputShape = shape;\n        const stridesType = getCoordsDataType(strides.length);\n        const dtype = getCoordsDataType(shape.length);\n        let indicesString = '';\n        if (indicesRank === 1) {\n            indicesString = 'i';\n        }\n        else if (indicesRank === 2) {\n            indicesString = 'i, j';\n        }\n        const indicesSnippet = `getIndices(${indicesString})`;\n        let updatesString = '';\n        if (updatesRank === 1) {\n            updatesString = 'i';\n        }\n        else if (updatesRank === 2) {\n            updatesString = 'i, coords[1]';\n        }\n        const updatesSnippet = `getUpdates(${updatesString})`;\n        const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices, updates } = inputs;\n    const { shape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    if (outputSize === 0) {\n        return backend.makeTensorInfo(shape, indices.dtype);\n    }\n    const flattenIndices = reshape({ inputs: { x: indices }, backend, attrs: { shape: [numUpdates, sliceRank] } });\n    const flattenX = reshape({ inputs: { x: updates }, backend, attrs: { shape: [numUpdates, sliceSize] } });\n    const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)\n    const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape } });\n    backend.disposeIntermediateTensorInfo(flattenIndices);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(res);\n    backend.disposeIntermediateTensorInfo(defaultValue);\n    return reshaped;\n}\nexport const scatterNdConfig = {\n    kernelName: ScatterNd,\n    backendName: 'webgl',\n    kernelFunc: scatterNd\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SelectProgram {\n    constructor(cRank, shape, rank) {\n        this.variableNames = ['c', 'a', 'b'];\n        this.outputShape = shape;\n        let cCoords;\n        let abCoords;\n        if (rank > 4) {\n            throw Error(`Where for rank ${rank} is not yet supported`);\n        }\n        if (rank === 1) {\n            abCoords = `resRC`;\n            cCoords = `resRC`;\n        }\n        else {\n            const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n            const cCoordVars = [];\n            const abCoordVars = [];\n            for (let i = 0; i < shape.length; i++) {\n                abCoordVars.push(`${currentCoords[i]}`);\n                if (i < cRank) {\n                    cCoordVars.push(`${currentCoords[i]}`);\n                }\n            }\n            cCoords = cCoordVars.join();\n            abCoords = abCoordVars.join();\n        }\n        const dtype = getCoordsDataType(rank);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType } from '@tensorflow/tfjs-core';\nimport { SelectProgram } from '../select_gpu';\nexport function select(args) {\n    const { inputs, backend } = args;\n    const { condition, t, e } = inputs;\n    const program = new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n    return backend.runWebGLProgram(program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\nexport const selectConfig = {\n    kernelName: Select,\n    backendName: 'webgl',\n    kernelFunc: select\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Selu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\nexport const selu = unaryKernelFunc({ opSnippet: SELU });\nexport const seluConfig = {\n    kernelName: Selu,\n    backendName: 'webgl',\n    kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sigmoid } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { sigmoidImplCPU } from '../kernel_utils/shared';\nconst SIGMOID = CHECK_NAN_SNIPPET_UNARY + `\n  return 1.0 / (1.0 + exp(-1.0 * x));\n`;\nconst SIGMOID_PACKED = `\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const sigmoid = unaryKernelFunc({\n    opSnippet: SIGMOID,\n    packedOpSnippet: SIGMOID_PACKED,\n    cpuKernelImpl: sigmoidImplCPU\n});\nexport const sigmoidConfig = {\n    kernelName: Sigmoid,\n    backendName: 'webgl',\n    kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sign } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\nexport const sign = unaryKernelFunc({ opSnippet: SIGN });\nexport const signConfig = {\n    kernelName: Sign,\n    backendName: 'webgl',\n    kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sin } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\nexport const sin = unaryKernelFunc({ opSnippet: SIN });\nexport const sinConfig = {\n    kernelName: Sin,\n    backendName: 'webgl',\n    kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\nexport const sinh = unaryKernelFunc({ opSnippet: SINH });\nexport const sinhConfig = {\n    kernelName: Sinh,\n    backendName: 'webgl',\n    kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softplus } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\nexport const softplus = unaryKernelFunc({ opSnippet: SOFTPLUS });\nexport const softplusConfig = {\n    kernelName: Softplus,\n    backendName: 'webgl',\n    kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { padV2 } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport const spaceToBatchND = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, paddings } = attrs;\n    util.assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n        'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const completePaddings = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n        completePaddings.push([0, 0]);\n    }\n    const toDispose = [];\n    const paddedX = padV2({\n        inputs: { x },\n        backend,\n        attrs: { paddings: completePaddings, constantValue: 0 }\n    });\n    const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n    const reshapedPaddedX = reshape({ inputs: { x: paddedX }, backend, attrs: { shape: reshapedPaddedShape } });\n    const paddedXT = transpose({\n        inputs: { x: reshapedPaddedX },\n        backend,\n        attrs: { perm: permutedReshapedPaddedPermutation }\n    });\n    const result = reshape({ inputs: { x: paddedXT }, backend, attrs: { shape: flattenShape } });\n    toDispose.push(paddedX);\n    toDispose.push(reshapedPaddedX);\n    toDispose.push(paddedXT);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n};\nexport const spaceToBatchNDConfig = {\n    kernelName: SpaceToBatchND,\n    backendName: 'webgl',\n    kernelFunc: spaceToBatchND\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseFillEmptyRows } from '@tensorflow/tfjs-core';\nimport { sparseFillEmptyRowsImplCPU } from '../kernel_utils/shared';\nexport function sparseFillEmptyRows(args) {\n    const { inputs, backend } = args;\n    const { indices, values, denseShape, defaultValue } = inputs;\n    if (denseShape.shape.length !== 1) {\n        throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n    }\n    if (indices.shape.length !== 2) {\n        throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n    }\n    if (values.shape.length !== 1) {\n        throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n    }\n    if (defaultValue.shape.length !== 0) {\n        throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n    }\n    const $indices = backend.readSync(indices.dataId);\n    const $values = backend.readSync(values.dataId);\n    const $denseShape = backend.readSync(denseShape.dataId);\n    const $defaultValue = backend.readSync(defaultValue.dataId)[0];\n    const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = sparseFillEmptyRowsImplCPU($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);\n    return [\n        backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n        backend.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues),\n        backend.makeTensorInfo([emptyRowIndicator.length], 'bool', new Uint8Array(emptyRowIndicator.map((value) => Number(value)))),\n        backend.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap)),\n    ];\n}\nexport const sparseFillEmptyRowsConfig = {\n    kernelName: SparseFillEmptyRows,\n    backendName: 'webgl',\n    kernelFunc: sparseFillEmptyRows,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImplCPU } from '../kernel_utils/shared';\nexport function sparseReshape(args) {\n    const { inputs, backend } = args;\n    const { inputIndices, inputShape, newShape } = inputs;\n    if (inputIndices.shape.length !== 2) {\n        throw new Error(`Input indices should be a matrix but received shape ${inputIndices.shape}`);\n    }\n    if (inputShape.shape.length !== 1) {\n        throw new Error(`Input shape should be a vector but received shape ${inputShape.shape}`);\n    }\n    if (newShape.shape.length !== 1) {\n        throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);\n    }\n    const $inputShape = Array.from(backend.readSync(inputShape.dataId));\n    const $inputIndices = backend.readSync(inputIndices.dataId);\n    const targetShape = Array.from(backend.readSync(newShape.dataId));\n    const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);\n    return [\n        backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n        backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n    ];\n}\nexport const sparseReshapeConfig = {\n    kernelName: SparseReshape,\n    backendName: 'webgl',\n    kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentMean } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentMean(args) {\n    const { inputs, backend } = args;\n    const { data, indices, segmentIds } = inputs;\n    if (data.shape.length < 1) {\n        throw new Error(`Data should be at least 1 dimensional but received scalar`);\n    }\n    if (indices.shape.length !== 1) {\n        throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n    }\n    if (segmentIds.shape.length !== 1) {\n        throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n    }\n    const $data = backend.readSync(data.dataId);\n    const $indices = backend.readSync(indices.dataId);\n    const $segmentIds = backend.readSync(segmentIds.dataId);\n    const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds, true);\n    return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentMeanConfig = {\n    kernelName: SparseSegmentMean,\n    backendName: 'webgl',\n    kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentSum } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentSum(args) {\n    const { inputs, backend } = args;\n    const { data, indices, segmentIds } = inputs;\n    if (data.shape.length < 1) {\n        throw new Error(`Data should be at least 1 dimensional but received scalar`);\n    }\n    if (indices.shape.length !== 1) {\n        throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n    }\n    if (segmentIds.shape.length !== 1) {\n        throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n    }\n    const $data = backend.readSync(data.dataId);\n    const $indices = backend.readSync(indices.dataId);\n    const $segmentIds = backend.readSync(segmentIds.dataId);\n    const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds);\n    return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentSumConfig = {\n    kernelName: SparseSegmentSum,\n    backendName: 'webgl',\n    kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function sparseToDense(args) {\n    const { inputs, backend, attrs } = args;\n    const { sparseIndices, sparseValues, defaultValue } = inputs;\n    const { outputShape } = attrs;\n    const { sliceRank, numUpdates, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n    const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: outputShape } });\n    backend.disposeIntermediateTensorInfo(res);\n    return reshaped;\n}\nexport const sparseToDenseConfig = {\n    kernelName: SparseToDense,\n    backendName: 'webgl',\n    kernelFunc: sparseToDense\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SplitV, util } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nexport function splitV(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { numOrSizeSplits, axis } = attrs;\n    const $axis = util.parseAxisParam(axis, x.shape)[0];\n    const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n    const xRank = x.shape.length;\n    const begin = new Array(xRank).fill(0);\n    const size = x.shape.slice();\n    return splitSizes.map(s => {\n        const sliceSize = [...size];\n        sliceSize[$axis] = s;\n        const sliceT = slice({ inputs: { x }, backend, attrs: { begin, size: sliceSize } });\n        begin[$axis] += s;\n        return sliceT;\n    });\n}\nexport const splitVConfig = {\n    kernelName: SplitV,\n    backendName: 'webgl',\n    kernelFunc: splitV\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sqrt } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { sqrtImplCPU } from '../kernel_utils/shared';\nconst SQRT = `return sqrt(x);`;\nexport const sqrt = unaryKernelFunc({ opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU });\nexport const sqrtConfig = {\n    kernelName: Sqrt,\n    backendName: 'webgl',\n    kernelFunc: sqrt\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Square } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SQUARE = `return x * x;`;\nexport const square = unaryKernelFunc({ opSnippet: SQUARE });\nexport const squareConfig = {\n    kernelName: Square,\n    backendName: 'webgl',\n    kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport const squaredDifference = binaryKernelFunc({ opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE });\nexport const squaredDifferenceConfig = {\n    kernelName: SquaredDifference,\n    backendName: 'webgl',\n    kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Step } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET, UnaryOpProgram } from '../unaryop_gpu';\nexport function step({ inputs, attrs, backend }) {\n    const { x } = inputs;\n    const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n    const program = new UnaryOpProgram(x.shape, opSnippet);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const stepConfig = {\n    kernelName: Step,\n    backendName: 'webgl',\n    kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class StridedSliceProgram {\n    constructor(begin, strides, size) {\n        this.variableNames = ['x'];\n        this.outputShape = size;\n        const rank = size.length;\n        const inputDtype = getCoordsDataType(size.length);\n        const dtype = getCoordsDataType(size.length);\n        let newCoords = '';\n        if (rank === 1) {\n            newCoords = 'coords * strides + begin';\n        }\n        else {\n            let outputAxis = 0;\n            newCoords =\n                size.map((_, i) => {\n                    outputAxis++;\n                    return size.length === 1 ?\n                        `coords * strides[${i}] + begin[${i}]` :\n                        `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n                })\n                    .join(',');\n        }\n        this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { stridedSliceImplCPU } from '../kernel_utils/shared';\nimport { StridedSliceProgram } from '../strided_slice_gpu';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function stridedSlice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n    const { finalShapeSparse, finalShape, isIdentity, sliceDim0, isSimpleSlice, begin: $begin, end: $end, strides: $strides } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n    let result;\n    if (isIdentity) {\n        // Optimization #1, slice is a no-op plus reshape\n        result = reshape({ inputs: { x }, backend, attrs: { shape: finalShape } });\n    }\n    else if (sliceDim0 || isSimpleSlice) {\n        // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n        util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n        const size = slice_util.computeOutShape($begin, $end, $strides);\n        // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n        const sliced = slice({ inputs: { x }, backend, attrs: { begin: $begin, size } });\n        result =\n            reshape({ inputs: { x: sliced }, backend, attrs: { shape: finalShape } });\n        backend.disposeIntermediateTensorInfo(sliced);\n    }\n    else {\n        const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n        if (shouldExecuteOnCPU) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            const values = backend.readSync(x.dataId);\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            const xBuf = buffer(x.shape, x.dtype, values);\n            const resultValues = stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n            result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n        }\n        else {\n            const program = new StridedSliceProgram($begin, $strides, finalShapeSparse);\n            result = backend.runWebGLProgram(program, [x], x.dtype);\n        }\n    }\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: finalShape } });\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const stridedSliceConfig = {\n    kernelName: StridedSlice,\n    backendName: 'webgl',\n    kernelFunc: stridedSlice\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImplCPU } from '../kernel_utils/shared';\nexport function stringNGrams(args) {\n    const { inputs, backend, attrs } = args;\n    const { separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences } = attrs;\n    const { data, dataSplits } = inputs;\n    const $data = backend.readSync(data.dataId);\n    const $dataSplits = backend.readSync(dataSplits.dataId);\n    const [nGrams, nGramsSplits] = stringNGramsImplCPU($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);\n    return [\n        backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n        backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n    ];\n}\nexport const stringNGramsConfig = {\n    kernelName: StringNGrams,\n    backendName: 'webgl',\n    kernelFunc: stringNGrams,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringSplit } from '@tensorflow/tfjs-core';\nimport { stringSplitImplCPU } from '../kernel_utils/shared';\nexport function stringSplit(args) {\n    const { inputs, backend, attrs } = args;\n    const { skipEmpty } = attrs;\n    const { input, delimiter } = inputs;\n    if (input.dtype !== 'string') {\n        throw new Error('Input must be of datatype string');\n    }\n    if (input.shape.length !== 1) {\n        throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n    }\n    if (delimiter.shape.length !== 0) {\n        throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n    }\n    const $input = backend.readSync(input.dataId);\n    const $delimiter = backend.readSync(delimiter.dataId)[0];\n    const [indices, values, shape] = stringSplitImplCPU($input, $delimiter, skipEmpty);\n    const outputSize = values.length;\n    return [\n        backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n        backend.makeTensorInfo([outputSize], 'string', values),\n        backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n    ];\n}\nexport const stringSplitConfig = {\n    kernelName: StringSplit,\n    backendName: 'webgl',\n    kernelFunc: stringSplit,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringToHashBucketFast } from '@tensorflow/tfjs-core';\nimport { stringToHashBucketFastImplCPU } from '../kernel_utils/shared';\nexport function stringToHashBucketFast(args) {\n    const { inputs, backend, attrs } = args;\n    const { numBuckets } = attrs;\n    const { input } = inputs;\n    if (input.dtype !== 'string') {\n        throw new Error('Input must be of datatype string');\n    }\n    if (numBuckets <= 0) {\n        throw new Error(`Number of buckets must be at least 1`);\n    }\n    const $input = backend.readSync(input.dataId);\n    const output = stringToHashBucketFastImplCPU($input, numBuckets);\n    return backend.makeTensorInfo(input.shape, 'int32', output);\n}\nexport const stringToHashBucketFastConfig = {\n    kernelName: StringToHashBucketFast,\n    backendName: 'webgl',\n    kernelFunc: stringToHashBucketFast,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst TAN = `return tan(x);`;\nexport const tan = unaryKernelFunc({ opSnippet: TAN });\nexport const tanConfig = {\n    kernelName: Tan,\n    backendName: 'webgl',\n    kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\nexport const tanh = unaryKernelFunc({ opSnippet: TANH });\nexport const tanhConfig = {\n    kernelName: Tanh,\n    backendName: 'webgl',\n    kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TileProgram {\n    constructor(aShape, reps) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[i] * reps[i];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const sourceCoords = getSourceCoords(aShape);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n    }\n}\nfunction getSourceCoords(aShape) {\n    const rank = aShape.length;\n    if (rank > 5) {\n        throw Error(`Tile for rank ${rank} is not yet supported`);\n    }\n    if (rank === 1) {\n        return `imod(resRC, ${aShape[0]})`;\n    }\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n    }\n    return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Tile, util } from '@tensorflow/tfjs-core';\nimport { tileImplCPU } from '../kernel_utils/shared';\nimport { TileProgram } from '../tile_gpu';\nexport function tile(params) {\n    const { inputs, backend, attrs } = params;\n    const { x } = inputs;\n    const { reps } = attrs;\n    // tile gpu program cannot handle rank > 5 case.\n    if (x.dtype === 'string' || x.shape.length > 5) {\n        // Even thought string tensor is always on CPU, just to be consistent on how\n        // to access tensor data.\n        const data = backend.readSync(x.dataId);\n        const value = x.dtype === 'string' ?\n            data.map(d => util.decodeString(d)) :\n            data;\n        const buf = buffer(x.shape, x.dtype, value);\n        const outBuf = tileImplCPU(buf, reps);\n        return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n    }\n    const program = new TileProgram(x.shape, reps);\n    const output = backend.runWebGLProgram(program, [x], x.dtype);\n    return output;\n}\nexport const tileConfig = {\n    kernelName: Tile,\n    backendName: 'webgl',\n    kernelFunc: tile,\n};\n","// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram {\n    /**\n     * @param shape desired output shape (can be larger than input shape, output\n     *                                    will be padded with -Infinity)\n     */\n    constructor(shape) {\n        this.variableNames = ['x', 'indices'];\n        // |n| Size of the original input of TopK.\n        // |firstPass|indicates if this is the first time swap is being used which\n        // means no indices input containing the top K is present yet.\n        // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n        this.customUniforms = [\n            { name: 'n', type: 'int' },\n            { name: 'firstPass', type: 'int' },\n            { name: 'negativeInf', type: 'float' },\n            { name: 'dir', type: 'int' },\n            { name: 'inc', type: 'int' }\n        ];\n        this.outputShape = shape;\n        this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n    }\n}\nexport class MergeProgram {\n    /**\n     * @param shape desired output shape (must be half of the input size)\n     */\n    constructor(shape) {\n        this.variableNames = ['x', 'indices'];\n        // |n| Size of the original input of TopK\n        // |firstPass| indicates if this is the first time swap is being used which\n        // means no indices input containing the top K is present yet.\n        // |k| Top k elements desired\n        this.customUniforms = [\n            { name: 'n', type: 'int' },\n            { name: 'firstPass', type: 'int' },\n            { name: 'k', type: 'int' }\n        ];\n        this.outputShape = shape;\n        this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, TopK, util } from '@tensorflow/tfjs-core';\nimport { topKImplCPU } from '../kernel_utils/shared';\nimport { MergeProgram, SwapProgram } from '../top_k_gpu';\nimport { fill } from './Fill';\nimport { gatherV2 } from './GatherV2';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nfunction disposeIntermediateTensorInfoOrNull(backend, tensorInfo) {\n    if (tensorInfo !== null) {\n        backend.disposeIntermediateTensorInfo(tensorInfo);\n    }\n}\nfunction roundUpToPow2(num) {\n    let pow2 = 1;\n    while (pow2 < num) {\n        pow2 *= 2;\n    }\n    return pow2;\n}\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { k, sorted } = attrs;\n    // Empirically determined constant used to determine last dim threshold for\n    // handing off execution to the CPU.\n    const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n    // Empirically determined constant used to determine k threshold for handing\n    // off execution to the CPU.\n    const TOPK_K_CPU_HANDOFF_THRESHOLD = env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n    const xShape = x.shape;\n    const lastDim = xShape[xShape.length - 1];\n    if (backend.shouldExecuteOnCPU([x]) ||\n        lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n        k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n        const xVals = backend.readSync(x.dataId);\n        const [allTopKVals, allTopKIndices] = topKImplCPU(xVals, xShape, x.dtype, k, sorted);\n        return [\n            backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n            backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n        ];\n    }\n    if (k === 0) {\n        xShape[xShape.length - 1] = 0;\n        return [\n            backend.makeTensorInfo(xShape, x.dtype, []),\n            backend.makeTensorInfo(xShape, 'int32', [])\n        ];\n    }\n    if (lastDim === 1 /* firstPass */) {\n        return [\n            x, fill({ attrs: { shape: xShape, dtype: 'int32', value: 0 }, backend })\n        ];\n    }\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const xSize = util.sizeFromShape(xShape);\n    const batch = xSize / lastDim;\n    const x2D = reshape({ inputs: { x: xUnPacked }, attrs: { shape: [batch, lastDim] }, backend });\n    if (xIsPacked) {\n        disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n    }\n    const kPow2 = roundUpToPow2(k);\n    const lastDimPow2 = roundUpToPow2(lastDim);\n    // Only the indices containing the top K are kept at every step to reduce\n    // number of outputs in the GPU algorithms, so once the final set of indices\n    // is computed then gather is used to grab the corresponding values\n    // from the original input.\n    let indices = null;\n    // GPU algorithm always takes in an indices input but this input is not used\n    // on the first run of a GPU algorithm, therefore if indices is null we simply\n    // pass in x2D instead of it but the value will not actually be used\n    const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n    const runSwap = (dir, inc, shape) => {\n        const inputs = getInputs();\n        const program = new SwapProgram(shape);\n        const fistPass = indices === null ? 1 : 0;\n        const customValues = [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n        const prevIndices = indices;\n        indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n        disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n    };\n    // Step 1: local sort\n    for (let len = 1; len < kPow2; len *= 2) {\n        const dir = len * 2;\n        for (let inc = len; inc >= 1; inc /= 2) {\n            runSwap(dir, inc, [batch, lastDimPow2]);\n        }\n    }\n    // Step 2: merge\n    for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n        const inputs = getInputs();\n        const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n        const firstPass = indices === null ? 1 : 0;\n        const customValues = [[lastDim], [firstPass], [kPow2]];\n        const prevIndices = indices;\n        indices =\n            backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n        disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n        // Step 3: rebuild\n        const len = kPow2 / 2;\n        const dir = len * 2;\n        for (let inc = len; inc >= 1; inc /= 2) {\n            runSwap(dir, inc, indices.shape);\n        }\n    }\n    // Keep only the requested top K results instead of kPow2\n    let prevIndices = indices;\n    indices = slice({ inputs: { x: indices }, backend, attrs: { begin: 0, size: [batch, k] } });\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n    // Gather values on last dimension\n    let values = gatherV2({ inputs: { x: x2D, indices }, backend, attrs: { axis: 1, batchDims: 1 } });\n    disposeIntermediateTensorInfoOrNull(backend, x2D);\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const newShape = xShape.slice(0, -1);\n    newShape.push(k);\n    prevIndices = indices;\n    indices = reshape({ inputs: { x: indices }, attrs: { shape: newShape }, backend });\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n    const prevValues = values;\n    values = reshape({ inputs: { x: values }, attrs: { shape: newShape }, backend });\n    disposeIntermediateTensorInfoOrNull(backend, prevValues);\n    return [values, indices];\n}\nexport const topKConfig = {\n    kernelName: TopK,\n    backendName: 'webgl',\n    kernelFunc: topK\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class TransformProgram {\n    constructor(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape) {\n        this.variableNames = ['Image', 'Transforms'];\n        this.outputShape = outShape;\n        const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n        let fillModeId;\n        switch (fillMode) {\n            case 'constant':\n                fillModeId = 1;\n                break;\n            case 'reflect':\n                fillModeId = 2;\n                break;\n            case 'wrap':\n                fillModeId = 3;\n                break;\n            case 'nearest':\n                fillModeId = 4;\n                break;\n            default:\n                fillModeId = 1;\n                break;\n        }\n        this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n    }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transform } from '@tensorflow/tfjs-core';\nimport { TransformProgram } from '../transform_gpu';\nexport function transform(args) {\n    const { inputs, backend, attrs } = args;\n    const { image, transforms } = inputs;\n    const { interpolation, fillMode, fillValue, outputShape } = attrs;\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];\n    const outShape = [batch, outHeight, outWidth,\n        numChannels];\n    const program = new TransformProgram(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n    return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\nexport const transformConfig = {\n    kernelName: Transform,\n    backendName: 'webgl',\n    kernelFunc: transform\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unique } from '@tensorflow/tfjs-core';\nimport { uniqueImplCPU } from '../kernel_utils/shared';\nimport { assertNotComplex } from '../webgl_util';\nexport function unique(args) {\n    const { inputs, attrs, backend } = args;\n    const { axis } = attrs;\n    const { x } = inputs;\n    assertNotComplex(x, 'unique');\n    // For now, always forward calculation to the CPU backend.\n    console.warn('WARNING: ', 'UI might be locked temporarily as data is being downloaded');\n    const values = backend.readSync(x.dataId);\n    const { outputValues, outputShape, indices } = uniqueImplCPU(values, axis, x.shape, x.dtype);\n    return [\n        backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n        backend.makeTensorInfo([indices.length], 'int32', indices),\n    ];\n}\nexport const uniqueConfig = {\n    kernelName: Unique,\n    backendName: 'webgl',\n    kernelFunc: unique,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function unpack(args) {\n    const { inputs, backend, attrs } = args;\n    const { value } = inputs;\n    let { axis } = attrs;\n    if (axis < 0) {\n        axis += value.shape.length;\n    }\n    const x = value;\n    const xRank = x.shape.length;\n    const num = value.shape[axis];\n    const outShape = new Array(xRank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < xRank; i++) {\n        if (i !== axis) {\n            outShape[outIndex++] = x.shape[i];\n        }\n    }\n    const toDispose = [];\n    const begin = new Array(xRank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n        begin[axis] = i;\n        const sliced = slice({ inputs: { x }, backend, attrs: { begin, size } });\n        const reshaped = reshape({ inputs: { x: sliced }, backend, attrs: { shape: outShape } });\n        res[i] = reshaped;\n        toDispose.push(sliced);\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return res;\n}\nexport const unpackConfig = {\n    kernelName: Unpack,\n    backendName: 'webgl',\n    kernelFunc: unpack\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class SegmentOpProgram {\n    constructor(segOpInfo, segOpType) {\n        this.variableNames = ['x', 'segmentIds'];\n        const windowSize = segOpInfo.windowSize;\n        const batchSize = segOpInfo.batchSize;\n        const inSize = segOpInfo.inSize;\n        const numSegments = segOpInfo.numSegments;\n        const outSize = numSegments * Math.ceil(inSize / windowSize);\n        this.outputShape = [batchSize, outSize];\n        const initializationValue = '0.0';\n        const returnValue = `sumValue`;\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n        let checkValueOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        let checkSegmentIdOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { SegmentOpProgram } from '../segment_gpu';\nimport { range } from './Range';\nimport { reshape } from './Reshape';\nimport { tile } from './Tile';\nimport { transpose } from './Transpose';\nexport function unsortedSegmentSum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, segmentIds } = inputs;\n    const { numSegments } = attrs;\n    const xRank = x.shape.length;\n    const toDispose = [];\n    let axis = 0;\n    const permutation = backend_util.getAxesPermutation([axis], xRank);\n    let permutedX = x;\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        toDispose.push(permutedX);\n        axis = backend_util.getInnerMostAxes(1, xRank)[0];\n    }\n    const outShape = backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n    const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n    const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    toDispose.push(a2D);\n    const outputDType = sumOutType(x.dtype);\n    const segOpCompute = (x, segOpType, segmentIds, dtype, numSegments) => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize = backend_util.segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n        const segOpInfo = { windowSize, inSize, batchSize, numSegments };\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n            return output;\n        }\n        const rangeInfo = range({\n            backend,\n            attrs: { start: 0, stop: numSegments, step: 1, dtype: 'float32' }\n        });\n        const tileInfo = tile({\n            inputs: { x: rangeInfo },\n            backend,\n            attrs: { reps: [inSize / windowSize] }\n        });\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n        const result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n    };\n    const segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n    const reshaped = reshape({ inputs: { x: segOpResult }, backend, attrs: { shape: outShape } });\n    let result = reshaped;\n    if (permutation != null) {\n        toDispose.push(reshaped);\n        const perm = backend_util.getUndoAxesPermutation(permutation);\n        result = transpose({ inputs: { x: result }, backend, attrs: { perm } });\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const unsortedSegmentSumConfig = {\n    kernelName: UnsortedSegmentSum,\n    backendName: 'webgl',\n    kernelFunc: unsortedSegmentSum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { registerKernel } from '@tensorflow/tfjs-core';\nimport { _fusedMatMulConfig } from './kernels/_FusedMatMul';\nimport { absConfig } from './kernels/Abs';\nimport { acosConfig } from './kernels/Acos';\nimport { acoshConfig } from './kernels/Acosh';\nimport { addConfig } from './kernels/Add';\nimport { addNConfig } from './kernels/AddN';\nimport { allConfig } from './kernels/All';\nimport { anyConfig } from './kernels/Any';\nimport { argMaxConfig } from './kernels/ArgMax';\nimport { argMinConfig } from './kernels/ArgMin';\nimport { asinConfig } from './kernels/Asin';\nimport { asinhConfig } from './kernels/Asinh';\nimport { atanConfig } from './kernels/Atan';\nimport { atan2Config } from './kernels/Atan2';\nimport { atanhConfig } from './kernels/Atanh';\nimport { avgPoolConfig } from './kernels/AvgPool';\nimport { avgPool3DConfig } from './kernels/AvgPool3D';\nimport { avgPool3DGradConfig } from './kernels/AvgPool3DGrad';\nimport { avgPoolGradConfig } from './kernels/AvgPoolGrad';\nimport { batchMatMulConfig } from './kernels/BatchMatMul';\nimport { batchNormConfig } from './kernels/BatchNorm';\nimport { batchToSpaceNDConfig } from './kernels/BatchToSpaceND';\nimport { bincountConfig } from './kernels/Bincount';\nimport { broadcastArgsConfig } from './kernels/BroadcastArgs';\nimport { castConfig } from './kernels/Cast';\nimport { ceilConfig } from './kernels/Ceil';\nimport { clipByValueConfig } from './kernels/ClipByValue';\nimport { complexConfig } from './kernels/Complex';\nimport { complexAbsConfig } from './kernels/ComplexAbs';\nimport { concatConfig } from './kernels/Concat';\nimport { conv2DConfig } from './kernels/Conv2D';\nimport { conv2DBackpropFilterConfig } from './kernels/Conv2DBackpropFilter';\nimport { conv2DBackpropInputConfig } from './kernels/Conv2DBackpropInput';\nimport { conv3DConfig } from './kernels/Conv3D';\nimport { conv3DBackpropFilterV2Config } from './kernels/Conv3DBackpropFilterV2';\nimport { conv3DBackpropInputConfig } from './kernels/Conv3DBackpropInputV2';\nimport { cosConfig } from './kernels/Cos';\nimport { coshConfig } from './kernels/Cosh';\nimport { cropAndResizeConfig } from './kernels/CropAndResize';\nimport { cumsumConfig } from './kernels/Cumsum';\nimport { denseBincountConfig } from './kernels/DenseBincount';\nimport { depthToSpaceConfig } from './kernels/DepthToSpace';\nimport { depthwiseConv2dNativeConfig } from './kernels/DepthwiseConv2dNative';\nimport { depthwiseConv2dNativeBackpropFilterConfig } from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport { depthwiseConv2dNativeBackpropInputConfig } from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport { diagConfig } from './kernels/Diag';\nimport { dilation2DConfig } from './kernels/Dilation2D';\nimport { einsumConfig } from './kernels/Einsum';\nimport { eluConfig } from './kernels/Elu';\nimport { eluGradConfig } from './kernels/EluGrad';\nimport { equalConfig } from './kernels/Equal';\nimport { erfConfig } from './kernels/Erf';\nimport { expConfig } from './kernels/Exp';\nimport { expandDimsConfig } from './kernels/ExpandDims';\nimport { expm1Config } from './kernels/Expm1';\nimport { fftConfig } from './kernels/FFT';\nimport { fillConfig } from './kernels/Fill';\nimport { flipLeftRightConfig } from './kernels/FlipLeftRight';\nimport { floorConfig } from './kernels/Floor';\nimport { floorDivConfig } from './kernels/FloorDiv';\nimport { fromPixelsConfig } from './kernels/FromPixels';\nimport { fusedConv2DConfig } from './kernels/FusedConv2D';\nimport { fusedDepthwiseConv2DConfig } from './kernels/FusedDepthwiseConv2D';\nimport { gatherNdConfig } from './kernels/GatherNd';\nimport { gatherV2Config } from './kernels/GatherV2';\nimport { greaterConfig } from './kernels/Greater';\nimport { greaterEqualConfig } from './kernels/GreaterEqual';\nimport { identityConfig } from './kernels/Identity';\nimport { ifftConfig } from './kernels/IFFT';\nimport { imagConfig } from './kernels/Imag';\nimport { isFiniteConfig } from './kernels/IsFinite';\nimport { isInfConfig } from './kernels/IsInf';\nimport { isNaNConfig } from './kernels/IsNaN';\nimport { leakyReluConfig } from './kernels/LeakyRelu';\nimport { lessConfig } from './kernels/Less';\nimport { lessEqualConfig } from './kernels/LessEqual';\nimport { linSpaceConfig } from './kernels/LinSpace';\nimport { logConfig } from './kernels/Log';\nimport { log1pConfig } from './kernels/Log1p';\nimport { logicalAndConfig } from './kernels/LogicalAnd';\nimport { logicalNotConfig } from './kernels/LogicalNot';\nimport { logicalOrConfig } from './kernels/LogicalOr';\nimport { LRNConfig } from './kernels/LRN';\nimport { LRNGradConfig } from './kernels/LRNGrad';\nimport { maxConfig } from './kernels/Max';\nimport { maximumConfig } from './kernels/Maximum';\nimport { maxPoolConfig } from './kernels/MaxPool';\nimport { maxPool3DConfig } from './kernels/MaxPool3D';\nimport { maxPool3DGradConfig } from './kernels/MaxPool3DGrad';\nimport { maxPoolGradConfig } from './kernels/MaxPoolGrad';\nimport { maxPoolWithArgmaxConfig } from './kernels/MaxPoolWithArgmax';\nimport { meanConfig } from './kernels/Mean';\nimport { minConfig } from './kernels/Min';\nimport { minimumConfig } from './kernels/Minimum';\nimport { mirrorPadConfig } from './kernels/MirrorPad';\nimport { modConfig } from './kernels/Mod';\nimport { multinomialConfig } from './kernels/Multinomial';\nimport { multiplyConfig } from './kernels/Multiply';\nimport { negConfig } from './kernels/Neg';\nimport { nonMaxSuppressionV3Config } from './kernels/NonMaxSuppressionV3';\nimport { nonMaxSuppressionV4Config } from './kernels/NonMaxSuppressionV4';\nimport { nonMaxSuppressionV5Config } from './kernels/NonMaxSuppressionV5';\nimport { notEqualConfig } from './kernels/NotEqual';\nimport { oneHotConfig } from './kernels/OneHot';\nimport { onesLikeConfig } from './kernels/OnesLike';\nimport { packConfig } from './kernels/Pack';\nimport { padV2Config } from './kernels/PadV2';\nimport { powConfig } from './kernels/Pow';\nimport { preluConfig } from './kernels/Prelu';\nimport { prodConfig } from './kernels/Prod';\nimport { rangeConfig } from './kernels/Range';\nimport { realConfig } from './kernels/Real';\nimport { realDivConfig } from './kernels/RealDiv';\nimport { reciprocalConfig } from './kernels/Reciprocal';\nimport { reluConfig } from './kernels/Relu';\nimport { relu6Config } from './kernels/Relu6';\nimport { reshapeConfig } from './kernels/Reshape';\nimport { resizeBilinearConfig } from './kernels/ResizeBilinear';\nimport { resizeBilinearGradConfig } from './kernels/ResizeBilinearGrad';\nimport { resizeNearestNeighborConfig } from './kernels/ResizeNearestNeighbor';\nimport { resizeNearestNeighborGradConfig } from './kernels/ResizeNearestNeighborGrad';\nimport { reverseConfig } from './kernels/Reverse';\nimport { rotateWithOffsetConfig } from './kernels/RotateWithOffset';\nimport { roundConfig } from './kernels/Round';\nimport { rsqrtConfig } from './kernels/Rsqrt';\nimport { scatterNdConfig } from './kernels/ScatterNd';\nimport { selectConfig } from './kernels/Select';\nimport { seluConfig } from './kernels/Selu';\nimport { sigmoidConfig } from './kernels/Sigmoid';\nimport { signConfig } from './kernels/Sign';\nimport { sinConfig } from './kernels/Sin';\nimport { sinhConfig } from './kernels/Sinh';\nimport { sliceConfig } from './kernels/Slice';\nimport { softmaxConfig } from './kernels/Softmax';\nimport { softplusConfig } from './kernels/Softplus';\nimport { spaceToBatchNDConfig } from './kernels/SpaceToBatchND';\nimport { sparseFillEmptyRowsConfig } from './kernels/SparseFillEmptyRows';\nimport { sparseReshapeConfig } from './kernels/SparseReshape';\nimport { sparseSegmentMeanConfig } from './kernels/SparseSegmentMean';\nimport { sparseSegmentSumConfig } from './kernels/SparseSegmentSum';\nimport { sparseToDenseConfig } from './kernels/SparseToDense';\nimport { splitVConfig } from './kernels/SplitV';\nimport { sqrtConfig } from './kernels/Sqrt';\nimport { squareConfig } from './kernels/Square';\nimport { squaredDifferenceConfig } from './kernels/SquaredDifference';\nimport { stepConfig } from './kernels/Step';\nimport { stridedSliceConfig } from './kernels/StridedSlice';\nimport { stringNGramsConfig } from './kernels/StringNGrams';\nimport { stringSplitConfig } from './kernels/StringSplit';\nimport { stringToHashBucketFastConfig } from './kernels/StringToHashBucketFast';\nimport { subConfig } from './kernels/Sub';\nimport { sumConfig } from './kernels/Sum';\nimport { tanConfig } from './kernels/Tan';\nimport { tanhConfig } from './kernels/Tanh';\nimport { tileConfig } from './kernels/Tile';\nimport { topKConfig } from './kernels/TopK';\nimport { transformConfig } from './kernels/Transform';\nimport { transposeConfig } from './kernels/Transpose';\nimport { uniqueConfig } from './kernels/Unique';\nimport { unpackConfig } from './kernels/Unpack';\nimport { unsortedSegmentSumConfig } from './kernels/UnsortedSegmentSum';\nimport { zerosLikeConfig } from './kernels/ZerosLike';\n// List all kernel configs here\nconst kernelConfigs = [\n    _fusedMatMulConfig,\n    absConfig,\n    acosConfig,\n    acoshConfig,\n    addConfig,\n    addNConfig,\n    allConfig,\n    anyConfig,\n    argMaxConfig,\n    argMinConfig,\n    asinConfig,\n    asinhConfig,\n    atanConfig,\n    atan2Config,\n    atanhConfig,\n    avgPoolConfig,\n    avgPool3DConfig,\n    avgPool3DGradConfig,\n    avgPoolGradConfig,\n    batchMatMulConfig,\n    batchNormConfig,\n    batchToSpaceNDConfig,\n    bincountConfig,\n    broadcastArgsConfig,\n    castConfig,\n    ceilConfig,\n    clipByValueConfig,\n    complexConfig,\n    complexAbsConfig,\n    concatConfig,\n    conv2DConfig,\n    conv2DBackpropFilterConfig,\n    conv2DBackpropInputConfig,\n    conv3DConfig,\n    conv3DBackpropFilterV2Config,\n    conv3DBackpropInputConfig,\n    cosConfig,\n    coshConfig,\n    cropAndResizeConfig,\n    cumsumConfig,\n    denseBincountConfig,\n    depthToSpaceConfig,\n    depthwiseConv2dNativeConfig,\n    depthwiseConv2dNativeBackpropFilterConfig,\n    depthwiseConv2dNativeBackpropInputConfig,\n    diagConfig,\n    dilation2DConfig,\n    einsumConfig,\n    eluConfig,\n    eluGradConfig,\n    equalConfig,\n    erfConfig,\n    expConfig,\n    expandDimsConfig,\n    expm1Config,\n    fftConfig,\n    fillConfig,\n    flipLeftRightConfig,\n    floorConfig,\n    floorDivConfig,\n    fromPixelsConfig,\n    fusedConv2DConfig,\n    fusedDepthwiseConv2DConfig,\n    gatherNdConfig,\n    gatherV2Config,\n    greaterConfig,\n    greaterEqualConfig,\n    identityConfig,\n    ifftConfig,\n    imagConfig,\n    isFiniteConfig,\n    isInfConfig,\n    isNaNConfig,\n    leakyReluConfig,\n    lessConfig,\n    lessEqualConfig,\n    linSpaceConfig,\n    logConfig,\n    log1pConfig,\n    logicalAndConfig,\n    logicalNotConfig,\n    logicalOrConfig,\n    LRNConfig,\n    LRNGradConfig,\n    maxConfig,\n    maximumConfig,\n    maxPoolConfig,\n    maxPool3DConfig,\n    maxPool3DGradConfig,\n    maxPoolGradConfig,\n    maxPoolWithArgmaxConfig,\n    meanConfig,\n    minConfig,\n    minimumConfig,\n    mirrorPadConfig,\n    modConfig,\n    multinomialConfig,\n    multiplyConfig,\n    negConfig,\n    nonMaxSuppressionV3Config,\n    nonMaxSuppressionV4Config,\n    nonMaxSuppressionV5Config,\n    notEqualConfig,\n    oneHotConfig,\n    onesLikeConfig,\n    packConfig,\n    padV2Config,\n    powConfig,\n    preluConfig,\n    prodConfig,\n    rangeConfig,\n    realConfig,\n    realDivConfig,\n    reciprocalConfig,\n    reluConfig,\n    relu6Config,\n    reshapeConfig,\n    resizeBilinearConfig,\n    resizeBilinearGradConfig,\n    resizeNearestNeighborConfig,\n    resizeNearestNeighborGradConfig,\n    reverseConfig,\n    rotateWithOffsetConfig,\n    roundConfig,\n    rsqrtConfig,\n    scatterNdConfig,\n    selectConfig,\n    seluConfig,\n    sigmoidConfig,\n    signConfig,\n    sinConfig,\n    sinhConfig,\n    sliceConfig,\n    softmaxConfig,\n    softplusConfig,\n    spaceToBatchNDConfig,\n    sparseFillEmptyRowsConfig,\n    sparseReshapeConfig,\n    sparseSegmentMeanConfig,\n    sparseSegmentSumConfig,\n    sparseToDenseConfig,\n    splitVConfig,\n    sqrtConfig,\n    squareConfig,\n    squaredDifferenceConfig,\n    stepConfig,\n    stridedSliceConfig,\n    stringNGramsConfig,\n    stringSplitConfig,\n    stringToHashBucketFastConfig,\n    subConfig,\n    sumConfig,\n    tanConfig,\n    tanhConfig,\n    tileConfig,\n    topKConfig,\n    transformConfig,\n    transposeConfig,\n    uniqueConfig,\n    unpackConfig,\n    unsortedSegmentSumConfig,\n    zerosLikeConfig\n];\nfor (const kernelConfig of kernelConfigs) {\n    registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// All exports from this package should be in base.\nexport * from './base';\nimport './register_all_kernels';\n","var A=(h,t)=>()=>(t||h((t={exports:{}}).exports,t),t.exports);var u=(h,t,e)=>new Promise((i,s)=>{var a=r=>{try{o(e.next(r))}catch(l){s(l)}},n=r=>{try{o(e.throw(r))}catch(l){s(l)}},o=r=>r.done?i(r.value):Promise.resolve(r.value).then(a,n);o((e=e.apply(h,t)).next())});var C=A((et,O)=>{O.exports={version:\"1.4.4\",license:\"MIT\",main:\"dist/index.js\",typings:\"dist/index.d.ts\",files:[\"dist\",\"src/tflite\",\"src/models\"],scripts:{start:'concurrently \"yarn dev\" \"yarn types\"',dev:\"node ../../scripts/dev\",\"build:only\":\"node ../../scripts/build\",build:\"yarn build:only && yarn types:build\",types:\"tsc -w\",\"types:build\":\"tsc -p tsconfig.json\",test:\"jest --maxWorkers=1 --passWithNoTests\",lint:\"eslint -c ../../.eslintrc .\",\"lint:fix\":\"yarn lint --fix\",prepare:\"yarn build\",size:\"size-limit\",analyze:\"size-limit --why\",format:\"prettier --write src/**/*.ts\"},peerDependencies:{\"@100mslive/hms-video\":\"^0.2.0\"},name:\"@100mslive/hms-virtual-background\",author:\"ashish17\",module:\"dist/index.js\",devDependencies:{\"@100mslive/hms-video\":\"0.2.4\"},dependencies:{\"@tensorflow/tfjs-backend-webgl\":\"^3.3.0\",\"@tensorflow/tfjs-core\":\"^3.3.0\",\"@webassemblyjs/helper-wasm-bytecode\":\"^1.11.0\",\"@webassemblyjs/wasm-gen\":\"^1.11.0\",\"gifuct-js\":\"^2.1.2\",\"wasm-check\":\"^2.0.2\"},eslintIgnore:[\"tflite.js\",\"tflite-simd.js\",\"tflite.wasm\",\"tflite-simd.wasm\",\"defineTFLite.ts\",\"importing.test.ts\"],gitHead:\"a209b16cf484791322b36f5499339e91f960d26b\"}});var _=C(),F=`https://unpkg.com/${_.name}/src`,M=\"VBProcessor\",R=\"tflite/tflite.js\",j=\"tflite/tflite-simd.js\",G=\"models/selfie_segmentation_landscape.tflite\",S=h=>new Promise(function(t,e){let i=document.createElement(\"script\");i.src=h,i.onload=t,i.onerror=e,document.head.appendChild(i)}),W=()=>u(void 0,null,function*(){let h,t=F+\"/\"+j;yield S(t);try{h=yield createTFLiteSIMDModule()}catch(e){console.warn(\"SIMD not supported. You may experience poor virtual background effect.\"),t=F+\"/\"+R,yield S(t),h=yield createTFLiteModule()}return h}),H=()=>u(void 0,null,function*(){let h=F+\"/\"+G,[t,e]=yield Promise.all([W(),fetch(h)]),i=yield e.arrayBuffer(),s=t._getModelBufferMemoryOffset();return t.HEAPU8.set(new Uint8Array(i),s),t._loadModel(i.byteLength),console.debug(M,\"Input memory offset:\",t._getInputMemoryOffset()),console.debug(M,\"Input height:\",t._getInputHeight()),console.debug(M,\"Input width:\",t._getInputWidth()),console.debug(M,\"Input channels:\",t._getInputChannelCount()),t});import\"@tensorflow/tfjs-backend-webgl\";import{parseGIF as N,decompressFrames as U}from\"gifuct-js\";import{HMSPluginUnsupportedTypes as z,HMSVideoPluginType as q}from\"@100mslive/hms-video\";var y=\"VBProcessor\",J=33,Y=C(),$=214,Q=855,K=120,X=720,Z=class{constructor(t,e=!1){this.backgroundType=\"none\";this.background=t,this.enableSharpening=e,this.backgroundImage=null,this.backgroundVideo=null,this.personMaskWidth=256,this.personMaskHeight=144,this.isVirtualBackground=!1,this.blurValue=\"10px\",this.loadModelCalled=!1,this.tfLite=null,this.modelName=\"landscape-segmentation\",this.outputCtx=null,this.input=null,this.output=null,this.timerID=0,this.imageAspectRatio=1,this.personMaskPixelCount=this.personMaskWidth*this.personMaskHeight,this.personMask=new ImageData(this.personMaskWidth,this.personMaskHeight),this.personMaskCanvas=document.createElement(\"canvas\"),this.personMaskCanvas.width=this.personMaskWidth,this.personMaskCanvas.height=this.personMaskHeight,this.personMaskCtx=this.personMaskCanvas.getContext(\"2d\"),this.filters={},this.gifFrames=null,this.gifFramesIndex=0,this.gifFrameImageData=null,this.tempGifCanvas=document.createElement(\"canvas\"),this.tempGifContext=this.tempGifCanvas.getContext(\"2d\"),this.giflocalCount=0,this.enableSharpening=e,this.log(y,\"Virtual Background plugin created\"),this.setBackground(this.background)}init(){return u(this,null,function*(){this.loadModelCalled?yield this.tfLitePromise:(this.log(y,\"PREVIOUS LOADED MODEL IS \",this.tfLite),this.loadModelCalled=!0,this.tfLitePromise=H(),this.tfLite=yield this.tfLitePromise),this.enableSharpening&&this.initSharpenFilter()})}isSupported(){return navigator.userAgent.indexOf(\"Chrome\")!==-1||navigator.userAgent.indexOf(\"Firefox\")!==-1||navigator.userAgent.indexOf(\"Edg\")!==-1||navigator.userAgent.indexOf(\"Edge\")!==-1}checkSupport(){let t={};return[\"Chrome\",\"Firefox\",\"Edg\",\"Edge\"].some(e=>navigator.userAgent.indexOf(e)!==-1)?t.isSupported=!0:(t.isSupported=!1,t.errType=z.PLATFORM_NOT_SUPPORTED,t.errMsg=\"browser not supported for plugin, see docs\"),t}getName(){return Y.name}getPluginType(){return q.TRANSFORM}setBackground(t){return u(this,null,function*(){if(t!==\"\")if(t===\"none\")this.log(y,\"setting background to :\",t),this.background=\"none\",this.backgroundType=\"none\",this.isVirtualBackground=!1;else if(t===\"blur\")this.log(y,\"setting background to :\",t),this.background=\"blur\",this.backgroundType=\"blur\",this.isVirtualBackground=!1;else if(t instanceof HTMLImageElement){this.log(\"setting background to image\",t);let e=yield this.setImage(t);if(!e||!e.complete||!e.naturalHeight)throw new Error(\"Invalid image. Provide a valid and successfully loaded HTMLImageElement\");this.isVirtualBackground=!0,this.backgroundImage=e,this.backgroundType=\"image\"}else if(t instanceof HTMLVideoElement)this.log(\"setting background to video\",t),this.backgroundVideo=t,this.backgroundVideo.crossOrigin=\"anonymous\",this.backgroundVideo.muted=!0,this.backgroundVideo.loop=!0,this.backgroundVideo.oncanplaythrough=()=>u(this,null,function*(){this.backgroundVideo!=null&&(yield this.backgroundVideo.play(),this.isVirtualBackground=!0,this.backgroundType=\"video\")});else if(console.log(\"setting gif to background\"),this.gifFrames=yield this.setGiF(t),this.gifFrames!=null&&this.gifFrames.length>0)this.backgroundType=\"gif\",this.isVirtualBackground=!0;else throw new Error(\"Invalid background supplied, see the docs to check supported background type\");else throw new Error(\"Invalid background supplied, see the docs to check supported background type\")})}stop(){var t,e;this.isVirtualBackground&&((t=this.backgroundImage)==null||t.removeAttribute(\"src\"),(e=this.backgroundVideo)==null||e.removeAttribute(\"src\"),this.backgroundType===\"video\"&&(this.backgroundVideo.loop=!1,this.backgroundVideo=null)),this.outputCtx&&(this.outputCtx.fillStyle=\"rgb(0, 0, 0)\",this.outputCtx.fillRect(0,0,this.output.width,this.output.height)),this.gifFrameImageData=null,this.gifFrames=null,this.giflocalCount=0,this.gifFramesIndex=0}processVideoFrame(t,e,i){if(!t||!e)throw new Error(\"Plugin invalid input/output\");this.input=t,this.output=e;let s=e.getContext(\"2d\");if(s.canvas.width!==t.width&&(s.canvas.width=t.width),s.canvas.height!==t.height&&(s.canvas.height=t.height),this.backgroundType===\"video\"&&(this.backgroundVideo.width=t.width,this.backgroundVideo.height=t.height),this.outputCtx=s,this.imageAspectRatio=t.width/t.height,this.imageAspectRatio<=0)throw new Error(\"Invalid input width/height\");let a=()=>u(this,null,function*(){yield this.runSegmentation(i)});this.background===\"none\"&&!this.isVirtualBackground?(this.outputCtx.globalCompositeOperation=\"copy\",this.outputCtx.filter=\"none\",this.outputCtx.drawImage(t,0,0,t.width,t.height)):a()}setImage(t){return u(this,null,function*(){return t.crossOrigin=\"anonymous\",new Promise((e,i)=>{t.onload=()=>e(t),t.onerror=i})})}setGiF(t){return fetch(t).then(e=>e.arrayBuffer()).then(e=>N(e)).then(e=>U(e,!0))}log(t,...e){console.info(t,...e)}resizeInputData(){this.personMaskCtx.drawImage(this.input,0,0,this.input.width,this.input.height,0,0,this.personMaskWidth,this.personMaskHeight);let t=this.personMaskCtx.getImageData(0,0,this.personMaskWidth,this.personMaskHeight),e=this.tfLite._getInputMemoryOffset()/4;for(let i=0;i<this.personMaskPixelCount;i++)this.tfLite.HEAPF32[e+i*3]=t.data[i*4]/255,this.tfLite.HEAPF32[e+i*3+1]=t.data[i*4+1]/255,this.tfLite.HEAPF32[e+i*3+2]=t.data[i*4+2]/255}infer(t){t||this.tfLite._runInference();let e=this.tfLite._getOutputMemoryOffset()/4;for(let i=0;i<this.personMaskPixelCount;i++)if(this.modelName===\"meet\"){let s=this.tfLite.HEAPF32[e+i*2],a=this.tfLite.HEAPF32[e+i*2+1],n=Math.max(s,a),o=Math.exp(s-n),r=Math.exp(a-n);this.personMask.data[i*4+3]=255*r/(o+r)}else if(this.modelName===\"landscape-segmentation\"){let s=this.tfLite.HEAPF32[e+i];this.personMask.data[i*4+3]=255*s}this.personMaskCtx.putImageData(this.personMask,0,0)}postProcessing(){this.outputCtx.globalCompositeOperation=\"copy\",this.outputCtx.filter=\"none\",this.isVirtualBackground?this.outputCtx.filter=\"blur(4px)\":this.outputCtx.filter=\"blur(8px)\",this.drawPersonMask(),this.outputCtx.globalCompositeOperation=\"source-in\",this.outputCtx.filter=\"none\",this.outputCtx.drawImage(this.input,0,0),this.enableSharpening&&this.output.width>$&&this.output.height>K&&this.output.width<Q&&this.output.height<X&&this.sharpenFilter(),this.drawSegmentedBackground()}sharpenFilter(){let t=this.outputCtx.getImageData(0,0,this.output.width,this.output.height),e=this.filters.convolute(t);this.outputCtx.putImageData(e,0,0)}drawPersonMask(){this.outputCtx.drawImage(this.personMaskCanvas,0,0,this.personMaskWidth,this.personMaskHeight,0,0,this.output.width,this.output.height)}drawSegmentedBackground(){this.outputCtx.globalCompositeOperation=\"destination-over\",this.outputCtx.imageSmoothingEnabled=!0,this.outputCtx.imageSmoothingQuality=\"high\",this.isVirtualBackground?this.backgroundType===\"video\"&&this.backgroundVideo!=null&&this.backgroundVideo.readyState>=4?this.fitVideoToBackground():this.backgroundType===\"image\"?this.fitImageToBackground():this.backgroundType===\"gif\"&&(this.giflocalCount>this.gifFrames[this.gifFramesIndex].delay/J?(this.gifFramesIndex++,this.gifFramesIndex>=this.gifFrames.length&&(this.gifFramesIndex=0),this.giflocalCount=0):this.giflocalCount++,this.fitGifToBackground()):this.addBlurToBackground()}runSegmentation(t){return u(this,null,function*(){this.tfLite&&(this.resizeInputData(),yield this.infer(t),this.postProcessing())})}fitVideoToBackground(){this.fitData(this.backgroundVideo,this.backgroundVideo.videoWidth,this.backgroundVideo.videoHeight)}fitImageToBackground(){this.fitData(this.backgroundImage,this.backgroundImage.width,this.backgroundImage.height)}fitGifToBackground(){if(this.gifFrameImageData==null){let t=this.gifFrames[this.gifFramesIndex].dims;this.tempGifCanvas.width=t.width,this.tempGifCanvas.height=t.height,this.gifFrameImageData=this.tempGifContext.createImageData(t.width,t.height)}this.gifFrameImageData.data.set(this.gifFrames[this.gifFramesIndex].patch),this.tempGifContext.putImageData(this.gifFrameImageData,0,0),this.fitData(this.tempGifCanvas,this.gifFrameImageData.width,this.gifFrameImageData.height)}fitData(t,e,i){let s,a,n,o;e/i<this.imageAspectRatio?(s=e,a=e/this.imageAspectRatio,n=0,o=(i-a)/2):(a=i,s=i*this.imageAspectRatio,o=0,n=(e-s)/2),this.outputCtx.drawImage(t,n,o,s,a,0,0,this.output.width,this.output.height)}addBlurToBackground(){return u(this,null,function*(){let t=\"15px\";this.input.width<=160?t=\"5px\":this.input.width<=320?t=\"10px\":this.input.width<=640?t=\"15px\":this.input.width<=960?t=\"20px\":this.input.width<=1280?t=\"25px\":this.input.width<=1920&&(t=\"30px\"),this.outputCtx.filter=`blur(${t})`,this.outputCtx.drawImage(this.input,0,0,this.output.width,this.output.height)})}initSharpenFilter(){this.filters.tmpCanvas=document.createElement(\"canvas\"),this.filters.tmpCtx=this.filters.tmpCanvas.getContext(\"2d\"),this.filters.createImageData=(t,e)=>this.filters.tmpCtx.createImageData(t,e),this.filters.convolute=(t,e=[0,-1,0,-1,5,-1,0,-1,0],i)=>{let s=Math.round(Math.sqrt(e.length)),a=Math.floor(s/2),n=t.data,o=t.width,r=t.height,l=o,x=r,T=this.filters.createImageData(l,x),p=T.data,P=i?1:0;for(let d=0;d<x;d=d+1)for(let g=0;g<l;g=g+1){let c=(d*l+g)*4;if(n[c+3]!==0&&g<l&&d<x){let D=d,B=g,L=0,E=0,V=0,w=0;for(let m=0;m<s;m++)for(let f=0;f<s;f++){let v=D+m-a,I=B+f-a;if(v>=0&&v<r&&I>=0&&I<o){let k=(v*o+I)*4,b=e[m*s+f];L+=n[k]*b,E+=n[k+1]*b,V+=n[k+2]*b,w+=n[k+3]*b}}p[c]=L,p[c+1]=E,p[c+2]=V,p[c+3]=w+P*(255-w)}}return T}}};export{Z as HMSVirtualBackgroundPlugin};\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deinterlace = void 0;\n\n/**\r\n * Deinterlace function from https://github.com/shachaf/jsgif\r\n */\nvar deinterlace = function deinterlace(pixels, width) {\n  var newPixels = new Array(pixels.length);\n  var rows = pixels.length / width;\n\n  var cpRow = function cpRow(toRow, fromRow) {\n    var fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\n    newPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));\n  }; // See appendix E.\n\n\n  var offsets = [0, 4, 2, 1];\n  var steps = [8, 8, 4, 2];\n  var fromRow = 0;\n\n  for (var pass = 0; pass < 4; pass++) {\n    for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\n      cpRow(toRow, fromRow);\n      fromRow++;\n    }\n  }\n\n  return newPixels;\n};\n\nexports.deinterlace = deinterlace;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompressFrames = exports.decompressFrame = exports.parseGIF = void 0;\n\nvar _gif = _interopRequireDefault(require(\"js-binary-schema-parser/lib/schemas/gif\"));\n\nvar _jsBinarySchemaParser = require(\"js-binary-schema-parser\");\n\nvar _uint = require(\"js-binary-schema-parser/lib/parsers/uint8\");\n\nvar _deinterlace = require(\"./deinterlace\");\n\nvar _lzw = require(\"./lzw\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar parseGIF = function parseGIF(arrayBuffer) {\n  var byteData = new Uint8Array(arrayBuffer);\n  return (0, _jsBinarySchemaParser.parse)((0, _uint.buildStream)(byteData), _gif[\"default\"]);\n};\n\nexports.parseGIF = parseGIF;\n\nvar generatePatch = function generatePatch(image) {\n  var totalPixels = image.pixels.length;\n  var patchData = new Uint8ClampedArray(totalPixels * 4);\n\n  for (var i = 0; i < totalPixels; i++) {\n    var pos = i * 4;\n    var colorIndex = image.pixels[i];\n    var color = image.colorTable[colorIndex] || [0, 0, 0];\n    patchData[pos] = color[0];\n    patchData[pos + 1] = color[1];\n    patchData[pos + 2] = color[2];\n    patchData[pos + 3] = colorIndex !== image.transparentIndex ? 255 : 0;\n  }\n\n  return patchData;\n};\n\nvar decompressFrame = function decompressFrame(frame, gct, buildImagePatch) {\n  if (!frame.image) {\n    console.warn('gif frame does not have associated image.');\n    return;\n  }\n\n  var image = frame.image; // get the number of pixels\n\n  var totalPixels = image.descriptor.width * image.descriptor.height; // do lzw decompression\n\n  var pixels = (0, _lzw.lzw)(image.data.minCodeSize, image.data.blocks, totalPixels); // deal with interlacing if necessary\n\n  if (image.descriptor.lct.interlaced) {\n    pixels = (0, _deinterlace.deinterlace)(pixels, image.descriptor.width);\n  }\n\n  var resultImage = {\n    pixels: pixels,\n    dims: {\n      top: frame.image.descriptor.top,\n      left: frame.image.descriptor.left,\n      width: frame.image.descriptor.width,\n      height: frame.image.descriptor.height\n    }\n  }; // color table\n\n  if (image.descriptor.lct && image.descriptor.lct.exists) {\n    resultImage.colorTable = image.lct;\n  } else {\n    resultImage.colorTable = gct;\n  } // add per frame relevant gce information\n\n\n  if (frame.gce) {\n    resultImage.delay = (frame.gce.delay || 10) * 10; // convert to ms\n\n    resultImage.disposalType = frame.gce.extras.disposal; // transparency\n\n    if (frame.gce.extras.transparentColorGiven) {\n      resultImage.transparentIndex = frame.gce.transparentColorIndex;\n    }\n  } // create canvas usable imagedata if desired\n\n\n  if (buildImagePatch) {\n    resultImage.patch = generatePatch(resultImage);\n  }\n\n  return resultImage;\n};\n\nexports.decompressFrame = decompressFrame;\n\nvar decompressFrames = function decompressFrames(parsedGif, buildImagePatches) {\n  return parsedGif.frames.filter(function (f) {\n    return f.image;\n  }).map(function (f) {\n    return decompressFrame(f, parsedGif.gct, buildImagePatches);\n  });\n};\n\nexports.decompressFrames = decompressFrames;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lzw = void 0;\n\n/**\r\n * javascript port of java LZW decompression\r\n * Original java author url: https://gist.github.com/devunwired/4479231\r\n */\nvar lzw = function lzw(minCodeSize, data, pixelCount) {\n  var MAX_STACK_SIZE = 4096;\n  var nullCode = -1;\n  var npix = pixelCount;\n  var available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, i, datum, data_size, first, top, bi, pi;\n  var dstPixels = new Array(pixelCount);\n  var prefix = new Array(MAX_STACK_SIZE);\n  var suffix = new Array(MAX_STACK_SIZE);\n  var pixelStack = new Array(MAX_STACK_SIZE + 1); // Initialize GIF data stream decoder.\n\n  data_size = minCodeSize;\n  clear = 1 << data_size;\n  end_of_information = clear + 1;\n  available = clear + 2;\n  old_code = nullCode;\n  code_size = data_size + 1;\n  code_mask = (1 << code_size) - 1;\n\n  for (code = 0; code < clear; code++) {\n    prefix[code] = 0;\n    suffix[code] = code;\n  } // Decode GIF pixel stream.\n\n\n  var datum, bits, count, first, top, pi, bi;\n  datum = bits = count = first = top = pi = bi = 0;\n\n  for (i = 0; i < npix;) {\n    if (top === 0) {\n      if (bits < code_size) {\n        // get the next byte\n        datum += data[bi] << bits;\n        bits += 8;\n        bi++;\n        continue;\n      } // Get the next code.\n\n\n      code = datum & code_mask;\n      datum >>= code_size;\n      bits -= code_size; // Interpret the code\n\n      if (code > available || code == end_of_information) {\n        break;\n      }\n\n      if (code == clear) {\n        // Reset decoder.\n        code_size = data_size + 1;\n        code_mask = (1 << code_size) - 1;\n        available = clear + 2;\n        old_code = nullCode;\n        continue;\n      }\n\n      if (old_code == nullCode) {\n        pixelStack[top++] = suffix[code];\n        old_code = code;\n        first = code;\n        continue;\n      }\n\n      in_code = code;\n\n      if (code == available) {\n        pixelStack[top++] = first;\n        code = old_code;\n      }\n\n      while (code > clear) {\n        pixelStack[top++] = suffix[code];\n        code = prefix[code];\n      }\n\n      first = suffix[code] & 0xff;\n      pixelStack[top++] = first; // add a new string to the table, but only if space is available\n      // if not, just continue with current table until a clear code is found\n      // (deferred clear code implementation as per GIF spec)\n\n      if (available < MAX_STACK_SIZE) {\n        prefix[available] = old_code;\n        suffix[available] = first;\n        available++;\n\n        if ((available & code_mask) === 0 && available < MAX_STACK_SIZE) {\n          code_size++;\n          code_mask += available;\n        }\n      }\n\n      old_code = in_code;\n    } // Pop a pixel off the pixel stack.\n\n\n    top--;\n    dstPixels[pi++] = pixelStack[top];\n    i++;\n  }\n\n  for (i = pi; i < npix; i++) {\n    dstPixels[i] = 0; // clear missing pixels\n  }\n\n  return dstPixels;\n};\n\nexports.lzw = lzw;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loop = exports.conditional = exports.parse = void 0;\n\nvar parse = function parse(stream, schema) {\n  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : result;\n\n  if (Array.isArray(schema)) {\n    schema.forEach(function (partSchema) {\n      return parse(stream, partSchema, result, parent);\n    });\n  } else if (typeof schema === 'function') {\n    schema(stream, result, parent, parse);\n  } else {\n    var key = Object.keys(schema)[0];\n\n    if (Array.isArray(schema[key])) {\n      parent[key] = {};\n      parse(stream, schema[key], result, parent[key]);\n    } else {\n      parent[key] = schema[key](stream, result, parent, parse);\n    }\n  }\n\n  return result;\n};\n\nexports.parse = parse;\n\nvar conditional = function conditional(schema, conditionFunc) {\n  return function (stream, result, parent, parse) {\n    if (conditionFunc(stream, result, parent)) {\n      parse(stream, schema, result, parent);\n    }\n  };\n};\n\nexports.conditional = conditional;\n\nvar loop = function loop(schema, continueFunc) {\n  return function (stream, result, parent, parse) {\n    var arr = [];\n    var lastStreamPos = stream.pos;\n\n    while (continueFunc(stream, result, parent)) {\n      var newParent = {};\n      parse(stream, schema, result, newParent); // cases when whole file is parsed but no termination is there and stream position is not getting updated as well\n      // it falls into infinite recursion, null check to avoid the same\n\n      if (stream.pos === lastStreamPos) {\n        break;\n      }\n\n      lastStreamPos = stream.pos;\n      arr.push(newParent);\n    }\n\n    return arr;\n  };\n};\n\nexports.loop = loop;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readBits = exports.readArray = exports.readUnsigned = exports.readString = exports.peekBytes = exports.readBytes = exports.peekByte = exports.readByte = exports.buildStream = void 0;\n\n// Default stream and parsers for Uint8TypedArray data type\nvar buildStream = function buildStream(uint8Data) {\n  return {\n    data: uint8Data,\n    pos: 0\n  };\n};\n\nexports.buildStream = buildStream;\n\nvar readByte = function readByte() {\n  return function (stream) {\n    return stream.data[stream.pos++];\n  };\n};\n\nexports.readByte = readByte;\n\nvar peekByte = function peekByte() {\n  var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function (stream) {\n    return stream.data[stream.pos + offset];\n  };\n};\n\nexports.peekByte = peekByte;\n\nvar readBytes = function readBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos += length);\n  };\n};\n\nexports.readBytes = readBytes;\n\nvar peekBytes = function peekBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos + length);\n  };\n};\n\nexports.peekBytes = peekBytes;\n\nvar readString = function readString(length) {\n  return function (stream) {\n    return Array.from(readBytes(length)(stream)).map(function (value) {\n      return String.fromCharCode(value);\n    }).join('');\n  };\n};\n\nexports.readString = readString;\n\nvar readUnsigned = function readUnsigned(littleEndian) {\n  return function (stream) {\n    var bytes = readBytes(2)(stream);\n    return littleEndian ? (bytes[1] << 8) + bytes[0] : (bytes[0] << 8) + bytes[1];\n  };\n};\n\nexports.readUnsigned = readUnsigned;\n\nvar readArray = function readArray(byteSize, totalOrFunc) {\n  return function (stream, result, parent) {\n    var total = typeof totalOrFunc === 'function' ? totalOrFunc(stream, result, parent) : totalOrFunc;\n    var parser = readBytes(byteSize);\n    var arr = new Array(total);\n\n    for (var i = 0; i < total; i++) {\n      arr[i] = parser(stream);\n    }\n\n    return arr;\n  };\n};\n\nexports.readArray = readArray;\n\nvar subBitsTotal = function subBitsTotal(bits, startIndex, length) {\n  var result = 0;\n\n  for (var i = 0; i < length; i++) {\n    result += bits[startIndex + i] && Math.pow(2, length - i - 1);\n  }\n\n  return result;\n};\n\nvar readBits = function readBits(schema) {\n  return function (stream) {\n    var _byte = readByte()(stream); // convert the byte to bit array\n\n\n    var bits = new Array(8);\n\n    for (var i = 0; i < 8; i++) {\n      bits[7 - i] = !!(_byte & 1 << i);\n    } // convert the bit array to values based on the schema\n\n\n    return Object.keys(schema).reduce(function (res, key) {\n      var def = schema[key];\n\n      if (def.length) {\n        res[key] = subBitsTotal(bits, def.index, def.length);\n      } else {\n        res[key] = bits[def.index];\n      }\n\n      return res;\n    }, {});\n  };\n};\n\nexports.readBits = readBits;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ = require(\"../\");\n\nvar _uint = require(\"../parsers/uint8\");\n\n// a set of 0x00 terminated subblocks\nvar subBlocksSchema = {\n  blocks: function blocks(stream) {\n    var terminator = 0x00;\n    var chunks = [];\n    var streamSize = stream.data.length;\n    var total = 0;\n\n    for (var size = (0, _uint.readByte)()(stream); size !== terminator; size = (0, _uint.readByte)()(stream)) {\n      // size becomes undefined for some case when file is corrupted and  terminator is not proper \n      // null check to avoid recursion\n      if (!size) break; // catch corrupted files with no terminator\n\n      if (stream.pos + size >= streamSize) {\n        var availableSize = streamSize - stream.pos;\n        chunks.push((0, _uint.readBytes)(availableSize)(stream));\n        total += availableSize;\n        break;\n      }\n\n      chunks.push((0, _uint.readBytes)(size)(stream));\n      total += size;\n    }\n\n    var result = new Uint8Array(total);\n    var offset = 0;\n\n    for (var i = 0; i < chunks.length; i++) {\n      result.set(chunks[i], offset);\n      offset += chunks[i].length;\n    }\n\n    return result;\n  }\n}; // global control extension\n\nvar gceSchema = (0, _.conditional)({\n  gce: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    byteSize: (0, _uint.readByte)()\n  }, {\n    extras: (0, _uint.readBits)({\n      future: {\n        index: 0,\n        length: 3\n      },\n      disposal: {\n        index: 3,\n        length: 3\n      },\n      userInput: {\n        index: 6\n      },\n      transparentColorGiven: {\n        index: 7\n      }\n    })\n  }, {\n    delay: (0, _uint.readUnsigned)(true)\n  }, {\n    transparentColorIndex: (0, _uint.readByte)()\n  }, {\n    terminator: (0, _uint.readByte)()\n  }]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xf9;\n}); // image pipeline block\n\nvar imageSchema = (0, _.conditional)({\n  image: [{\n    code: (0, _uint.readByte)()\n  }, {\n    descriptor: [{\n      left: (0, _uint.readUnsigned)(true)\n    }, {\n      top: (0, _uint.readUnsigned)(true)\n    }, {\n      width: (0, _uint.readUnsigned)(true)\n    }, {\n      height: (0, _uint.readUnsigned)(true)\n    }, {\n      lct: (0, _uint.readBits)({\n        exists: {\n          index: 0\n        },\n        interlaced: {\n          index: 1\n        },\n        sort: {\n          index: 2\n        },\n        future: {\n          index: 3,\n          length: 2\n        },\n        size: {\n          index: 5,\n          length: 3\n        }\n      })\n    }]\n  }, (0, _.conditional)({\n    lct: (0, _uint.readArray)(3, function (stream, result, parent) {\n      return Math.pow(2, parent.descriptor.lct.size + 1);\n    })\n  }, function (stream, result, parent) {\n    return parent.descriptor.lct.exists;\n  }), {\n    data: [{\n      minCodeSize: (0, _uint.readByte)()\n    }, subBlocksSchema]\n  }]\n}, function (stream) {\n  return (0, _uint.peekByte)()(stream) === 0x2c;\n}); // plain text block\n\nvar textSchema = (0, _.conditional)({\n  text: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    blockSize: (0, _uint.readByte)()\n  }, {\n    preData: function preData(stream, result, parent) {\n      return (0, _uint.readBytes)(parent.text.blockSize)(stream);\n    }\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0x01;\n}); // application block\n\nvar applicationSchema = (0, _.conditional)({\n  application: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    blockSize: (0, _uint.readByte)()\n  }, {\n    id: function id(stream, result, parent) {\n      return (0, _uint.readString)(parent.blockSize)(stream);\n    }\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xff;\n}); // comment block\n\nvar commentSchema = (0, _.conditional)({\n  comment: [{\n    codes: (0, _uint.readBytes)(2)\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xfe;\n});\nvar schema = [{\n  header: [{\n    signature: (0, _uint.readString)(3)\n  }, {\n    version: (0, _uint.readString)(3)\n  }]\n}, {\n  lsd: [{\n    width: (0, _uint.readUnsigned)(true)\n  }, {\n    height: (0, _uint.readUnsigned)(true)\n  }, {\n    gct: (0, _uint.readBits)({\n      exists: {\n        index: 0\n      },\n      resolution: {\n        index: 1,\n        length: 3\n      },\n      sort: {\n        index: 4\n      },\n      size: {\n        index: 5,\n        length: 3\n      }\n    })\n  }, {\n    backgroundColorIndex: (0, _uint.readByte)()\n  }, {\n    pixelAspectRatio: (0, _uint.readByte)()\n  }]\n}, (0, _.conditional)({\n  gct: (0, _uint.readArray)(3, function (stream, result) {\n    return Math.pow(2, result.lsd.gct.size + 1);\n  })\n}, function (stream, result) {\n  return result.lsd.gct.exists;\n}), // content frames\n{\n  frames: (0, _.loop)([gceSchema, applicationSchema, commentSchema, imageSchema, textSchema], function (stream) {\n    var nextCode = (0, _uint.peekByte)()(stream); // rather than check for a terminator, we should check for the existence\n    // of an ext or image block to avoid infinite loops\n    //var terminator = 0x3B;\n    //return nextCode !== terminator;\n\n    return nextCode === 0x21 || nextCode === 0x2c;\n  })\n}];\nvar _default = schema;\nexports[\"default\"] = _default;","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n"],"names":[],"sourceRoot":""}