{"version":3,"file":"static/js/245.cfc284a2.js","mappings":"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","sources":["layouts/HLSView.jsx"],"sourcesContent":["import React, {\n  useEffect,\n  useRef,\n  Fragment,\n  useState,\n  useCallback,\n} from \"react\";\nimport Hls from \"hls.js\";\nimport { useHMSStore, selectHLSState } from \"@100mslive/react-sdk\";\nimport {\n  ChevronDownIcon,\n  ChevronUpIcon,\n  SettingIcon,\n} from \"@100mslive/react-icons\";\nimport {\n  Box,\n  Dropdown,\n  Flex,\n  styled,\n  Text,\n  Tooltip,\n} from \"@100mslive/react-ui\";\nimport { ChatView } from \"../components/chatView\";\nimport { FeatureFlags } from \"../services/FeatureFlags\";\nimport { useIsChatOpen } from \"../components/AppData/useChatState\";\n\nconst HLSVideo = styled(\"video\", {\n  h: \"100%\",\n  margin: \"0 auto\",\n});\n\nlet hls = null;\nconst HLSView = () => {\n  const videoRef = useRef(null);\n  const hlsState = useHMSStore(selectHLSState);\n  const isChatOpen = useIsChatOpen();\n  const hlsUrl = hlsState.variants[0]?.url;\n  const [availableLevels, setAvailableLevels] = useState([]);\n  const [currentSelectedQualityText, setCurrentSelectedQualityText] =\n    useState(\"\");\n  const [qualityDropDownOpen, setQualityDropDownOpen] = useState(false);\n\n  useEffect(() => {\n    if (videoRef.current && hlsUrl && !hls) {\n      if (Hls.isSupported()) {\n        hls = new Hls(getHLSConfig());\n        hls.loadSource(hlsUrl);\n        hls.attachMedia(videoRef.current);\n\n        hls.once(Hls.Events.MANIFEST_LOADED, (event, data) => {\n          setAvailableLevels(data.levels);\n          setCurrentSelectedQualityText(\"Auto\");\n        });\n      } else if (\n        videoRef.current.canPlayType(\"application/vnd.apple.mpegurl\")\n      ) {\n        videoRef.current.src = hlsUrl;\n      }\n    }\n  }, [hlsUrl]);\n\n  useEffect(() => {\n    return () => {\n      if (hls && hls.media) {\n        hls.detachMedia();\n        hls = null;\n      }\n    };\n  }, []);\n\n  const qualitySelectorHandler = useCallback(\n    qualityLevel => {\n      if (hls) {\n        hls.currentLevel = getCurrentLevel(qualityLevel);\n        const levelText =\n          qualityLevel.height === \"auto\" ? \"Auto\" : `${qualityLevel.height}p`;\n        setCurrentSelectedQualityText(levelText);\n      }\n    },\n    [availableLevels] //eslint-disable-line\n  );\n\n  /**\n   *\n   * @param {the current quality level clicked by the user. It is the level object } qualityLevel\n   * @returns an integer ranging from 0 to (availableLevels.length - 1).\n   * (e.g) if 4 levels are available, 0 is the lowest quality and 3 is the highest.\n   *\n   * This function is used rather than just using availableLevels.findIndex(quality) because, HLS gives the\n   * levels in reverse.\n   * (e.g) if available levels in the m3u8 are 360p,480p,720p,1080p,\n   *\n   * hls.levels gives us an array of level objects in the order [1080p,720p,480p,360p];\n   *\n   * so setting hls.currentLevel = availableLevels.getIndexOf(1080p) will set the stream to 360p instead of 1080p\n   * because availableLevels.getIndexOf(1080p) will give 0 but level 0 is 360p.\n   */\n  const getCurrentLevel = qualityLevel => {\n    if (qualityLevel.height === \"auto\") {\n      return -1;\n    }\n    const index = availableLevels.findIndex(\n      ({ url }) => url === qualityLevel.url\n    );\n\n    return availableLevels.length - 1 - index;\n  };\n\n  return (\n    <Fragment>\n      {hlsUrl ? (\n        <>\n          <Flex align=\"center\" css={{ position: \"absolute\", right: \"$4\" }}>\n            <Dropdown.Root\n              open={qualityDropDownOpen}\n              onOpenChange={value => setQualityDropDownOpen(value)}\n            >\n              <Dropdown.Trigger asChild data-testid=\"quality_selector\">\n                <Flex\n                  css={{\n                    color: \"$textPrimary\",\n                    borderRadius: \"$1\",\n                    cursor: \"pointer\",\n                    zIndex: 40,\n                    border: \"1px solid $textDisabled\",\n                    padding: \"$2 $4\",\n                  }}\n                >\n                  <Tooltip title=\"Select Quality\">\n                    <Flex>\n                      <SettingIcon />\n                      <Text variant=\"md\">{currentSelectedQualityText}</Text>\n                    </Flex>\n                  </Tooltip>\n\n                  <Box\n                    css={{ \"@lg\": { display: \"none\" }, color: \"$textDisabled\" }}\n                  >\n                    {qualityDropDownOpen ? (\n                      <ChevronUpIcon />\n                    ) : (\n                      <ChevronDownIcon />\n                    )}\n                  </Box>\n                </Flex>\n              </Dropdown.Trigger>\n              {availableLevels.length > 0 && (\n                <Dropdown.Content\n                  sideOffset={5}\n                  align=\"end\"\n                  css={{ height: \"auto\", maxHeight: \"$96\" }}\n                >\n                  <Dropdown.Item\n                    onClick={event =>\n                      qualitySelectorHandler({ height: \"auto\" })\n                    }\n                    css={{\n                      h: \"auto\",\n                      flexDirection: \"column\",\n                      flexWrap: \"wrap\",\n                      cursor: \"pointer\",\n                      alignItems: \"flex-start\",\n                    }}\n                    key=\"auto\"\n                  >\n                    <Text>Automatic</Text>\n                  </Dropdown.Item>\n                  {availableLevels.map(level => {\n                    return (\n                      <Dropdown.Item\n                        onClick={() => qualitySelectorHandler(level)}\n                        css={{\n                          h: \"auto\",\n                          flexDirection: \"column\",\n                          flexWrap: \"wrap\",\n                          cursor: \"pointer\",\n                          alignItems: \"flex-start\",\n                        }}\n                        key={level.url}\n                      >\n                        <Text>{`${level.height}p (${(\n                          Number(level.bitrate / 1024) / 1024\n                        ).toFixed(2)} Mbps)`}</Text>\n                      </Dropdown.Item>\n                    );\n                  })}\n                </Dropdown.Content>\n              )}\n            </Dropdown.Root>\n          </Flex>\n\n          <HLSVideo ref={videoRef} autoPlay controls playsInline />\n        </>\n      ) : (\n        <Flex align=\"center\" justify=\"center\" css={{ size: \"100%\" }}>\n          <Text variant=\"md\" css={{ textAlign: \"center\" }}>\n            Waiting for the Streaming to start...\n          </Text>\n        </Flex>\n      )}\n      {isChatOpen && (\n        <Box\n          css={{\n            height: \"50%\",\n            position: \"absolute\",\n            zIndex: 40,\n            bottom: \"$20\",\n            right: 0,\n            width: \"20%\",\n            \"@sm\": {\n              width: \"75%\",\n            },\n          }}\n        >\n          <ChatView />\n        </Box>\n      )}\n    </Fragment>\n  );\n};\n\nfunction getHLSConfig() {\n  if (FeatureFlags.optimiseHLSLatency()) {\n    // should reduce the latency by around 2-3 more seconds. Won't work well without good internet.\n    return {\n      enableWorker: true,\n      liveSyncDuration: 1,\n      liveMaxLatencyDuration: 5,\n      liveDurationInfinity: true,\n      highBufferWatchdogPeriod: 1,\n    };\n  }\n  return {};\n}\n\nexport default HLSView;\n"],"names":[],"sourceRoot":""}